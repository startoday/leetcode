Given an array A of integers and integer K, return the maximum S such that there exists i < j with A[i] + A[j] = S and S < K. If no i, j exist satisfying this equation, return -1.

 

Example 1:

Input: A = [34,23,1,24,75,33,54,8], K = 60
Output: 58
Explanation: 
We can use 34 and 24 to sum 58 which is less than 60.
Example 2:

Input: A = [10,20,30], K = 15
Output: -1
Explanation: 
In this case it's not possible to get a pair sum less that 15.

#暴力解
class Solution {
public:
    int twoSumLessThanK(vector<int>& A, int K) {
        int res = -1;
        for(int i = 0; i < A.size(); ++i) {
            for(int j = i + 1; j < A.size(); ++j) {
                if((A[i] + A[j]) < K) res = max (res, A[i] + A[j]);
            }
        }
        return res;
    }
};
#或者 2 pointer: 
#先sort，再左右走：如果小的话左指针向右走， 大的话右指针向左走 -- O(nlgn)

class Solution {
public:
    int twoSumLessThanK(vector<int>& A, int K) {
        int res = -1;
        sort(A.begin(), A.end());
        int i = 0; int j = A.size() - 1;
        while(i < j) {
            if((A[i] + A[j]) >= K) j--;
            else {
                res = max (res, A[i] + A[j]);
                i++;
            }
        }
        return res;
    }
};
