1. 01背包
n 个物品， 背包容量为V，每个物品耗费的空间是volume[i]，价值是value[i]。求使价值和最大
每个物品仅有一件。可以选择放（前i件的价值 + 新价值， 但空间减小）或者不放（前i件的价值，但空间不变）
---需要恰好装满背包：
初始化F[0] = 0， F[1....V] = 负无穷
只有容量为0的背包可能被价值为0的nothing“恰好装满”，其它容量的背包均没有合法的解，属于未定义的状态，它们的值就都应该是-∞了
---没有要求装满背包，只需要价格尽量大
初始化F[0....V] = 0
for(int i=1;i<=n;i++)
	for(int j=v;j>=volume[i];j--) //即j = 1 。。。V && volume[i <=j
		dp[j]=max(dp[j],dp[j-volume[i]]+value[i]);
  

2.完全背包问题
n 个物品， 背包容量为V，每个物品耗费的空间是volume[i]，价值是value[i]。求使价值和最大
每个物品有无限件
所以不是取或者不取，是取几件的问题
