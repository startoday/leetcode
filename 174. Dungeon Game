The demons had captured the princess (P) and imprisoned her in the bottom-right corner of a dungeon. The dungeon consists of M x N rooms laid out in a 2D grid. Our valiant knight (K) was initially positioned in the top-left room and must fight his way through the dungeon to rescue the princess.

The knight has an initial health point represented by a positive integer. If at any point his health point drops to 0 or below, he dies immediately.

Some of the rooms are guarded by demons, so the knight loses health (negative integers) upon entering these rooms; other rooms are either empty (0's) or contain magic orbs that increase the knight's health (positive integers).

#In order to reach the princess as quickly as possible, the knight decides to move only rightward or downward in each step.
#只能往右和往下走
 

# Write a function to determine the knight's minimum initial health so that he is able to rescue the princess.

For example, given the dungeon below, the initial health of the knight must be at least 7 if he follows the optimal path RIGHT-> RIGHT -> DOWN -> DOWN.


Note:

The knight's health has no upper bound.
Any room can contain threats or power-ups, even the first room the knight enters and the bottom-right room where the princess is imprisoned.

#应该是dp题，公主房间时血量至少为1，倒着推， 每次都减去此位置的血量，但至少是1, 两个方向选少的dp 定义为在某个位置所需的最少血量
dp[i][j] = max(1, min(dp[i+1][j], dp[i][j+1]))- A[i][j]
class Solution {
public:
    int calculateMinimumHP(vector<vector<int>>& dungeon) {
        int r = dungeon.size();
        int c = dungeon[0].size();
        vector<vector<int>> dp(r + 1, vector<int> (c + 1, INT_MAX));
        dp[r][c - 1] =  dp[r - 1][c] = 1;
        for(int i = r - 1; i >= 0; --i) {
             for(int j = c - 1; j >= 0; --j) {
                 dp[i][j] = max(1, min(dp[i + 1][j], dp[i][j + 1])) - dungeon[i][j];
             }
        }
        return max(1, dp[0][0]);
    }
};

