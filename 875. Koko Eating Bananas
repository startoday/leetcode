Koko loves to eat bananas.  There are N piles of bananas, the i-th pile has piles[i] bananas.  The guards have gone and will come back in H hours.

Koko can decide her bananas-per-hour eating speed of K.  Each hour, she chooses some pile of bananas, and eats K bananas from that pile.  If the pile has less than K bananas, she eats all of them instead, and won't eat any more bananas during this hour.

Koko likes to eat slowly, but still wants to finish eating all the bananas before the guards come back.

Return the minimum integer K such that she can eat all the bananas within H hours.

 

Example 1:

Input: piles = [3,6,7,11], H = 8
Output: 4

#优化一下 除以mid 有余加一的写法： target += (piles[i] + mid - 1 )/mid;
#time（NlgW）W：largestN
class Solution {
public:
    int minEatingSpeed(vector<int>& piles, int H) {
        //basically, we want to find the minum so the max is largest number of piles
        //min number will be min/ n/H
        
        int n = piles.size();
        int minN = max(1, *min_element(piles.begin(), piles.end())*(n/H));
        int maxN = *max_element(piles.begin(), piles.end());
        int target = 0;
        while(minN + 1 < maxN) {
            int mid = minN + (maxN - minN) / 2;
            target = 0;
            for(int i = 0; i< piles.size(); ++i) {
                target += (piles[i] + mid - 1 )/mid;
            }
            if(target > H) minN = mid;
            else maxN = mid;
        }
        target = 0;

        for(int i = 0; i< piles.size(); ++i) {
             target += (piles[i] + minN - 1 )/minN;
        }
        
        if(target > H) return maxN;        
        return minN;
        
    }
};
