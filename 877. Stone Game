Alex and Lee play a game with piles of stones.  There are an even number of piles arranged in a row, and each pile has a positive integer number of stones piles[i].

The objective of the game is to end with the most stones.  The total number of stones is odd, so there are no ties.

Alex and Lee take turns, with Alex starting first.  Each turn, a player takes the entire pile of stones from either the beginning or the end of the row.  This continues until there are no more piles left, at which point the person with the most stones wins.

Assuming Alex and Lee play optimally, return True if and only if Alex wins the game.
#一个array of 石子，两人交替选择首或者尾的石子，偶数堆，奇数总石子，没有平局，问A可不可以赢得比赛
class Solution {
public:
    bool stoneGame(vector<int>& piles) {
        //先手一定占优
        return true;
    }
};
#正经dp 优势自己的分数，削减对手的分数，dp[i,j] i--j 堆可以拿的最大分数
#f(i,j) = max(A(i) - f(i+1, j)  ,  A(j) - f(i,j-1))  // - is how much opponent can take
#BC： i> j : 0 i ==j: A [i]
#check f(0,n) > 0 (more than opponent)

class Solution {
public:
    bool stoneGame(vector<int>& piles) {
        int n = piles.size();
        //dp[i][j] : the largest score Alex can achieve when pile is i..j
        vector<vector<int>> dp(n, vector<int>(n, 0));
        for(int i = 0; i < n; ++i) {
            dp[i][i] = piles[i];    
        }
        for(int i = n - 2; i >= 0; --i) {
            for(int j = i + 1; j < n; ++j) { 
                dp[i][j] = max(piles[i] - dp[i + 1][j], piles[j] - dp[i][j - 1]);     
            }
        }
        return dp[0][n - 1] > 0;
    } 
};


#降维操作
class Solution {
public:
    bool stoneGame(vector<int>& piles) {
        int n = piles.size();
        //dp[i][j] : the largest score Alex can achieve when pile is i..j
        vector<vector<int>> dp(2, vector<int>(n, 0));
        for(int i = 0; i < n; ++i) {
            dp[i%2][i] = piles[i];    
        }
        for(int i = n - 2; i >= 0; --i) {
            for(int j = i + 1; j < n; ++j) { 
                dp[i%2][j] = max(piles[i] - dp[(i + 1)%2][j], piles[j] - dp[i%2][j - 1]);     
            }
        }
        return dp[0][n - 1] > 0;
    } 
};
