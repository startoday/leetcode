You are given a string s and an array of strings words of the same length. Return all starting indices of substring(s) in s that is a concatenation of each word in words exactly once, in any order, and without any intervening characters.

You can return the answer in any order.

 

Example 1:

Input: s = "barfoothefoobarman", words = ["foo","bar"]
Output: [0,9]
Explanation: Substrings starting at index 0 and 9 are "barfoo" and "foobar" respectively.
The output order does not matter, returning [9,0] is fine too.
Example 2:

Input: s = "wordgoodgoodgoodbestword", words = ["word","good","best","word"]
Output: []
Example 3:

Input: s = "barfoofoobarthefoobarman", words = ["bar","foo","the"]
Output: [6,9,12]
 

Constraints:

1 <= s.length <= 104
s consists of lower-case English letters.
1 <= words.length <= 5000
1 <= words[i].length <= 30
words[i] consists of lower-case English letters.

# word 里的每个字母都有一样的长度， 每个字母都要用到有且仅有一次 ， 不可以有字母overlap的利用 return start index

class Solution:
    def findSubstring(self, s: str, words: List[str]) -> List[int]:
        # this Q is silly that there can be duplicates in words
        # just a sliding window! 
        l = len(words[0])
        if len(s) < l * len(words):
            return []
        res = []
        i = 0
        end = l * len(words) + i
        while end<=len(s):  # pay attention to here! we are not reaching end!
            w = Counter(words)
            for j in range(i,end, l):
                if s[j: j + l] in w:
                    w[s[j: j + l]] -= 1
                    if w[s[j: j + l]] == 0:
                        del w[s[j: j + l]]
                else:
                    break
            if len(w) == 0:
                res.append(i)
            i += 1
            end = l * len(words) + i
        return res
