Given an undirected graph, return true if and only if it is bipartite.

Recall that a graph is bipartite if we can split it's set of nodes into two independent subsets A and B 
such that every edge in the graph has one node in A and another node in B.

The graph is given in the following form: graph[i] is a list of indexes j 
for which the edge between nodes i and j exists.  Each node is an integer between 0 and graph.length - 1. 
There are no self edges or parallel edges: graph[i] does not contain i, and it doesn't contain any element twice.

Example :
Input: [[1,2,3], [0,2], [0,1,3], [0,2]]
Output: false
Explanation: 
The graph looks like this:
0----1
| \  |
|  \ |
3----2
We cannot find a way to divide the set of nodes into two independent subsets.

#The graph is undirected: if any element j is in graph[i], then i will be in graph[j].

# with BFS

class Solution:
    def isBipartite(self, graph: List[List[int]]) -> bool:
        dic = {}
        q = deque()
        for n in range(len(graph)):
            if n not in dic:
                q.append((n, 0))
                while q:
                    x,y = q.popleft()
                    dic[x] = y
                    for g in graph[x]:
                        if g not in dic:
                            q.append((g, 1-y))
                        elif dic[g] != 1-y:
                            return False
        return True


#这个题给的表示方法是index（row #） 是node， （col 里面的所有都是该row的list of adj）
#dfs_all 吧，交替上色，有conflict return false 这种交替的就选择（-1）相乘吧！
class Solution {
public:
    bool isBipartite(vector<vector<int>>& graph) {
        vector<int> visited(graph.size(), 0);
        for (int i = 0; i < graph.size(); ++i) {
            if (visited[i] == 0 && !dfs(graph, 1, i, visited)) {
                return false;
            }
        }
        return true;
    }
    bool dfs(vector<vector<int>>& graph, int rightColor, int u, vector<int>& visited) {
        if(visited[u] != 0) return visited[u] == rightColor;
        visited[u] = rightColor;

        for (int v : graph[u]) {
                if(!dfs(graph, rightColor *(-1), v, visited)) {
                    return false;
                }
        }
        return true;
    }
};
