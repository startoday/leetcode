Consider a directed graph, with nodes labelled 0, 1, ..., n-1.  In this graph, each edge is either red or blue, and there could be self-edges or parallel edges.

Each [i, j] in red_edges denotes a red directed edge from node i to node j.  Similarly, each [i, j] in blue_edges denotes a blue directed edge from node i to node j.

Return an array answer of length n, where each answer[X] is the length of the shortest path from node 0 to node X such that the edge colors alternate along the path (or -1 if such a path doesn't exist).

 

Example 1:

Input: n = 3, red_edges = [[0,1],[1,2]], blue_edges = []
Output: [0,1,-1]
Example 2:

Input: n = 3, red_edges = [[0,1]], blue_edges = [[2,1]]
Output: [0,1,-1]

#理解题意无能的小同志，多读几遍题，其意自现， 是一个graph 给了source（node 0） 和不同颜色的edge，要求到达其他各个点 with 每次不同颜色的edge
#bfs 就行了
class Solution {
public:
    vector<int> shortestAlternatingPaths(int n, vector<vector<int>>& red_edges, vector<vector<int>>& blue_edges) {
      //本质还是shortest path--但是每层要求不一样，所以就bfs 
        // nodeG, {<n1, color>, <n2, color> ....} //for color 0 as red, 1 as blue
        unordered_map<int, vector<pair<int,int>>> nb;
        for(auto x : red_edges) nb[x[0]].push_back({x[1], 0});
        for(auto x : blue_edges) nb[x[0]].push_back({x[1], 1});
        queue<pair<int,int>> q; // q<node,color> 
        q.push({0,0});
        q.push({0,1}); //all can start at 0
        vector<vector<int>> res(n, vector<int>(2, -1));
        res[0] = {0,0};
        while(!q.empty()) {
            auto [i, c1] = q.front(); //每次可以这么写，就不用x.first, x.second 那种了
            q.pop();
            for(auto [j, c2] : nb[i]) {
                if(c1 != c2 && res[j][c2] == -1) {
                    res[j][c2] = 1 + res[i][c1];
                    q.push({j, c2});
                }
            }
        }

        vector<int> len(n);
      
        for(int i = 0; i < n; ++i) {
            int a = res[i][0];
            int b = res[i][1];
            int c = -1;
            if(a == -1 && b == -1) c= -1;
            else if(a == -1) c = b;
            else if(b == -1) c = a;
            else c = min(a,b);
            len[i] = c;
        } 
        
        /* another way
            vector<int> len;
            for(auto& v : res) {
            sort(v.begin(), v.end());
            len.push_back(v[0] != -1 ? v[0] : v[1]);
        }
        */
        return len;
    }
};
