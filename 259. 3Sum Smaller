Given an array of n integers nums and an integer target, find the number of index triplets i, j, k with 0 <= i < j < k < n that satisfy the condition nums[i] + nums[j] + nums[k] < target.

Follow up: Could you solve it in O(n2) runtime?

 

Example 1:

Input: nums = [-2,0,1,3], target = 2
Output: 2
Explanation: Because there are two triplets which sums are less than 2:
[-2,0,1]
[-2,0,3]
Example 2:

Input: nums = [], target = 0
Output: 0
Example 3:

Input: nums = [0], target = 0
Output: 0
 

Constraints:

n == nums.length
0 <= n <= 300
-100 <= nums[i] <= 100
-100 <= target <= 100

# didn't require has to be not unique!

my first stupid answer:
class Solution:
    def threeSumSmaller(self, nums: List[int], target: int) -> int:
        # I do a sort and count the stuff, same as three sum?
        # don't care about duplex...!!!!! and pay attention, there is no pre-check
        nums.sort()
        res = 0
        if len(nums) <3:
            return 0
        for i in range(len(nums)):
            # start to calculate
            for l in range(i + 1, len(nums)):
                h = len(nums) -1
                while l < h:
                    to = nums[i] + nums[l] + nums[h]
                    if to< target:
                        res += 1
                    h-= 1
                # can do a little improve: when h is fixed, h -l is the number of pairs can be added
                # so this part can be further improved to binary search => time is O(n^2 lgn)
                #   while l < h:
                #     to = nums[i] + nums[l] + nums[h]
                #     if to< target:
                #         res += h-l
                #         break
                #     else:
                #         h -= 1
        return res
        
 # do a simple modify on the sequence, will change my time complexity to O(n^2)
 # this is using two pointer, for h ,when  I have a new l, I don't need to move h to the rightmost first, 
 # but it can still stay there, because there is no chance for the righter side to be qualified.
 
 class Solution:
    def threeSumSmaller(self, nums: List[int], target: int) -> int:
        # I do a sort and count the stuff, same as three sum?
        # don't care about duplex...!!!!! and pay attention, there is no pre-check
        nums.sort()
        res = 0
        if len(nums) <3:
            return 0
        for i in range(len(nums)):
            # start to calculate
            h = len(nums) -1
            for l in range(i + 1, len(nums)):
                while l < h:
                    to = nums[i] + nums[l] + nums[h]
                    if to< target:
                        res += h-l
                        break
                    else:
                        h -= 1
        return res
