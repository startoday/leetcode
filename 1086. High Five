Given a list of scores of different students, return the average score of each student's top five scores in the order of each student's id.

Each entry items[i] has items[i][0] the student's id, and items[i][1] the student's score.  
The average score is calculated using integer division.
 

Example 1:

Input: [[1,91],[1,92],[2,93],[2,97],[1,60],[2,77],[1,65],[1,87],[1,100],[2,100],[2,76]]
Output: [[1,87],[2,88]]
Explanation: 
The average of the student with id = 1 is 87.
The average of the student with id = 2 is 88.6. But with integer division their average converts to 88.
 
Note:

1 <= items.length <= 1000
items[i].length == 2
The IDs of the students is between 1 to 1000
The score of the students is between 1 to 100
For each student, there are at least 5 scores

#note 说了每个学生都够五个成绩， 可以改成min heap size 5 来省空间
class Solution {
public:
    vector<vector<int>> highFive(vector<vector<int>>& items) {
        int n = items.size();
        vector<priority_queue<int>> score (n/5);
        for(int i = 0; i < items.size(); ++i) {
            score[items[i][0] - 1]. push(items[i][1]);
        }
        vector<vector<int>>res;
        for(int i = 0; i < score.size(); ++i) {
            if(score[i].size() == 0) continue;
            int ct = 5;
            int sum = 0;
            while(ct > 0) {
                sum += score[i].top();
                score[i].pop();
                ct --;
            }
            res.push_back({i + 1, sum/5});
            
        }
        return res;
    }
};

#看一下其他做法： partial sort！
vector<vector<int>> highFive(vector<vector<int>>& items) {
  vector<vector<int>> res, scores;
  for (auto& i : items) {
    scores.resize(max((int)scores.size(), i[0]));
    scores[i[0] - 1].push_back(i[1]);
  }
  for (auto& s : scores) {
    partial_sort(s.begin(), s.begin() + 5, s.end(), greater<int>());
    res.push_back({ (int)res.size() + 1, (s[0] + s[1] + s[2] + s[3] + s[4]) / 5 });
  }
  return res;
}
