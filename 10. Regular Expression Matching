#哎 又是一道理解有误题 ！！！ ab*ac*a  means a (b*) a (c*) a ！！！！！
Given an input string (s) and a pattern (p), implement regular expression matching with support for '.' and '*'.

'.' Matches any single character.
'*' Matches zero or more of the preceding element.
The matching should cover the entire input string (not partial).

Note:

s could be empty and contains only lowercase letters a-z.
p could be empty and contains only lowercase letters a-z, and characters like . or *.

Input:
s = "ab"
p = ".*"
Output: true
Explanation: ".*" means "zero or more (*) of any character (.)".

Input:
s = "aab"
p = "c*a*b"
Output: true
Explanation: c can be repeated 0 times, a can be repeated 1 time. Therefore it matches "aab".

Input:
s = "mississippi"
p = "mis*is*p*."
Output: false


class Solution {
public:
    bool isMatch(string s, string p) {
        int sizeS = s.size();
        int sizeP = p.size();
        
        vector<vector<bool>> dp(sizeP + 1, vector<bool> (sizeS +1));
        dp[0][0] = true;
        
        for(int i = 1; i <= sizeS; ++i) {
            dp[0][i] = false;
        }
        for(int i = 1; i <= sizeP; ++i) {
            if(p[i-1] == '*') dp[i][0] = dp[i-2][0] || dp[i-1][0];
            else dp[i][0] = false;
        }
        for(int i = 1; i <= sizeP; ++i) {
            for(int j = 1; j <= sizeS; ++j) {
                if(p[i-1] == '*') {
                //去掉一个错误选项，或者匹配上当前字符， 注意匹配了是 [j-1]哈
                    dp[i][j] = dp[i-2][j] ||  ((p[i-2] == s[j-1] || p[i-2] == '.') && dp[i][j-1]);
                }
                else if (p[i-1] == '.' || p[i-1] == s[j-1]) dp[i][j] = dp[i-1][j-1];
                else dp[i][j] = false;  
            }
        }
        return dp[sizeP][sizeS];
    }
};
