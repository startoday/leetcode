Given a directed acyclic graph (DAG) of n nodes labeled from 0 to n - 1, find all possible paths from node 0 to node n - 1, and return them in any order.

The graph is given as follows: graph[i] is a list of all nodes you can visit from node i (i.e., there is a directed edge from node i to node graph[i][j]).

 
Example 1:

Input: graph = [[1,2],[3],[3],[]]
Output: [[0,1,3],[0,2,3]]
Explanation: There are two paths: 0 -> 1 -> 3 and 0 -> 2 -> 3.

# better way can use list and pop instead of create new list



class Solution:
    def allPathsSourceTarget(self, graph: List[List[int]]) -> List[List[int]]:
        res = []
        vis = set()
        def dfs(cur, path):
            if cur == len(graph) -1:
                res.append(copy.deepcopy(path))
                return
            for g in graph[cur]:
                if g not in vis:
                    vis.add(g)
                    dfs(g, path +[g])
                    vis.remove(g)
                   
        dfs(0,[0])
        return res
