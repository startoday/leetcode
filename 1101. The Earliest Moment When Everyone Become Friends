In a social group, there are N people, with unique integer ids from 0 to N-1.

We have a list of logs, where each logs[i] = [timestamp, id_A, id_B] contains a non-negative integer timestamp, and the ids of two different people.

Each log represents the time in which two different people became friends.  Friendship is symmetric: if A is friends with B, then B is friends with A.

Let's say that person A is acquainted with person B if A is friends with B, or A is a friend of someone acquainted with B.

Return the earliest time for which every person became acquainted with every other person. Return -1 if there is no such earliest time.

 

Example 1:

Input: logs = [[20190101,0,1],[20190104,3,4],[20190107,2,3],[20190211,1,5],[20190224,2,4],[20190301,0,3],[20190312,1,2],[20190322,4,5]], N = 6
Output: 20190301
Explanation: 
The first event occurs at timestamp = 20190101 and after 0 and 1 become friends we have the following friendship groups [0,1], [2], [3], [4], [5].
The second event occurs at timestamp = 20190104 and after 3 and 4 become friends we have the following friendship groups [0,1], [2], [3,4], [5].
The third event occurs at timestamp = 20190107 and after 2 and 3 become friends we have the following friendship groups [0,1], [2,3,4], [5].
The fourth event occurs at timestamp = 20190211 and after 1 and 5 become friends we have the following friendship groups [0,1,5], [2,3,4].
The fifth event occurs at timestamp = 20190224 and as 2 and 4 are already friend anything happens.
The sixth event occurs at timestamp = 20190301 and after 0 and 3 become friends we have that all become friends.

#请继续好好读题系列，需要先排序by time stamp
#example 已经给了提示了用union & set做
#注意如何用lamda写sort， 注意光用ct就可以判断是否ok了

class Solution {
public:
    int earliestAcq(vector<vector<int>>& logs, int N) {
        //union and set THANKS to example
        vector<int> rank (N, 1);
        vector<int> pai;
        int ct = 0;
        for(int i = 0; i < N; ++i) {
            pai.push_back(i);
        }
        sort(logs.begin(), logs.end(), [] (const vector<int> &a, const vector<int> &b) {return a[0] < b[0];});
        for(auto k : logs) {
            int pu = find(min(k[1],k[2]), pai);
            int pv = find(max(k[1],k[2]), pai);
            if(pu != pv) {
                un(pu, pv, rank, pai);
                ct++;
            } 
            if(ct == N - 1) return k[0];
        }
        return -1;
    }
    void un(int u, int v, vector<int> & rank, vector<int> & pai) {
        if(rank[u] < rank[v]) {
            pai[u] = v;
        } else if(rank[u] > rank[v]) {
            pai[v] = u;
        } else{
            pai[v] = u;
            rank[u]++;
        }
    }
    int find(int u, vector<int> & pai ) {
        if(pai[u] == u) return u;
        pai[u] = find(pai[u], pai);
        return pai[u];
    }
};
