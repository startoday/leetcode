Given an array of meeting time intervals consisting of start and end times [[s1,e1],[s2,e2],...] (si < ei), find the minimum number of conference rooms required.

Example 1:

Input: [[0, 30],[5, 10],[15, 20]]
Output: 2


class Solution:
    def minMeetingRooms(self, intervals: List[List[int]]) -> int:
        if len(intervals)== 0:
            return 0
        need = [ i[0] for i in intervals]
        free = [ i[1] for i in intervals]
        need.sort()
        free.sort()
        i = 0
        j = 0
        res = 0
        ct = 0
        while i < len(intervals):
            if need[i] < free[j]:
                ct += 1
                res = max(res, ct)
                i += 1
            else:
                ct -= 1
                j += 1
        return res


# way one: use heap:first sort by start time, then heap by their end time, if the start time is smaller than end time. I have to put it into the heap. 
# Otherwise, pop it! which means we are able to finish the last one and start a new meeting without extra room! record the max size

class Solution:
    def minMeetingRooms(self, intervals: List[List[int]]) -> int:
        if len(intervals) == 0:
            return 0
        intervals.sort()
        res = 0
        h = []  # stores the end time of intervals
        for i in intervals:
            if h and i[0] >= h[0]: 
                heappop(h)
                heappush(h, i[1])
            else:
                # a new room is allocated
                heappush(h, i[1])
                res = max(res, len(h))
        return res
                 

#和my calendar 一样的想法
class Solution {
public:
    int minMeetingRooms(vector<vector<int>>& intervals) {
        int res = 0; int curCt = 0;
        for(int i = 0; i < intervals.size(); ++i) {
            ++cal[intervals[i][0]];
            --cal[intervals[i][1]];
            curCt = 0;
            for(auto x :cal) {
                 curCt += x.second;
                 res = max(res, curCt);
                if(intervals[i][1] < x.first) break;
            }           
        }
        return res;
    }
    map<int, int> cal;
};
不过时间复杂度是N2lgN的 ---把这个auto 拆出来最后比较也是一样的啊。。。 n*lgn了就

