#Given a collection of distinct integers, return all possible permutations.
#shout to HUISHEN
Example:

Input: [1,2,3]
Output:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]

#先来想一想next_permutation
1,3,4,2,5 --> 1,3,4,5,2 找到左侧第一个小的与右侧第一个大的 
9，1，3，5，4，2，0 -> 9140235 ==> 91,3,5420 =》91，4，5320 -> 914,0235
#所以找到从右向左数第一个降下去的数->就是转化点1
#这个点右侧 最靠近她的大于她的数是转化点2
#两个转化点swap （把次大位转到了正确的位置）接下来就是 从该位置起 下面的最小，所以reverse后面的数字们

class Solution {
public:
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> res;
        if(nums.empty()) return res;
        vector<int> temp = nums;
        res.push_back(nums);
        next_p(nums);
        while(nums != temp) {
            res.push_back(nums);
            next_p(nums);
        }
        return res;
    } 
    
    void next_p(vector<int>& nums){
        int siz = nums.size();
        int inP = siz - 2;
        for(inP; inP >= 0; --inP) {
            if(nums[inP] < nums[inP+1]) break;
        }
        if(inP != -1) {
            int anotherP = siz -1;
            for(anotherP; anotherP > inP; --anotherP) {
                if(nums[anotherP] > nums[inP]) break;
            }
            swap(nums[anotherP], nums[inP]);
        }
        reverse(nums.begin() + inP +1, nums.end());
    }
};
