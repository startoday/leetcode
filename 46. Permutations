#Given a collection of distinct integers, return all possible permutations.
#shout to HUISHEN
Example:

Input: [1,2,3]
Output:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]

#先来想一想next_permutation
1,3,4,2,5 --> 1,3,4,5,2 找到左侧第一个小的与右侧第一个大的 
9，1，3，5，4，2，0 -> 9140235 ==> 91,3,5420 =》91，4，5320 -> 914,0235
#所以找到从右向左数第一个降下去的数->就是转化点1
#这个点右侧 最靠近她的大于她的数是转化点2
#两个转化点swap （把次大位转到了正确的位置）接下来就是 从该位置起 下面的最小，所以reverse后面的数字们

class Solution {
public:
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> res;
        if(nums.empty()) return res;
        vector<int> temp = nums;
        res.push_back(nums);
        next_p(nums);
        while(nums != temp) {
            res.push_back(nums);
            next_p(nums);
        }
        return res;
    } 
    
    void next_p(vector<int>& nums){
        int siz = nums.size();
        int inP = siz - 2;
        for(inP; inP >= 0; --inP) {
            if(nums[inP] < nums[inP+1]) break;
        }
        if(inP != -1) {
            int anotherP = siz -1;
            for(anotherP; anotherP > inP; --anotherP) {
                if(nums[anotherP] > nums[inP]) break;
            }
            swap(nums[anotherP], nums[inP]);
        }
        reverse(nums.begin() + inP +1, nums.end());
    }
};


#DFS的常规写法吗， start 其实也是cur len了 swap之后只check 其之后的
class Solution {
public:
    vector<vector<int>> permute(vector<int>& num) {
        vector<vector<int>> res;
        permDFS(num, 0, res);
        return res;
    }
    void permDFS(vector<int>& num, int start, vector<vector<int>>& res) {
        int size = num.size();
        if(start == size) {
            res.push_back(num);
            return;
        }
        for(int i = start; i < size; ++i) {
            swap(num[start],num[i]);
            permDFS(num, start + 1, res);
            swap(num[start],num[i]);
        }
    }
};

#另一种好理解的做法：
class Solution {
public:
    vector<vector<int>> permute(vector<int>& num) {
        //要求是distinct 元素， 所以可以用一个hash set 当前vector已经有过的， size达标之后加入res
        vector<vector<int>> res;
        unordered_set<int> curHave;
        vector<int> temp;
        permDFS(num, res, curHave, temp);
        return res;
    }
    void permDFS(vector<int>& num, vector<vector<int>>& res, unordered_set<int> & curHave, vector<int> & temp) {
        if(temp.size() == num.size()) {
            res.push_back(temp);
            return;
        }
        for(int i = 0; i < num.size(); ++i) {
            if(!curHave.count(num[i])){
                curHave.insert(num[i]);
                temp.push_back(num[i]);
                permDFS(num, res, curHave, temp);
                curHave.erase(num[i]);
                temp.pop_back();             
            }
        }
    }
};

#iterative的做法：以 1，2，3 为例；1，加进来2的时候 可以生成1，2和 2，1 ， 再加进来3的时候 312，132，123 & 321，231，213
class Solution {
public:
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> res{{}}; //start size = 1
        for (int a : nums) { //所以循环所有数字之后长度也是对的
            for (int k = res.size(); k > 0; --k) {
                vector<int> t = res.front(); //像是que一样，对上一曾的每一个都抽出操作
                res.erase(res.begin());
                for (int i = 0; i <= t.size(); ++i) { //新来的数字在每个位置都要插入
                    vector<int> one = t;
                    one.insert(one.begin() + i, a);
                    res.push_back(one);
                }
            }
        }
        return res;
    }
};
