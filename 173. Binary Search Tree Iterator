Implement an iterator over a binary search tree (BST). Your iterator will be initialized with the root node of a BST.

Calling next() will return the next smallest number in the BST.

Note:

next() and hasNext() should run in average O(1) time and uses O(h) memory, where h is the height of the tree.
You may assume that next() call will always be valid, that is, there will be at least a next smallest number in the BST when next() is called.

# use a stack for easy inorder traversal

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class BSTIterator:

    def __init__(self, root: TreeNode):
        self.st = []
        self.inorderHelper(root)
    def inorderHelper(self, rt):
        if not rt:
            return 
        while rt:
            self.st.append(rt)
            rt = rt.left

    def next(self) -> int:
        """
        @return the next smallest number
        """
        tmp = self.st.pop()      
        self.inorderHelper(tmp.right)

        return tmp.val
        
        
    def hasNext(self) -> bool:
        """
        @return whether we have a next smallest number
        """
        return len(self.st) > 0


# stucked wrong implementation
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class BSTIterator:

    def __init__(self, root: TreeNode):
        self.par = {}
        self.par[root] = None
        self.cur = root
        while self.cur.left:
            self.par[self.cur.left] = self.cur
            self.cur = self.cur.left
        

    def next(self) -> int:
        """
        @return the next smallest number
        """
        tmp = self.cur.val
        if self.cur.right:
            self.par[self.cur.right] = self.cur
            self.cur = self.cur.right
            while self.cur.left:
                self.par[self.cur.left] = self.cur
                self.cur = self.cur.left
        else:
            self.cur = self.par[self.cur]
        return tmp
        
        
    def hasNext(self) -> bool:
        """
        @return whether we have a next smallest number
        """
        # I can't do this with O(h) space
        if self.par[self.cur] == None and not self.cur.right:
            return False
        return True
