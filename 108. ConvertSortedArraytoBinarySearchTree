#给一个排好序的数组，将其转化成一棵平衡BST

#BST是左根右的形态，所以中间的点应该是节点， root之下的左边节点是左半边的最中间，右侧同理，下同

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def sortedArrayToBST(self, nums: List[int]) -> TreeNode:
        def createNode(i,j): # [)
            if i >=j:
                return None
            m = i +(j-i)//2
            rt = TreeNode(nums[m])
            rt.left =  createNode(i,m)
            rt.right = createNode(m +1,j)
            return rt
        return createNode(0, len(nums))
        


class Solution {
public:
    TreeNode* sortedArrayToBST(vector<int>& nums) {
        return insertTree(nums,0,nums.size()); //非size-1
    }
    
    TreeNode* insertTree(const vector<int> & nums,int left,int right){
        if(left>=right) return NULL;  //>=
        int mid = (right -left)/2 + left;
        TreeNode * newNode = new TreeNode(nums[mid]);
        newNode->left= insertTree(nums, left,mid);
        newNode->right= insertTree(nums, mid+1,right); //每次取中点是偏左的 
        return newNode;
    } 
};
