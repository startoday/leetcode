Implement a MyCalendar class to store your events. 
A new event can be added if adding the event will not cause a double booking.

Your class will have the method, book(int start, int end). 
Formally, this represents a booking on the half open interval [start, end), the range of real numbers x such that start <= x < end.
A double booking happens when two events have some non-empty intersection (ie., there is some time that is common to both events.)

For each call to the method MyCalendar.book, return true if the event can be added to the calendar successfully without causing a double booking. Otherwise, return false and do not add the event to the calendar.

Your class will be called like this: MyCalendar cal = new MyCalendar(); MyCalendar.book(start, end)
Example 1:

MyCalendar();
MyCalendar.book(10, 20); // returns true
MyCalendar.book(15, 25); // returns false
MyCalendar.book(20, 30); // returns true



class Node:
    def __init__(self,start, end):
        self.left = None
        self.right = None
        self.start = start
        self.end = end
    def insert(self, node):
        if node.start >= self.end:
            if not self.right:
                self.right = node
                return True
            return self.right.insert(node)
        if node.end <= self.start:
            if not self.left:
                self.left = node
                return True
            return self.left.insert(node)
        return False
class MyCalendar:

    def __init__(self):
        self.root = None

    def book(self, start: int, end: int) -> bool:
        node = Node(start, end)
        if not self.root:
            self.root = node
            return True
        return self.root.insert(node)
        


# Your MyCalendar object will be instantiated and called as such:
# obj = MyCalendar()
# param_1 = obj.book(start,end)



Note:

The number of calls to MyCalendar.book per test case will be at most 1000.
In calls to MyCalendar.book(start, end), start and end are integers in the range [0, 10^9]
#注意里面说了是左闭右开的区间
#暴力解 -- max（s1,s2) < min (e1,e2)的时候有conflict
class MyCalendar {
public:
    MyCalendar() {
        
    }
    
    bool book(int start, int end) {
        for(auto x :booked) {
            if(max(start,x .first) < min (end,x.second)) return false;
        }
        booked.push_back({start,end});
        return true;
    }
    vector<pair<int,int>> booked;
};

#或者用一个tree来存<start, end>
【a    b】
    [c   d]
要小于d的第一个key的 second 比c大就GG了

class MyCalendar {
public:
    MyCalendar() {
        
    }
    
    bool book(int start, int end) {
        if(booked.size() != 0){
            auto x = booked.lower_bound(end);
            if(x != booked.begin() && (--x)->second > start) return false;
        }
        booked[start] = end;
        return true;
    }
    map<int, int> booked;
};
