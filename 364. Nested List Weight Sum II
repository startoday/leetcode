Given a nested list of integers, return the sum of all integers in the list weighted by their depth.

Each element is either an integer, or a list -- whose elements may also be integers or other lists.

Different from the previous question where weight is increasing from root to leaf, now the weight is defined from bottom up. i.e., the leaf level integers have weight 1, and the root level integers have the largest weight.

Example 1:

Input: [[1,1],2,[1,1]]
Output: 8 
Explanation: Four 1's at depth 1, one 2 at depth 2.
Example 2:

Input: [1,[4,[6]]]
Output: 17 
Explanation: One 1 at depth 3, one 4 at depth 2, and one 6 at depth 1; 1*3 + 4*2 + 6*1 = 17.

# way 1 kx1 + k-1 * x2 + k-2 *x3....xk = x1 + (x1 + x2) + (x1 + x2 + x3) + (x1 + x2 + x3+ x4 + x5) +....
# so we can bfs , using a cur total for each layer 's 

class Solution:
    def depthSumInverse(self, nestedList: List[NestedInteger]) -> int:
        q = deque()
        res = 0
        runningLayer = 0
        q.append(nestedList)
        while q:
            s = len(q)
            for _ in range(s):
                x = q.popleft()
                for r in x:
                    if r.isInteger():
                        runningLayer += r.getInteger()
                    else:
                        q.append(r.getList())
            res += runningLayer
        return res
   
  # another way to do it is dfs, think about the similar question when times the other site's height
  when they add together will be (k +1)(x1 +x2 + x2....xk) => minus last question's result will be the answer!
  
  class Solution:
    def depthSumInverse(self, nestedList: List[NestedInteger]) -> int:
        self.k = 0
        self.to = 0
        self.res = 0
        def helper(n, h):
            self.k = max(h , self.k)
            for x in n:
                if x.isInteger():
                    self.res += h* x.getInteger()
                    self.to += x.getInteger()
                else:
                    helper(x.getList(), h +1)
        helper(nestedList, 1)
        return (self.k +1) * self.to - self.res
