Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

 

Example 1:

Input: n = 3
Output: ["((()))","(()())","(())()","()(())","()()()"]
Example 2:

Input: n = 1
Output: ["()"]
 

Constraints:

1 <= n <= 8



class Solution:
    def generateParenthesis(self, n: int) -> List[str]:
        res = []
        def dfs(l, r, cur):
            if l < 0 or r <0:
                return 
            if l == 0 and r == 0:
                res.append(copy.deepcopy(cur))
                return 
            if r < l:
                return 
            dfs(l-1, r, cur + "(")
            dfs(l, r -1 , cur + ")")
        dfs(n,n, "")
        return res
