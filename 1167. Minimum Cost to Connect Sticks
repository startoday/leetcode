You have some sticks with positive integer lengths.

You can connect any two sticks of lengths X and Y into one stick by paying a cost of X + Y.  
You perform this action until there is one stick remaining.
Return the minimum cost of connecting all the given sticks into one stick in this way.

Example 1:

Input: sticks = [2,4,3]
Output: 14
Example 2:

Input: sticks = [1,8,3,5]
Output: 30
 
Constraints:
1 <= sticks.length <= 10^4
1 <= sticks[i] <= 10^4
#每次新连上的长度就成了新的长度，所以每次相连都选择最短长度的 用min heap 可以解决，最后剩一根
class Solution {
public:
    
    int connectSticks(vector<int>& sticks) {
        //先连一个之后长度就是新的长度了！！ 每次都选俩小的！
        priority_queue<int, vector<int>, greater<int>> q (sticks.begin(), sticks.end());
        long res = 0;
        while(q.size() > 1) {
            int a = q.top();
            q.pop();
            int b = q.top();
            q.pop();
            res += (a + b);
            q.push(a + b);
        }
        return res;
    }
};
