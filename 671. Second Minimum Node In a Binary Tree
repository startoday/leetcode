Given a non-empty special binary tree consisting of nodes with the non-negative value, where each node in this tree has exactly two or zero sub-node. If the node has two sub-nodes, then this node's value is the smaller value among its two sub-nodes. More formally, the property root.val = min(root.left.val, root.right.val) always holds.

Given such a binary tree, you need to output the second minimum value in the set made of all the nodes' value in the whole tree.

If no such second minimum value exists, output -1 instead.

Example 1:

Input: 
    2
   / \
  2   5
     / \
    5   7

Output: 5
Explanation: The smallest value is 2, the second smallest value is 5.
#又是一道题意稍稍难懂的题！给的树只能0 个或者两个孩子，如果有两个孩子的话root的值会是两个孩子中较小的一个。
#所以第一个跟root值不同并且有孩子的root->val就是凶手！
#需要注意的是给的都是 int，所以可能含有INT——MAX，不能单单return INTMAX，可以换个负值或者用long
class Solution {
public:
    int findSecondMinimumValue(TreeNode* root) {
        int res = helper(root, root->val);
        return res == -7? -1: res;
    }
    int helper(TreeNode* root, int val) {
        if(!root) return -7;
        if(root->val != val) return root->val;
        int l = helper(root -> left, val);
        int r = helper(root -> right,val);
        if(r < 0) return l;
        if(l < 0) return r;
        return min(l,r);
    }
};
