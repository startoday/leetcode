Given the root of a binary tree with N nodes, each node in the tree has node.val coins, and there are N coins total.

In one move, we may choose two adjacent nodes and move one coin from one node to another.  
(The move may be from parent to child, or from child to parent.)

Return the number of moves required to make every node have exactly one coin.

Notes:
1<= N <= 100
0 <= node.val <= N

#重点：每个node 每次只能传给亲戚，每次只能挪1个硬币。 是要把大于0的那些硬币分给0
#左已有 vs 左需要（node个数） + 右已有 vs 右需要（node个数）， 两侧已有 + node 的val 作为 新已有； 两侧需要 +1 作为新需要
class Solution {
public:
    
    int distributeCoins(TreeNode* root) {
        int res = 0;
        helper(root, res);
        return res;
    }
    //<has, need>
    pair<int,int> helper(TreeNode* root, int & res) {
        if(!root) return {0, 0};
        auto l = helper(root->left, res);
        auto r = helper(root->right, res);
        res += abs(l.first - l.second);
        res += abs(r.first - r.second);
        return {l.first + r.first + root->val, l.second + r.second + 1};
    }
};

#简化code
class Solution {
public:
    int distributeCoins(TreeNode* root) {
        int res = 0;
        helper(root, res);
        return res;
    }
    int helper(TreeNode* root, int & res) {
        if(!root) return 0;
        int l = helper(root->left, res);
        int r = helper(root->right, res);
        res += abs(l);
        res += abs(r);
        return  root->val+ l + r - 1;
    }
};

#python version 
#从子节点开始算，每个子节点必须只剩1个，非一个就需要传来or 传出去，其父亲是唯一接受着，则 父需传= 左右子传上来的 + 自己val -1； 
#可以return 需要传的值（可以是负数）； 用一个global value，记录 绝对值 为需要的次数

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def __init__(self):
        self.res = 0
    def distributeCoins(self, root: Optional[TreeNode]) -> int:
        #return this node's need chuan's #
        def helper(rt):
            if not rt:
                return 0
            l = helper(rt.left)
            r = helper(rt.right)
            self.res += abs(l)
            self.res +=abs(r)
            return l + r + rt.val -1
                
        helper(root)
        return self.res
