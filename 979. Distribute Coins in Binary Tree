Given the root of a binary tree with N nodes, each node in the tree has node.val coins, and there are N coins total.

In one move, we may choose two adjacent nodes and move one coin from one node to another.  
(The move may be from parent to child, or from child to parent.)

Return the number of moves required to make every node have exactly one coin.

Notes:
1<= N <= 100
0 <= node.val <= N

#重点：每个node 每次只能传给亲戚，每次只能挪1个硬币。 是要把大于0的那些硬币分给0
#左已有 vs 左需要（node个数） + 右已有 vs 右需要（node个数）， 两侧已有 + node 的val 作为 新已有； 两侧需要 +1 作为新需要
class Solution {
public:
    
    int distributeCoins(TreeNode* root) {
        int res = 0;
        helper(root, res);
        return res;
    }
    //<has, need>
    pair<int,int> helper(TreeNode* root, int & res) {
        if(!root) return {0, 0};
        auto l = helper(root->left, res);
        auto r = helper(root->right, res);
        res += abs(l.first - l.second);
        res += abs(r.first - r.second);
        return {l.first + r.first + root->val, l.second + r.second + 1};
    }
};

#简化code
class Solution {
public:
    int distributeCoins(TreeNode* root) {
        int res = 0;
        helper(root, res);
        return res;
    }
    int helper(TreeNode* root, int & res) {
        if(!root) return 0;
        int l = helper(root->left, res);
        int r = helper(root->right, res);
        res += abs(l);
        res += abs(r);
        return  root->val+ l + r - 1;
    }
};
