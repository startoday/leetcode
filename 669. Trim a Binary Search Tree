Given a binary search tree and the lowest and highest boundaries as L and R, trim the tree so that all its elements lies in [L, R] (R >= L). You might need to change the root of the tree, so the result should return the new root of the trimmed binary search tree.

Example 1:
Input: 
    1
   / \
  0   2

  L = 1
  R = 2

Output: 
    1
      \
       2
       
       
#Tree 的训练系列，要求剪枝成为所有树枝都在L 到 R之间的树
#每一个在L，R间的root都可以保留； 原root可能改变，所以用dummy root


class Solution {
public:
    TreeNode* trimBST(TreeNode* root, int L, int R) {
        TreeNode * dummyRoot = helper(root, L, R);
        return dummyRoot;
        
    }
    TreeNode * helper(TreeNode* root, int L, int R ) {
        if(!root) return NULL;
        if(root ->val < L) {
        return  helper(root -> right, L, R);
        } 
        if(root ->val > R) {
        return  helper(root -> left, L, R);
        } 
        if(root ->val >= L && root ->val <= R ) {
            root ->left = helper(root -> left, L, R);
            root ->right = helper(root -> right, L, R);
            return root;    
        }
        return NULL;
    }
};

#简化其实不需要helper的！
class Solution {
public:
    TreeNode* trimBST(TreeNode* root, int L, int R) {
        if(!root) return NULL;
        if(root ->val < L) {
        return  trimBST(root -> right, L, R);
        } 
        if(root ->val > R) {
        return  trimBST(root -> left, L, R);
        } 
        
        root ->left = trimBST(root -> left, L, R);
        root ->right = trimBST(root -> right, L, R);
        return root;  
    }
};


class Solution:
    def trimBST(self, root: Optional[TreeNode], low: int, high: int) -> Optional[TreeNode]:
        if not root:
            return None
        if root.val < low:
            #pay attention that it needs to recursively remove
            return self.trimBST(root.right, low ,high)
        if root.val > high:
            return self.trimBST(root.left, low, high)
        root.left = self.trimBST(root.left, low, high)
        root.right = self.trimBST(root.right, low ,high)
        return root
