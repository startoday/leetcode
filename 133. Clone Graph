Given a reference of a node in a connected undirected graph, return a deep copy (clone) of the graph. 
Each node in the graph contains a val (int) and a list (List[Node]) of its neighbors.

#note
The number of nodes will be between 1 and 100.
The undirected graph is a simple graph, which means no repeated edges and no self-loops in the graph.
Since the graph is undirected, if node p has node q as neighbor, then node q must have node p as neighbor too.
You must return the copy of the given node as a reference to the cloned graph.
#无重复边，没有自循环，
#无向图
#要求return的是copy of 原始点！

class Solution {
public:
    Node* cloneGraph(Node* node) {
        unordered_map<Node*, Node*> store;
        return helper(node, store);
    }
    Node* helper(Node* node, unordered_map<Node*, Node*>& store) {
        if (!node) return NULL;
        if (store.count(node)) return store[node];
        Node * clone = new Node(node->val);
        store[node] = clone;
        for (Node * nei : node->neighbors) {
            clone->neighbors.push_back(helper(nei, store));
        }
        return clone;
    }
};

#BFS, 用map记录对应点，存在的时候说明处理过，不需要新建点； 都加入到neighbor里 O(m+n) time && O(n) space
class Solution {
public:
    Node* cloneGraph(Node* node) {
    //对node BFS 并用hash——map 记录点 x - x'
        if(!node) return node;
        unordered_map<Node *, Node * > has;
        queue<Node * > q;
        q.push(node);
        Node * start = new Node(node->val);
        has.insert({node, start});
        
        while (!q.empty()) {
            Node * temp = q.front();
            q.pop(); 
            for(auto x : temp ->neighbors) {              
                if(has.count(x) == 0) {
                    Node * aNode = new Node(x->val);
                    q.push(x);
                    has.insert({x, aNode});
                    has[temp]->neighbors.push_back(aNode);
                } else {
                    has[temp]->neighbors.push_back(has[x]);
                }
            }
        }
        return has[node];
    }
};

#总是可以简化代码，不用insert （然而慢）
class Solution {
public:
    Node* cloneGraph(Node* node) {
    //对node BFS 并用hash——map 记录点 x - x'
        if(!node) return node;
        unordered_map<Node *, Node * > has;
        queue<Node * > q;
        q.push(node);
        has[node] = new Node(node->val);
        while (!q.empty()) {
            Node * temp = q.front();
            q.pop(); 
            for(auto x : temp ->neighbors) {              
                if(has.count(x) == 0) {
                    q.push(x);
                    has[x] = new Node(x->val);
                } 
                has[temp]->neighbors.push_back(has[x]);              
            }
        }
        
        return has[node];
    }
};
