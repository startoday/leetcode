#给一棵二叉树，找出从根到叶子的所有路径。 return的是某特定格式的string vector
eg：
Input:

   1
 /   \
2     3
 \
  5

Output: ["1->2->5", "1->3"] 



class Solution:
    def binaryTreePaths(self, root: Optional[TreeNode]) -> List[str]:
        res = []
        def helper(rt, cur):
            if not rt:
                return   
            cur += [str(rt.val)]
            if not rt.left and not rt.right:
                #can't just return otherwise the cur.pop()is missing
                res.append("->".join(cur))
            helper(rt.left, cur)
            helper(rt.right, cur)
            cur.pop()
        helper(root,[])
        return res




class Solution:
    def binaryTreePaths(self, root: Optional[TreeNode]) -> List[str]:
        self.res = []
        self.updatePath(root, '')
        return self.res
    def updatePath(self, root, cur_path):
        if not root.left and not root.right:
            #ends
            self.res.append(cur_path+ str(root.val))
        if root.left:
            #leave the next spot open   cur_node->
            self.updatePath(root.left, cur_path+str(root.val)+"->") 
        if root.right:
            #leave the next spot open   cur_node->
            self.updatePath(root.right, cur_path+str(root.val)+"->")
