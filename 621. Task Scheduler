Given a char array representing tasks CPU need to do. It contains capital letters A to Z where different letters represent different tasks. Tasks could be done without original order. Each task could be done in one interval. For each interval, CPU could finish one task or just be idle.

However, there is a non-negative cooling interval n that means between two same tasks, there must be at least n intervals that CPU are doing different tasks or just be idle.

You need to return the least number of intervals the CPU will take to finish all the given tasks.

 

Example:

Input: tasks = ["A","A","A","B","B","B"], n = 2
Output: 8
Explanation: A -> B -> idle -> A -> B -> idle -> A -> B.

#两个相同的字母间需要间隔N个空隙，字母不够，idle来凑，问最后最少需要多少个期间

#既然原来的思路不对，要有勇气换成其他的思路重新尝试！！
class Solution {
public:
    int leastInterval(vector<char>& tasks, int n) {
        vector<int> t (26,0);
        for(auto x: tasks) {
            t[x-'A'] ++;
        }
        int res = tasks.size();
        
        priority_queue<int> pq;
        for(auto x : t) {
            if(x != 0) pq.push(x);
        }
        vector<int> again;
        while(!pq.empty()) {
            if(pq.top() == 1) return res;
            int count = n + 1;
            while(count > 0) {
                if(pq.empty()) {
                    res += count;
                    break;
                } else {
                    int temp = pq.top();
                    pq.pop();
                    again.push_back(--temp); 
                    count--;
                }
            }
            for(auto x: again) {
                if( x > 0) pq.push(x);
            }
            again.clear();
        }
        return res;
    }
};
#注意time 还是O（n）
#space O（1）

#greedy: 先可这出现次数最大的填，(mq - 1) * (n + 1)，+ 剩余几个出现最大的字母（比如 ACE，出现的次数都最多，就加三）
class Solution {
public:
    int leastInterval(vector<char>& tasks, int n) {
        vector<int> t (26,0);
        int mq = 0;
        for(auto x: tasks) {
            t[x-'A'] ++;
            mq = max(t[x-'A'], mq);
        }
        int size = tasks.size();
        int ans = (mq - 1) * (n + 1);
        int count = 0;
        for(auto x : t){
            if(x == mq) count++;
        }
        ans += count;
        return max(size, ans);
    }
};
