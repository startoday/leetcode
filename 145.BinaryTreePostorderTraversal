###给一颗二叉树，返回后序遍历的各个节点，（无NULL）

#traverse recursive 做法
class Solution {
public:
    vector<int> postorderTraversal(TreeNode* root) {
        vector<int>res;
        postOrder(root, res);
        return res;
    }
    void postOrder(TreeNode* root , vector<int> &res){
        if(root==NULL) return;
        postOrder(root->left, res);
        postOrder(root->right, res);
        res.push_back(root->val);
    }
};

#divide and conquer recursive 做法
class Solution {
public:
    vector<int> postorderTraversal(TreeNode* root) {
        vector<int>res;
        if(root == NULL) return res;
        
        vector<int>left=postorderTraversal(root->left);
        vector<int>right=postorderTraversal(root->right);
        
        res.insert(res.end(),left.begin(),left.end());
        res.insert(res.end(),right.begin(),right.end());
        res.push_back(root->val);
        
        return res;
        
    }
};
