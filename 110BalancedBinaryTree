#给一颗二叉树，判断是否是平衡的（左右树高度差不大于1）

#想法 divide and conquer
#是平衡树的要求是 左儿子和右儿子都是+自己当前也是（自己当前左右儿子高度差不大于1）
#慢到令人发指的写法：

class Solution {
public:
    bool isBalanced(TreeNode* root) {
        
        if(!root) return true;
        if(root->left == NULL && root->right == NULL){
            return true;
        }
        bool left = isBalanced(root->left);
        bool right = isBalanced(root->right);
        
        return checkBalance(root)&&left==true && right == true; 
    }
    
    int height(TreeNode* root){
        if(!root) return 0;
        return max(height(root->left),height(root->right))+1;        
    }
    bool checkBalance(TreeNode* root){
        return abs(height(root->left)-height(root->right))<=1;
    }    
};

#优化写法。两侧check height不对的直接return 不计算深度 return -1 ，只有是平衡的树才计算深度, 最后check root是不是-1即可
class Solution {
public:
    bool isBalanced(TreeNode* root) {
        return checkHeight(root)!=-1;
    }
    
    //check if the tree is balanced, -1 not otherwise return height
    int checkHeight(TreeNode* root){
        if(!root) return 0;
        int left = checkHeight(root->left);
        if(left == -1) return -1;
        int right = checkHeight(root->right);
        if(right == -1) return -1;
        if(abs(left-right)>1) return -1;
        return max(left,right)+1;     
    }

};



class Solution:
    def isBalanced(self, root: Optional[TreeNode]) -> bool:
        return self.helper(root)[0]  
    def helper(self, root):
        if not root:
            return True, 0
        l  = self.helper(root.left)
        r = self.helper(root.right)
        if not l[0] or not r[0] or (abs(l[1]-r[1])>1):
            return False, -1
        
        return True, max(l[1], r[1])+1
    
