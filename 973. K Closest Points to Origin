We have a list of points on the plane.  Find the K closest points to the origin (0, 0).

(Here, the distance between two points on a plane is the Euclidean distance.)

You may return the answer in any order.  The answer is guaranteed to be unique (except for the order that it is in.)

 

Example 1:

Input: points = [[1,3],[-2,2]], K = 1
Output: [[-2,2]]
Explanation: 
The distance between (1, 3) and the origin is sqrt(10).
The distance between (-2, 2) and the origin is sqrt(8).
Since sqrt(8) < sqrt(10), (-2, 2) is closer to the origin.
We only want the closest K = 1 points from the origin, so the answer is just [[-2,2]].


#1 is sort / PQ
class Solution {
    public int[][] kClosest(int[][] points, int K) {
        int [][] res = new int [K][];
        PriorityQueue<int []> tmp = new PriorityQueue<>((a,b) -> a[0]-b[0]);
        
        for(int i = 0; i < points.length; ++i) {
            int dis = points[i][0] * points[i][0] + points[i][1] * points[i][1];
            int [] x = {dis, i};
            tmp.add(x);
        }
        for(int i = 0; i < K; ++i) {
            Integer index = tmp.poll()[1];
            res[i] = points[index];
        }
        return res;
    }
}

#2find top K with partition 
