#就是reverse 一个linked list 
#iteratively
class Solution:
    def reverseList(self, head: ListNode) -> ListNode:
        if not head or not head.next:
            return head
        pre = None
        cur = head
        x = cur.next
        while x:
            cur.next = pre
            pre = cur
            cur = x
            x= x.next
        cur.next = pre
        return cur

class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        //还是insert的题啊。。只要想着把遇到的点insert到前面就行了！
        if(!head) return head;
        ListNode * dummyHead = new ListNode (-1);
        dummyHead ->next = head;
        ListNode * pre = dummyHead;
        ListNode * cur = pre->next;
        while(cur->next) {
            ListNode * temp = cur->next;    
            cur->next = temp->next;          
            temp->next = pre->next;
            pre->next = temp;
        }
        return dummyHead->next;
    }
};
#另一种写法
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        if(!head || !head->next) return head;
        ListNode * pre = NULL;
        ListNode * cur = head;
        ListNode * temp;
        while(cur) {
            temp = cur->next;
            cur->next = pre;
            pre = cur;
            cur = temp;
        }
        return pre; //注意return的是pre，不是cur
    }
};

#recursive
#实在是太睿智了！！
class Solution {
public:
    //recursive的方法
    //定义这个函数会reverse传入的点 return转好的head
    //假设后面的点都reverse好了，只观察当前的点
    ListNode* reverseList(ListNode* head) {
        if(!head || !head->next) return head;
        ListNode * cur = reverseList(head->next); //头
        head->next->next = head; //尾巴
        head->next = NULL;
        return cur;
    }
};

