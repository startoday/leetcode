#寻找二叉树两个点的最小公共祖先
definition of LCA“The lowest common ancestor is defined between two nodes p and q as the lowest node in T 
that has both p and q as descendants (where we ALLOW a node to be a descendant of itself).”
#如果其中一个是另一个的子树的话，允许公共祖先是两个点其中的一个
题目条件：
点都不同 All of the nodes' values will be unique.
p和q都存在于该树中  p and q are different and both values will exist in the BST.

#想法，丢给左子树找，左边找到了return LCA， 右边return为空
      丢给右子树找，右边找到了return LCA，左边return为空
      两个点一左一右 return 该root
      exit 条件 root为空/ p 或者 q == root return root即可
      
class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if(!root || p == root || q == root) return root;
        TreeNode * leftNode = lowestCommonAncestor(root->left, p, q);
        TreeNode * rightNode = lowestCommonAncestor(root->right, p, q);
        if(leftNode && rightNode) return root;
        else if(!leftNode) return rightNode;
        else return leftNode;
    }
};

#对于二叉树，有左<根<右的条件，所以最小公共节点必定为左右中间的一个数，
#如果root大于 p q 间的最大值，那么答案应该在左子树中搜索
#如果root小于 p q 间的较小值，那么答案应该在右子树中搜索
#否则的话 递归会给你return 最小的公共祖先

class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if(!root || p == root || q == root) return root;
        if(root->val> max(p->val, q->val)){
            root = lowestCommonAncestor(root->left, p, q);
        }
        if(root->val < min(p->val, q->val)){
            root = lowestCommonAncestor(root->right, p, q);
        }

        return root;
    }
};
