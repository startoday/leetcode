#给两个linked list，找到其交点，没有交点的话return NULL
#note链子没有环
#要求O（N）的时间 O（1）的空间并且不能改变原本的链子结构

#O（1）空间就不可以用找到点们再比较intersection值的方法，不能暴力解（O（n方）找相同点）

#想法是list一个走完走另一个的开头也是环，快慢指针...//但是 注意，这两个环没有连起来，不能直接check fast 死掉，fast每次都得重新连接另一个list，
#想check的话应该是slow走完两个list后死掉
#em, 即使两个list 的点都相同，也不一定就是那个入口 ---所以不能比较点来着
比如：
[4,1,8,4,5]
[5,0,1,8,4,5]
2
3  第一个list前有2个，第二个前面有三个，这个intersection是8，不是1！

#其实有个简单的做法。。两个指针分别从两个list开始走，一个走完了就走另一个的开头，要么在intersection相遇（走的路是相等的），要么都在最后的结尾
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        if(!headA || !headB) return NULL;
        ListNode * travelA = headA;
        ListNode * travelB = headB;
        while(travelA != travelB) {
            travelA =travelA->next;
            travelB =travelB->next;
            if((!travelA) &&(!travelB)) break;
            else if(!travelA) travelA = headB;
            else if(!travelB) travelB = headA;
        }
        return travelA;
    }
};

#话说无论在哪里都可以return啊
#code简化版--但是其实会慢一点嗷

class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        if(!headA || !headB) return NULL;
        ListNode * travelA = headA;
        ListNode * travelB = headB;
        while(travelA != travelB) {
            travelA = travelA ? travelA->next: headB;
            travelB = travelB ? travelB->next: headA;
        }
        return travelA;
    }
};


#use set:
class Solution:
    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> ListNode:
        s = set()
        while headA :
            s.add(headA)
            headA = headA.next

        while headB:  #can't go at same time [1,9,1,2,4]
  #[3,2,4]
            if headB in s:
                return headB
            headB = headB.next    
        return None
        
        
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def getIntersectionNode(self, headA, headB):
        """
        :type head1, head1: ListNode
        :rtype: ListNode
        """
        if not headA or not headB:
            return None
        ta = headA
        tb = headB
        while ta != tb:
            ta = ta.next
            tb = tb.next
            if not ta and not tb:
                return None   # pay attention to the exit case!
            if not ta:
                ta = headB
            if not tb:
                tb = headA
        return ta        
