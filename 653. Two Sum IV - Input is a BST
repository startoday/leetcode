Given a Binary Search Tree and a target number, return true if there exist two elements in the BST such that their sum is equal to the given target.

Example 1:

Input: 
    5
   / \
  3   6
 / \   \
2   4   7

Target = 9

Output: True

#Tree 系列的two sum
#这道题我的想法就是inorder traversal 之后再 two pointer比较low哈
class Solution {
public:
    bool findTarget(TreeNode* root, int k) {
        if(!root) return false;
        vector<int> t;
        helper(root, t);
        int l = 0, r = t.size() - 1;
        while(l < r) {
            if(t[l] + t[r] == k) return true;
            else if(t[l] + t[r] < k) l++;
            else r--;
        }
        return false;
    }
    void helper(TreeNode* root, vector<int> & t) {
        if(!root) return;
        helper(root->left, t);
        t.push_back(root->val);
        helper(root->right, t);
    }
};

#另一种做法：可以用hashset 存路过的数，如果 k- cur 有了那么就可以return true了哈

class Solution {
public:
    bool findTarget(TreeNode* root, int k) {
        unordered_set<int> x;
        return helper(root, k, x);   
    }
    bool helper(TreeNode* root, int &k, unordered_set<int> & x) {
        if(!root) return false;
        if(x.count(k - root->val)) return true;
        x.insert(root->val);
        return helper(root->left, k, x) || helper(root->right, k, x); //return 或即可！！
    }
};
