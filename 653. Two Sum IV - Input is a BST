Given a Binary Search Tree and a target number, return true if there exist two elements in the BST such that their sum is equal to the given target.

Example 1:

Input: 
    5
   / \
  3   6
 / \   \
2   4   7

Target = 9

Output: True

# search from root and write recursive stuff, give me a wrong answer! pay attention to the tricky idea.

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

# a starightforward and stupid think 
class Solution:
    def findTarget(self, root: TreeNode, k: int) -> bool:
        # time and space : O(n)
        def helper(r, l):
            if not r:
                return
            helper(r.left, l)
            l.append(r.val)
            helper(r.right, l)
        res =[]
        helper(root, res)
        l = 0
        h = len(res) -1
        while l <h:
            if res[l] + res[h] == k:
                return True
            elif res[l] + res[h] < k:
                l += 1
            else:
                h -=1
        return False
        
        
# way 2:
# use a hash set to store and compare the root val with what in hash set! time and space are also O(n)
class Solution:
    def findTarget(self, root: TreeNode, k: int) -> bool:
        s = set()
        def helper(r, k):
            if not r:
                return False
            if k -r.val in s:
                return True
            s.add(r.val)
            return helper(r.left,k) or helper(r.right, k)
        return helper(root, k)
        


#Tree 系列的two sum
#这道题我的想法就是inorder traversal 之后再 two pointer比较low哈
class Solution {
public:
    bool findTarget(TreeNode* root, int k) {
        if(!root) return false;
        vector<int> t;
        helper(root, t);
        int l = 0, r = t.size() - 1;
        while(l < r) {
            if(t[l] + t[r] == k) return true;
            else if(t[l] + t[r] < k) l++;
            else r--;
        }
        return false;
    }
    void helper(TreeNode* root, vector<int> & t) {
        if(!root) return;
        helper(root->left, t);
        t.push_back(root->val);
        helper(root->right, t);
    }
};

#另一种做法：可以用hashset 存路过的数，如果 k- cur 有了那么就可以return true了哈

class Solution {
public:
    bool findTarget(TreeNode* root, int k) {
        unordered_set<int> x;
        return helper(root, k, x);   
    }
    bool helper(TreeNode* root, int &k, unordered_set<int> & x) {
        if(!root) return false;
        if(x.count(k - root->val)) return true;
        x.insert(root->val);
        return helper(root->left, k, x) || helper(root->right, k, x); //return 或即可！！
    }
};
