Given a matrix of M x N elements (M rows, N columns), return all elements of the matrix in diagonal order as shown in the below image.

 

Example:

Input:
[
 [ 1, 2, 3 ],
 [ 4, 5, 6 ],
 [ 7, 8, 9 ]
]

Output:  [1,2,4,7,5,3,6,8,9]


class Solution:
    def findDiagonalOrder(self, matrix: List[List[int]]) -> List[int]:
        # when sum is odd, go down ( check i), when sum is even, go up ( check j)
        res = []
        m = len(matrix)
        if m == 0:
            return []
        n = len(matrix[0])
        if n == 0:
            return []
        for s in range(m + n - 1):
            if s %2 == 0:
                for j in range(max(0, s - m + 1), min(s + 1, n)):   # pay attention to the end, since is [), need to use s + 1 
                    res.append(matrix[s-j][j])
            else:
                for i in range(max(0, s - n + 1) , min(s + 1, m)):
                    res.append(matrix[i][s-i])
        return res
