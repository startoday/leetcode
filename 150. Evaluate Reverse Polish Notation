Evaluate the value of an arithmetic expression in Reverse Polish Notation.

Valid operators are +, -, *, /. Each operand may be an integer or another expression.

Note:

Division between two integers should truncate toward zero.
The given RPN expression is always valid. That means the expression would always evaluate to a result and there won't be any divide by zero operation.
Example 1:

Input: ["2", "1", "+", "3", "*"]
Output: 9
Explanation: ((2 + 1) * 3) = 9
Example 2:

Input: ["4", "13", "5", "/", "+"]
Output: 6
Explanation: (4 + (13 / 5)) = 6

#用stack记录结果，遇到operator开始处理即可
class Solution {
public:
    int evalRPN(vector<string>& tokens) {
        vector<int> res;
        for(string x : tokens) {
            if(x != "+" && x != "-" && x != "*" && x != "/") res.push_back(stoi(x));
            else {
                int n2 = res.back(); 
                res.pop_back();
                int n1 =res.back(); 
                res.pop_back();  //别把n1 n2 搞反了，在底下的才是分子/被减数
                if(x == "+") res.push_back(n1 + n2);
                else if (x == "-") res.push_back(n1 - n2);
                else if (x == "*") res.push_back(n1 * n2);
                else res.push_back(n1 / n2); 
            }
        }
        return res[0];
    }
};

#用stack 意思一样 比vector要快？ 
class Solution {
public:
    int evalRPN(vector<string>& tokens) {
        stack<int> res;
        for(auto x : tokens) {
            if(isdigit(x.back())) res.push(stoi(x)); //注意需要是x.back 不然可能是负数
            else {
                int n2 = res.top(); 
                res.pop();
                int n1 =res.top(); 
                res.pop();  //别把n1 n2 搞反了，在底下的才是分子/被减数
                if(x == "+") res.push(n1 + n2);
                else if (x == "-") res.push(n1 - n2);
                else if (x == "*") res.push(n1 * n2);
                else res.push(n1 / n2); 
            }
        }
        return res.top();
    }
};
