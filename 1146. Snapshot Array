Implement a SnapshotArray that supports the following interface:

SnapshotArray(int length) initializes an array-like data structure with the given length.  Initially, each element equals 0.
void set(index, val) sets the element at the given index to be equal to val.
int snap() takes a snapshot of the array and returns the snap_id: the total number of times we called snap() minus 1.
int get(index, snap_id) returns the value at the given index, at the time we took the snapshot with the given snap_id
 

Example 1:

Input: ["SnapshotArray","set","snap","set","get"]
[[3],[0,5],[],[0,6],[0,0]]
Output: [null,null,0,null,5]
Explanation: 
SnapshotArray snapshotArr = new SnapshotArray(3); // set the length to be 3
snapshotArr.set(0,5);  // Set array[0] = 5
snapshotArr.snap();  // Take a snapshot, return snap_id = 0
snapshotArr.set(0,6);
snapshotArr.get(0,0);  // Get the value of array[0] with snap_id = 0, return 5


#暴力解空间无法过
#只记录每次改变了哪个值
#根据snap id 查找 用upperbound找最近解
class SnapshotArray {
public:
    //<index, <snap id, val> 
    unordered_map<int, map<int, int>> a;
    int cur_snap = 0;
    SnapshotArray(int length) {
        for(int i = 0;i < length; ++i){
            a[i]= map<int,int>() = map<int,int>{{0, 0}};
        }
    }
    void set(int index, int val) {
        a[index][cur_snap] = val;
    }
    
    int snap() {
        return cur_snap++;
    }
    
    int get(int index, int snap_id) {
         auto it = a[index].upper_bound(snap_id);
         return it == begin(a[index]) ? 0 : prev(it)->second;
    }
};


#用vector 反正都用upperbound。。。而且给了index 用hash map的意义也不大
class SnapshotArray {
public:
    int s = 0;
    vector<map<int, int>> v;

    SnapshotArray(int length) {
        v.resize(length);  //可以直接这样搞
    }

    void set(int index, int val) {
        v[index][s] = val;
    }
    
    int snap() {
        return s++;
    }
    
    int get(int index, int snap_id) {
        auto itr = v[index].upper_bound(snap_id);
        return (itr != v[index].begin()) ? (--itr)->second : 0;
    }
};
