#注意相等的时候不算increase序列 [2,2,7] return 2
Given an unsorted array of integers, find the length of longest increasing subsequence.

Example:

Input: [10,9,2,5,3,7,101,18]
Output: 4 
Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4. 
Note:

There may be more than one LIS combination, it is only necessary for you to return the length.
Your algorithm should run in O(n2) complexity.


class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        //longest with that element
        int size = nums.size();
        if(size == 0) return 0;
        vector<int> res(size, 1);
        for(int i = 1; i < size; ++i) {
            for(int j = 0; j < i; ++j) {
                if(nums[i] > nums[j]) {
                res[i] = max (res[i], res[j]+1);
                }
            }
        }
        return *max_element(res.begin(), res.end()); //em.....找max而不是back！
    }
};


#follow up，能否以 O（nlgn）找到

#ref: https://www.cnblogs.com/grandyang/p/4938187.html
#肯定二分查找啦， dp array 存的是较为优秀的递增比较，注意它里面存的数并不一定是个单调递增序列
#每来一个数，二分查找其在dp array中的位置，如果dp array 容不下他了那么这个是可以递增的，将这个数push进去
#否则替换一下dparray中的数字
class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        vector<int> dp;
        int size = nums.size();
        for (int i = 0; i < size; ++i) {
            int end = dp.size();
            int left = 0, right = end;
            while (left < right) {
                int mid = left + (right - left) / 2; //偏左
                if (dp[mid] < nums[i]) left = mid+1;
                else right = mid;
            }
            if (right >= end) dp.push_back(nums[i]);
            else dp[right] = nums[i];
        }
        return dp.size();
    }
};
