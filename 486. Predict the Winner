Given an array of scores that are non-negative integers. Player 1 picks one of the numbers from either end of the array followed by the player 2 and then player 1 and so on. Each time a player picks a number, that number will not be available for the next player. This continues until all the scores have been chosen. The player with the maximum score wins.

Given an array of scores, predict whether player 1 is the winner. You can assume each player plays to maximize his score.

Example 1:
Input: [1, 5, 2]
Output: False
Explanation: Initially, player 1 can choose between 1 and 2. 
If he chooses 2 (or 1), then player 2 can choose from 1 (or 2) and 5. If player 2 chooses 5, then player 1 will be left with 1 (or 2). 
So, final score of player 1 is 1 + 2 = 3, and player 2 is 5. 
Hence, player 1 will never be the winner and you need to return False.

Notes:
1 <= length of the array <= 20.
Any scores in the given array are non-negative integers and will not exceed 10,000,000.
If the scores of both players are equal, then player 1 is still the winner.

#这个题和stone game 类似，但是堆数不一定，所以先手可能会输，一样的题，注意备注是平局的话也算先手赢，所以最后check是不是大于等于
#还是i，j 代表 i- j 堆可拿的最大分数 pick i 后看A【i】 - dp【i+1】【j】
class Solution {
public:
    bool PredictTheWinner(vector<int>& nums) {
        int n = nums.size();
        vector<vector<int>> dp(n, vector<int>(n));
        
        for(int i = 0; i < n; ++i) {
            dp[i][i] = nums[i];    
        }
        for(int i = n - 2; i >= 0; --i) {
            for(int j = i + 1; j < n; ++j) { 
                dp[i][j] = max(nums[i] - dp[i + 1][j], nums[j] - dp[i][j - 1]);     
            }
        }
        return dp[0][n-1] >= 0;
    }
};
