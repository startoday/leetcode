class Solution {
public:
    int shipWithinDays(vector<int>& weights, int D) {
        //has to be shipped with the order given
        //split weights in D days and find the min max
        //asking the min num, we can use binary search
        // the min is max weights, max summation of weights
        // if days > d, we need to increase the weights, otherwise decrease the weights
        
        int l = *max_element(weights.begin(), weights.end());
        int r = accumulate(weights.begin(), weights.end(), 0);
        
        while(l < r) {
            int mid = l + (r - l) / 2;
            if(count(weights, mid) > D) l = mid + 1;
            else r = mid;
        }
        return l;
    }
    
    int count(vector<int>& weights, int cap) {
        int res = 1;
        int temp = 0;
        for(int i = 0; i < weights.size(); ++i) {
            temp += weights[i];
            if(temp > cap) {
                res ++;
                temp = weights[i];
            }
        }
        return res;
    }
};
