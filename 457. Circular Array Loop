You are playing a game involving a circular array of non-zero integers nums. Each nums[i] denotes the number of indices forward/backward you must move if you are located at index i:

If nums[i] is positive, move nums[i] steps forward, and
If nums[i] is negative, move nums[i] steps backward.
Since the array is circular, you may assume that moving forward from the last element puts you on the first element, and moving backwards from the first element puts you on the last element.

A cycle in the array consists of a sequence of indices seq of length k where:

### Following the movement rules above results in the repeating index sequence seq[0] -> seq[1] -> ... -> seq[k - 1] -> seq[0] -> ...
Every nums[seq[j]] is either all positive or all negative.
k > 1
Return true if there is a cycle in nums, or false otherwise.

#注意要求： 环上的数字必须同符号； 长度必须大于1 ；
### 遇到第一个环的时候可以退出，如果后面有正确答案的话 :[1,-1,2,-1,1,3] #True   [1,-1] #False  [1,1,-2] #False  [1,1,2] #True

class Solution(object):
    def circularArrayLoop(self, nums):
        """
        :type nums: List[int]
        :rtype: bool
        """
        '''
        check if there is a cycle
        check if the cycle is valid
        '''
        n = len(nums)
        for i in range(n):
            steps = 0
            j = i
            forward = nums[j] > 0
            while True:
                #when the direction is different can break
                if forward != (nums[j] > 0):  
                    break
                    
                #mode is slow, check direction first is faster    
                nextJ = (j + nums[j]) % n
                
                if j == nextJ:  #easy check if this is a single step
                    break
                j = nextJ
                
                steps += 1
                if steps > n:  # we always break once there is a cycle not qualified, so if there is a qualified cycle, step can be more than n
                    return True
        return False
