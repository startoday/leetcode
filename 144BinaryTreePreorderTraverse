#给一颗二叉树，返回前序遍历的各个节点，（无NULL）

#1. traverser recursion 做法
#traverse 一般需要一个全局变量来记录内容；一般不用return，传参数传当前节点
#helper function 记得传参数的时候需要 &！！！ 不然会return 空的 res（pass by copy）

class Solution {
    
public:
    
    vector<int> preorderTraversal(TreeNode* root) {
        vector<int>res;   
        
        preOrder(root, res);
              
        return res;
    }
    
    //defination, given a root, add the root, left and right into res
    void preOrder(TreeNode* root, vector<int> & res){
        //exit of the function
        if(root == NULL ) return ;
        
        //split
        res.push_back(root->val);
        /* 不需要加这块判断，直接run该function 即可
        //exit of the function
        if(root->left == NULL && root->right ==NULL ) return ;

        if(root->left!= NULL) preOrder(root->left, res);
        if(root->right!= NULL) preOrder(root->right, res);
        */
        
        preOrder(root->left, res);
        preOrder(root->right, res);
        
    }
};
# time
# space

#2. Divide and Conquer recursive ，一般不需要全局变量，需要return 值
# divide：左， 右 conquer：根，左，右 合在一起

class Solution {
    
public:
    
    vector<int> preorderTraversal(TreeNode* root) {
        vector<int>res;   
        if (root== NULL) return res;
        
        vector<int> left = preorderTraversal(root->left);
        vector<int> right = preorderTraversal(root->right);
        
        res.push_back(root->val); //加的是val！！！！！不要每次都打成root！
        res.insert(res.end(), left.begin(), left.end());
        res.insert(res.end(), right.begin(), right.end());
              
        return res;
    }
};

# time
# space

#3.Non-recursive 做法： 需要用stack 来存取
#循环检测stack是否为空，不空时去取top加载，踢出，如果存在的话，先加入右儿子（先左后右out），再加入左儿子

class Solution {  
public:
    vector<int> preorderTraversal(TreeNode* root) {
        vector<int>res;   
        if (root== NULL) return res;
        stack<TreeNode*> nodeStack;
        nodeStack.push(root);
        while(!nodeStack.empty()){
            TreeNode * temp = nodeStack.top(); //搞一个node每次暂存信息
            nodeStack.pop();
            res.push_back(temp->val);
            if(temp->right!=NULL) nodeStack.push(temp->right);
            if(temp->left!=NULL) nodeStack.push(temp->left);
        }
        return res;
    }
};

# time
# space

#4.iterative 另一种做法
先用一个点P('cur' in my code) 存node，P加入stack，P加入result。P指向左节点，存在的时候重复向stack里加入p节点的信息，一旦没有左节点取stack的top 作为P指向右节点，
并且pop掉stack top 相当于一路向左走到底再往上一级找右儿子，一直向上指root，root完成了看右侧树，每个subtree都是先左（但会先print/add根）

class Solution {  
public:
    vector<int> preorderTraversal(TreeNode* root) {
        vector<int>res;   
        if (root== NULL) return res;
        stack<TreeNode*> nodeStack;
        TreeNode *cur = root;
        while(cur||!nodeStack.empty()){
            if(cur){
                nodeStack.push(cur);
                res.push_back(cur->val);
                cur=cur->left;
            } else {
                cur = nodeStack.top();
                nodeStack.pop();
                cur=cur->right;
            }
        }

        return res;
    }
};

class Solution:
    def preorderTraversal(self, root: TreeNode) -> List[int]:
        if not root:
            return []
        st = [root]
        res = []
        while st:
            x = st.pop()
            res.append(x.val)
            if x.right:
                st.append(x.right)
            if x.left:
                st.append(x.left)
        return res

