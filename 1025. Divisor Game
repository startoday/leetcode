Alice and Bob take turns playing a game, with Alice starting first.

Initially, there is a number N on the chalkboard.  On each player's turn, that player makes a move consisting of:

Choosing any x with 0 < x < N and N % x == 0.
Replacing the number N on the chalkboard with N - x.
Also, if a player cannot make a move, they lose the game.

Return True if and only if Alice wins the game, assuming both players play optimally.

Example 1:

Input: 2
Output: true
Explanation: Alice chooses 1, and Bob has no more moves.
Example 2:

Input: 3
Output: false
Explanation: Alice chooses 1, Bob chooses 1, and Alice has no more moves.
 
Note:
1 <= N <= 1000
#recursive
class Solution {
public:
    unordered_map<int, bool> m;
    bool divisorGame(int N) {
        if(N == 1) return false;
        for(int i  = 1; i < N; ++i) {
            if(N % i == 0) {
                if(m.count(N - i) && !m[N - i]) return true;
                else if(m.count(N - i)) continue;
                else {
                    m[N - i] = divisorGame(N - i);
                    if (!m[N - i]) return true;
                }
            }
        }
        return false;
    }
};

#实则。。。
N = 1, lose directly
N = 2, will win choosing x = 1.
N = 3, must lose choosing x = 1.
N = 4, will win choosing x = 1.
 ----
 return N % 2 == 0;
