A peak element is an element that is greater than its neighbors.

Given an input array nums, where nums[i] ≠ nums[i+1], find a peak element and return its index.

The array may contain multiple peaks, in that case return the index to any one of the peaks is fine.

You may imagine that nums[-1] = nums[n] = -∞.

Example 1:

Input: nums = [1,2,3,1]
Output: 2
Explanation: 3 is a peak element and your function should return the index number 2.
Example 2:

Input: nums = [1,2,1,3,5,6,4]
Output: 1 or 5 
Explanation: Your function can return either index number 1 where the peak element is 2, 
             or index number 5 where the peak element is 6.
             

# 不要求global result ，return 任意local result即可


#寻找一个数组的峰 
#要求 lgN 的时间复杂度
#所以用二分法

#想法是分mid的几种情况 峰； 谷； 上坡；下坡
class Solution:
    def findPeakElement(self, nums: List[int]) -> int:
        if len(nums) == 0:
            return -1
        l = 0
        r = len(nums) - 1
        while l + 1 < r:
            m = l + (r-l) // 2
            if nums[m] > nums[m-1] and nums[m] >nums[m +1]:
                return m # the peak
            elif nums[m] < nums[m-1] and nums[m] > nums[m +1]:
                r = m
            else: #valley and rising
                l = m
                
        if nums[l] >= nums[r]:
            return l
        return r
                
#time O(lgN)
#space O(1)
