Given a string text, we are allowed to swap two of the characters in the string. Find the length of the longest substring with repeated characters.

 

Example 1:

Input: text = "ababa"
Output: 3
Explanation: We can swap the first 'b' with the last 'a', or the last 'b' with the first 'a'. Then, the longest repeated character substring is "aaa", which its length is 3.
Example 2:

Input: text = "aaabaaa"
Output: 6
Explanation: Swap 'b' with the last 'a' (or the first 'a'), and we get longest repeated character substring "aaaaaa", which its length is 6.
Example 3:

Input: text = "aaabbaaa"
Output: 4
Example 4:

Input: text = "aaaaa"
Output: 5
Explanation: No need to swap, longest repeated character substring is "aaaaa", length is 5.
Example 5:

Input: text = "abcdef"
Output: 1
 

Constraints:

1 <= text.length <= 20000
text consist of lowercase English characters only.
#给一个string 只能swap 1次， 问可以形成的最长相同字母串有多长
#不要被，吓倒，不用使劲想swap的事，就想只swap一次的话什么情况下可以连接就好了。。。只有中间只隔一个字母的那种可以连上
#算连上也不需要swap，总数+1 和最高值比较就ok了
#--还是要窥破天机尽量想简单点的方法啊
#方法名叫groupby
#注意initial的时候要跟 group 最大+1 以及 total count比较

class Solution {
public:
    int maxRepOpt1(string text) {
        int n = text.size();
        if ( n == 1) return 1;
        vector<int> total (26);
        for(char ch : text) {
            total[ch-'a'] ++;
        }
        vector< pair<char,int>> gb;
        pair<char, int > large ={'a', 0}; 
        for(int i = 0; i<text.size() -1; ) {
            char x = text[i];
            int count = 1;
            while (i + 1 < text.size() && text[i] == text[i + 1]) {
                i++;
                count++;
            }
            if(count > large.second) large = {x, count};
            gb.push_back(make_pair(x, count));
            i++;
        }
        int res = min(large.second + 1, total[large.first-'a']);
        
        for(int i = 1; i < gb.size() - 1; ++i) {  
            if(gb[i - 1].first == gb[i + 1].first && gb[i].second == 1) {
                res = max (res, min(total[gb[i - 1].first-'a'], gb[i - 1].second + gb[i + 1].second + 1));
            } 
        }      
        return res;
    }
};
