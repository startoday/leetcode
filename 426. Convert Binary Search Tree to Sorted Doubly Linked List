Convert a Binary Search Tree to a sorted Circular Doubly-Linked List in place.

You can think of the left and right pointers as synonymous to the predecessor and successor pointers in a doubly-linked list. 
For a circular doubly linked list, the predecessor of the first element is the last element, and the successor of the last element is the first element.

We want to do the transformation in place. After the transformation, the left pointer of the tree node should point to its predecessor, 
and the right pointer should point to its successor. You should return the pointer to the smallest element of the linked list.

"""
# Definition for a Node.
class Node:
    def __init__(self, val, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right
"""
class Solution:
    def treeToDoublyList(self, root: 'Node') -> 'Node':
        if not root:
            return None
        self.head = None
        self.last = None
        def helper(rt):
            if not rt:
                return
            helper(rt.left)
            if self.last == None:
                self.head = rt
            if self.last:
                self.last.right = rt
                rt.left = self.last
            self.last = rt
            helper(rt.right)
        helper(root)
        self.head.left = self.last
        self.last.right = self.head
        return self.head


# another...same!
class Solution:
    def treeToDoublyList(self, root: 'Node') -> 'Node':
        #like the setting next level idea
        if not root:
            return root
        self.first, self.last = None, None
        self.helper(root)
        self.first.left = self.last
        self.last.right = self.first
        return self.first
    def helper(self, rt):
        if rt:
            self.helper(rt.left)
            if self.last:
                self.last.right = rt
                rt.left = self.last
            else:
                # the first set up!
                self.first = rt
            self.last = rt
            self.helper(rt.right)
        
