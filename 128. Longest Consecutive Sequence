Given an unsorted array of integers, find the length of the longest consecutive elements sequence.

#Your algorithm should run in O(n) complexity.

Example:

Input: [100, 4, 200, 1, 3, 2]
Output: 4
Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.

# O(nlgn) by sort! space can be O(1)
class Solution:
    def longestConsecutive(self, nums: List[int]) -> int:
        if len(nums) == 0:
            return 0
        res = 1
        last = 1
        nums.sort()
        for i in range(1, len(nums)):
            cur = 1
            if nums[i] == nums[i -1]:
                cur = last
            elif  nums[i] == nums[i - 1] + 1:
                cur = last + 1
            last = cur
            res = max(res, cur)
        return res

# O(n) with hash set, start from the smallest start; space is also O(n)

class Solution:
    def longestConsecutive(self, nums: List[int]) -> int:
        s = set(nums)
        res = 0
        for n in nums:
            if n - 1 not in s:
                curn = n
                ct = 1
                while curn + 1 in s:
                    curn += 1
                    ct += 1
                res = max(res, ct)
        return res


#没有O（n）的要求的话就先sort 再计数
class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        if(nums.empty()) return 0;
        sort(nums.begin(),nums.end());
        int size = nums.size();
        int res = 1;
        int maxNum = 1;
        for(int i = 0; i < size - 1; ++i) {  
            if(nums[i] + 1 == nums[i+1]) ++maxNum;
            else if(nums[i] == nums[i+1]) continue; //别忘了重复相等上升元素
            else{
                res = max(res, maxNum);
                maxNum = 1;
            }
        }
        res = max(res, maxNum); //如果一直上升 check一下惹
        return res;
    }
};

#time O（nlgn）


#想要总time是n的 可以用一个hashset，遍历的过程中删掉已经计数过的（上下都要计算）根据差值update res
class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        if(nums.empty()) return 0;
        unordered_set<int> store (nums.begin(), nums.end());
        int size = nums.size();
        int pre, next;
        int res = 1; //注意初始化应该是1！
        for(int i = 0; i < size - 1; ++i) {  
            int val = nums[i];
            if(!store.count(val)) continue;
            else {
                store.erase(val);
                pre = val - 1;
                next = val + 1;
                while(store.count(pre)) {
                    store.erase(pre);
                    pre--;
                } //退出的时候是一个不在的下边界 ，pre+1 exist
                while(store.count(next)) {
                    store.erase(next);
                    next++;
                } //退出的时候是一个不在的上边界 , next -1 exist
                res = max(res, next - 1 - pre); 
            }
        }
        return res;
    }
};
