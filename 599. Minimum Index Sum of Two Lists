#You need to help them find out their common interest with the least list index sum. 
#咱还能不能好好读题了？人家一上来就说了是sum， 当然要考虑sum了！
Input:
["Shogun", "Tapioca Express", "Burger King", "KFC"]
["Piatti", "The Grill at Torrey Pines", "Hungry Hunter Steakhouse", "Shogun"]
Output: ["Shogun"]
Explanation: The only restaurant they both like is "Shogun".

#sum相同的时候都加入list

class Solution {
public:
    //题里说的的是least index sum！能不能好好读题了还？？？
    //所以每次要比较一下sum
    vector<string> findRestaurant(vector<string>& list1, vector<string>& list2) {
        unordered_map<string, int> l1;
        vector<string> res;
        for(int i = list1.size()-1; i>=0; i--) {
            l1.insert(pair(list1[i],i));  //l1[list1[i]] = i; 直接这个比用pair 快嗷
        }
        int sum;
        int minSum = INT_MAX;
        int size = list2.size();
        for(int i = 0; i<size; i++) {
            if(l1.count(list2[i]) == 1) {
                sum = i + l1[list2[i]];
                if(sum < minSum) {
                    minSum = sum;
                    res.clear();
                    res.push_back(list2[i]);
                } else if (sum == minSum) {
                    res.push_back(list2[i]);
                }
            }
            
        }
        
        return res;
    }
};
