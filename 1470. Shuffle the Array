Given the array nums consisting of 2n elements in the form [x1,x2,...,xn,y1,y2,...,yn].

Return the array in the form [x1,y1,x2,y2,...,xn,yn].

 

Example 1:

Input: nums = [2,5,1,3,4,7], n = 3
Output: [2,3,5,4,1,7] 
Explanation: Since x1=2, x2=5, x3=1, y1=3, y2=4, y3=7 then the answer is [2,3,5,4,1,7].
Example 2:

Input: nums = [1,2,3,4,4,3,2,1], n = 4
Output: [1,4,2,3,3,2,4,1]
Example 3:

Input: nums = [1,1,2,2], n = 2
Output: [1,2,1,2]
 

Constraints:

1 <= n <= 500
nums.length == 2n
1 <= nums[i] <= 10^3

# O（1） space 和  O（n）time
class Solution:
    def shuffle(self, nums: List[int], n: int) -> List[int]:
        # time complexity: be careful, each buff while will correct at least
        # one number into its correct position and each number won't be moved twice if it is already in the correct postion
        # so the time complexity is still O(n)
        #
        # since the number given are all >1, use negative number to mean finished
        for i in range(len(nums)):
            j = i
            # I am going to take it and place it into a correct pos
            buf = nums[i]
            while buf > 0:
                # find the correct position j, update buffer as j
                # when buffer is negative means I don't need to do anything 
                # for the current run
                if j >= n:
                    j = (j-n) *2 + 1
                else:
                    j *= 2
                buf, nums[j] = nums[j], -buf
        for i in range(len(nums)):
            nums[i] *=-1
        return nums
