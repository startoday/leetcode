#Find the sum of all left leaves in a given binary tree.

Example:

    3
   / \
  9  20
    /  \
   15   7

There are two left leaves in the binary tree, with values 9 and 15 respectively. Return 24.

#注意这道题的意思是只要左边的叶子！！不是最左边的叶子！！！！！！！！右子树的左边的叶子也行！！！！！
#还得是叶子节点啊老大！！！认真审题 不是左边值的和！！！

class Solution {
public:
    int sumOfLeftLeaves(TreeNode* root) {
        int res = 0;
        if (!root) return res;
        queue<TreeNode *> nodes;
        nodes.push(root);
        TreeNode * temp;

        while(!nodes.empty()){
            for(int i = nodes.size() ; i>0; i--) {
                temp = nodes.front();
                nodes.pop();
                if(temp->left && !temp->left->left &&  !temp->left->right ) res += temp->left->val;  //别忘了判断是不是叶子节点
                if(temp->left) nodes.push(temp->left);
                if(temp->right) nodes.push(temp->right);
            }
        }   
        return res;
    }
};


#递归的写法 是左子叶的时候开始累加，记得还要加上root ->right 的计算结果
class Solution {
public:
    int sumOfLeftLeaves(TreeNode* root) {
        if(!root ) return 0;
        
        if(root->left && ! root->left->left && !root->left->right){
            return root->left->val + sumOfLeftLeaves(root->right);
        }
        return sumOfLeftLeaves(root->left) + sumOfLeftLeaves(root->right);
    }
};
