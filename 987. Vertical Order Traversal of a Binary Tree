Given a binary tree, return the vertical order traversal of its nodes values.

For each node at position (X, Y), its left and right children respectively will be at positions (X-1, Y-1) and (X+1, Y-1).

Running a vertical line from X = -infinity to X = +infinity, 
whenever the vertical line touches some nodes, we report the values of the nodes in order from top to bottom (decreasing Y coordinates).

If two nodes have the same position, then the value of the node that is reported first is the value that is smaller.

Return an list of non-empty reports in order of X coordinate.  
Every report will have a list of values of nodes.

class Solution:
    def verticalTraversal(self, root: TreeNode) -> List[List[int]]:
        # There can be cases where row and column number is the same, and that is the case when you want to sort the stuff
        q = deque()
        # I need to store the row information as well
        q.append((root, 0, 0))
        dic =defaultdict(list)
        minV = 0
        maxV = 0
        while q:
            x,y,z = q.popleft()
            dic[y].append((z, x.val))
            minV = min(minV, y)
            maxV = max(maxV, y)
            if x.left:
                q.append((x.left, y - 1, z +1))
            if x.right:
                q.append((x.right, y + 1, z +1))
        res = []
        for i in range(minV, maxV+1):
            if i in dic:
                res.append([v for k, v in sorted(dic[i])])            
        return res
        
class Solution:
    def verticalTraversal(self, root: Optional[TreeNode]) -> List[List[int]]:
        q = deque()
        q.append((root,0,0))
        dic = defaultdict(list)
        leftMost = 0
        rightMost = 0
        while q:
            rt,row,col = q.popleft()
            dic[col].append((row, rt.val)) #need to sort by rt val if col and row are the same
            leftMost = min(leftMost, col)
            rightMost = max(rightMost, col)
            if rt.left:
                q.append((rt.left, row+1, col -1))
            if rt.right:
                q.append((rt.right, row +1, col+1))
        res = []
        #pay attention here the right most is also needed
        for i in range(leftMost, rightMost + 1):
            if i in dic:
                res.append([v for k, v in sorted(dic[i])]) 
                #have to sort by row then sort by val 
                #below is wrong: case [3,1,4,0,2,2]
                # cur = [v for k, v in dic[i]]
                # res.append(sorted(cur))
        return res        

class Solution:
    def verticalTraversal(self, root: Optional[TreeNode]) -> List[List[int]]:
        dic = defaultdict(list) 
        dq = deque()
        dq.append((root,0))
        while dq:
            #level traversal
            size = len(dq)
            d = defaultdict(list) #for each row, add by col(can have same row and col, needs to sort them) - key is col, value is rt.val
            for i in range(size):
                rt, col = dq.popleft()
                d[col].append(rt.val) 
                if rt.left:  
                    dq.append((rt.left, col-1)) 
                if rt.right: 
                    dq.append((rt.right,col+1))     
            for col in d: 
                dic[col].extend(sorted(d[col]))
        #then we only need to sort by key in dic
        return [dic[i] for i in sorted(dic)]
