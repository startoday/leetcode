Given a binary tree, return the vertical order traversal of its nodes values.

For each node at position (X, Y), its left and right children respectively will be at positions (X-1, Y-1) and (X+1, Y-1).

Running a vertical line from X = -infinity to X = +infinity, 
whenever the vertical line touches some nodes, we report the values of the nodes in order from top to bottom (decreasing Y coordinates).

If two nodes have the same position, then the value of the node that is reported first is the value that is smaller.

Return an list of non-empty reports in order of X coordinate.  
Every report will have a list of values of nodes.

class Solution:
    def verticalTraversal(self, root: TreeNode) -> List[List[int]]:
        # There can be cases where row and column number is the same, and that is the case when you want to sort the stuff
        q = deque()
        # I need to store the row information as well
        q.append((root, 0, 0))
        dic =defaultdict(list)
        minV = 0
        maxV = 0
        while q:
            x,y,z = q.popleft()
            dic[y].append((z, x.val))
            minV = min(minV, y)
            maxV = max(maxV, y)
            if x.left:
                q.append((x.left, y - 1, z +1))
            if x.right:
                q.append((x.right, y + 1, z +1))
        res = []
        for i in range(minV, maxV+1):
            if i in dic:
                res.append([v for k, v in sorted(dic[i])])            
        return res
