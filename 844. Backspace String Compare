Given two strings S and T, return if they are equal when both are typed into empty text editors. # means a backspace character.

Note that after backspacing an empty text, the text will continue empty.

Example 1:

Input: S = "ab#c", T = "ad#c"
Output: true
Explanation: Both S and T become "ac".
Example 2:

Input: S = "ab##", T = "c#d#"
Output: true
Explanation: Both S and T become "".
Example 3:

Input: S = "a##c", T = "#a#c"
Output: true
Explanation: Both S and T become "c".
Example 4:

Input: S = "a#c", T = "b"
Output: false
Explanation: S becomes "c" while T becomes "b".
Note:

1 <= S.length <= 200
1 <= T.length <= 200
S and T only contain lowercase letters and '#' characters.
Follow up:

Can you solve it in O(N) time and O(1) space?


# brute force: build the string
class Solution(object):
    def backspaceCompare(self, S, T):
        def build(S):
            ans = []
            for c in S:
                if c != '#':
                    ans.append(c)
                elif ans:
                    ans.pop()
            return "".join(ans)
        return build(S) == build(T)

# O(1) space with 2 ptrs:
class Solution:
    def backspaceCompare(self, S: str, T: str) -> bool:
        i = len(S) - 1
        j = len(T) - 1
        ctI = 0 
        ctJ = 0
        while i >= 0 or j >= 0:
            while i >=0:
                if S[i] == "#":
                    ctI += 1
                    i -= 1
                elif ctI > 0:
                    ctI -= 1
                    i -= 1
                else:
                    break
            while j >=0:
                if T[j] == "#":
                    ctJ += 1
                    j -= 1
                elif ctJ > 0:
                    ctJ -= 1
                    j -= 1
                else:
                    break
            if i >= 0 and j >=0 and S[i] != T[j]:
                return False
            if (i>=0) != (j >=0): # check this first before decrement!!
                return False
            i -= 1
            j -= 1 
        return True
