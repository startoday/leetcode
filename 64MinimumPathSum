#给一个不含有负数的matrix， 求从左上到右下路径的最小和

Input:
[
  [1,3,1],
  [1,5,1],
  [4,2,1]
]
Output: 7
Explanation: Because the path 1→3→1→1→1 minimizes the sum.

class Solution:
    def minPathSum(self, grid: List[List[int]]) -> int:
        if len(grid) == 0:
            return 0
        if len(grid[0]) == 0:
            return 0
        # dp[i][j] store the min total sum when reaching point(i,j)
        dp = copy.deepcopy(grid)
        for i in range(1, len(grid)):
            dp[i][0] += dp[i-1][0]
        for j in range(1, len(grid[0])):
            dp[0][j] += dp[0][j-1]
            
        for i in range(1, len(grid)):
            for j in range(1, len(grid[0])):
                dp[i][j] = min(dp[i][j] + dp[i][j-1], dp[i][j] + dp[i-1][j])
        return dp[-1][-1]


#穿的参数直接就是reference 所以直接改即可，从右下角往回数，只可能是左边和上面来的
#maintain整个matrix 为最小和，注意先初始化边界，最后[0][0]的值就是 最小 sum 

class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        if(grid.empty()) return 0;
        int row = grid.size();
        int col = grid[0].size();
        if(col==0) return 0;
        
        for(int i = col-2;i>=0;i--){
            grid[row-1][i]+=grid[row-1][i+1];
        }
        for(int i = row-2;i>=0;i--){
            grid[i][col-1]+=grid[i+1][col-1];
        }
        for(int i = row -2;i>=0;i--){
           for(int j = col -2;j>=0;j--){
               grid[i][j]+=min(grid[i][j+1],grid[i+1][j]);
           }
        }
        
        return grid[0][0];        
    }
};
