Given a sorted array nums, remove the duplicates in-place such that duplicates appeared at most twice and return the new length.

Do not allocate extra space for another array; you must do this by modifying the input array in-place with O(1) extra memory.


Example 1:

Input: nums = [1,1,1,2,2,3]
Output: 5, nums = [1,1,2,2,3]
Explanation: Your function should return length = 5, with the first five elements of nums being 1, 1, 2, 2 and 3 respectively. It doesn't matter what you leave beyond the returned length.


#requirement: inplace modify with o(1) space
# idea, store the current open positionm when count is smaller than 3 means this is a good postion, we can keep it ,increate open postion. when there is a new 
# different element, reset the ct as 1

class Solution:
    def removeDuplicates(self, nums: List[int]) -> int:
        if len(nums) <3:
            return len(nums)
        ct = 1
        # current open pos
        i = 1
        for j in range(1, len(nums)):
            if nums[j] == nums[j-1]:
                ct += 1
            else:
                ct = 1           
            if ct <= 2:
                nums[i] = nums[j]
                i+= 1    
        return i
        
class Solution:
    def removeDuplicates(self, nums: List[int]) -> int:
        track = 1
        ct = 1
        for i in range(1, len(nums)):
            if nums[i] == nums[i-1]:
                ct += 1
            else:
                ct =1 
            if ct <=2:
                nums[track] = nums[i]
                track += 1
        return track
        
