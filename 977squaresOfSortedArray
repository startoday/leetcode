Given an array of integers A sorted in non-decreasing order, return an array of the squares of each number, also in sorted non-decreasing order.

 

Example 1:

Input: [-4,-1,0,3,10]
Output: [0,1,9,16,100]
Example 2:

Input: [-7,-3,2,3,11]
Output: [4,9,9,49,121]
 

Note:

1 <= A.length <= 10000
-10000 <= A[i] <= 10000
A is sorted in non-decreasing order.

class Solution:
    def sortedSquares(self, A: List[int]) -> List[int]:
        #no sort : find the gap(just find the place when we first meet the non-nega! then two pointers
        if len(A) == 0:
            return []
        i = 0
        while i < len(A) and A[i]<0:
            i += 1
        j = i - 1
        res = []
        while j >= 0 and i <len(A):
            if abs(A[j]) <= abs(A[i]):
                res.append(A[j]**2)
                j -= 1
            else:
                res.append(A[i]**2)
                i += 1 
        while j >= 0:
            res.append(A[j]**2)
            j -= 1 
        while i < len(A):
            res.append(A[i]**2)
            i += 1  
        return res



#给一个sorted array， return 一个按照每个数字平方排序的array
#直接的想法就是先平方再排序

class Solution {
public:
    vector<int> sortedSquares(vector<int>& A) {
        for(auto i=A.begin();i<A.end();i++){
            *i=*i*(*i);
        }
        sort(A.begin(),A.end());
        return A;
    }
};

# O(nlgn) for time o(1)for space


#另一个想法 用两根指针从两侧比较 （左侧用绝对值，右侧不需要）
#需要用额外的空间储存

class Solution {
public:
    vector<int> sortedSquares(vector<int>& A) {
            int size =A.size();
            int left =0; 
            int right =size -1;
            int count = size -1;
            vector<int>res (size);
            while(left<right){ 
                if(abs(A[left])>=A[right]){
                    res[count]=A[left]*A[left];
                    left++;
                } else {
                    res[count]=A[right]*A[right];
                    right--;
                }
                count--;
            }
            res[0]=A[left]*A[left];
            return res; 
    }
};

#只走了一遍 time： O（N）
#space  O（N）
