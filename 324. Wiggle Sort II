Given an unsorted array nums, reorder it such that nums[0] < nums[1] > nums[2] < nums[3]....

Example 1:
Input: nums = [1, 5, 1, 1, 6, 4]
Output: One possible answer is [1, 4, 1, 5, 1, 6].

Example 2:
Input: nums = [1, 3, 2, 2, 3, 1]
Output: One possible answer is [2, 3, 1, 3, 1, 2].
Note:
You may assume all input has valid answer.

Follow Up:
Can you do it in O(n) time and/or in-place with O(1) extra space?

#有=号的要求 所以不能直接用1的方法，按照最开始的想法，可以sort完之后分别插入但是注意两侧要按照相反顺序插入
class Solution {
public:
    void wiggleSort(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        vector<int>temp (nums);
        int y = nums.size() - 1;
        int x = y - nums.size() / 2;
        for(int i = 0; i < nums.size(); ++i) {
            if(i %2 == 0) nums[i] =temp [x --];
            else nums[i] = temp[y --];
        }
    }
};

#要求O（n）time和O（1）space。。
？？？
