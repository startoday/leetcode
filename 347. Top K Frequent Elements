Given a non-empty array of integers, return the k most frequent elements.

Example 1:
Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]

Example 2:
Input: nums = [1], k = 1
Output: [1]

Note:
You may assume k is always valid, 1 ≤ k ≤ number of unique elements.
Your algorithm's time complexity must be better than O(n log n), where n is the array's size.

#note 好像没啥特殊的case
#惊觉要求nlgn 我写的这个 n方 -换成 max heap即可，当heap的size > map size -k 的时候 每个top都得要
class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        vector<int> res;
        unordered_map<int, int> has;
        for(int i = 0; i < nums.size(); ++i) {
            has[nums[i]]++;
        }
        while(has.size() > k) {
            for(auto it = has.begin(); it != has.end();) {
                it->second = it->second - 1;
                if(it->second == 0) {
                    has.erase(it++);
                 } else {
                    ++it;
                }
            }
        }
        for(auto x: has) {
            res.push_back(x.first);
        }
        return res;
    }
};


#改正后
class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        unordered_map<int, int> has;
        for(int i = 0; i < nums.size(); ++i) {
            has[nums[i]]++;
        }
        priority_queue<pair<int, int>> pq;
        vector<int> res;
        for(auto x: has) {
            pq.push(make_pair(x.second, x.first));
            if(pq.size() > (has.size() - k)) {
                res.push_back(pq.top().second);
                pq.pop();
            }
        }
        return res;
    }
};
