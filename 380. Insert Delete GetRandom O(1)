Design a data structure that supports all following operations in average O(1) time.

insert(val): Inserts an item val to the set if not already present.
remove(val): Removes an item val from the set if present.
getRandom: Returns a random element from current set of elements. Each element must have the same probability of being returned.

Example:
// Init an empty set.
RandomizedSet randomSet = new RandomizedSet();

// Inserts 1 to the set. Returns true as 1 was inserted successfully.
randomSet.insert(1);

// Returns false as 2 does not exist in the set.
randomSet.remove(2);

// Inserts 2 to the set, returns true. Set now contains [1,2].
randomSet.insert(2);

// getRandom should return either 1 or 2 randomly.
randomSet.getRandom();

// Removes 1 from the set, returns true. Set now contains [2].
randomSet.remove(1);

// 2 was already in the set, so return false.
randomSet.insert(2);

// Since 2 is the only number in the set, getRandom always return 2.
randomSet.getRandom();
#都需要 O（1）
#随机数的被取频率需要一样，get random 是 O（1）


class RandomizedSet:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.m  = {}
        self.l = []
        # use index to easy get

    def insert(self, val: int) -> bool:
        """
        Inserts a value to the set. Returns true if the set did not already contain the specified element.
        """
        if val in self.m:
            return False
        self.m[val] = len(self.l)
        self.l.append(val)
        return True
        
    def remove(self, val: int) -> bool:
        """
        Removes a value from the set. Returns true if the set contained the specified element.
        """
        if val not in self.m:
            return False
        ind = self.m[val] 
        lastInd = len(self.l) -1
        self.m[self.l[lastInd]] = ind
        self.l[lastInd], self.l[ind] = self.l[ind], self.l[lastInd] # swap
        self.l.pop()
        del self.m[val]
        return True
        

    def getRandom(self) -> int:
        """
        Get a random element from the set.
        """
        r = random.randrange(len(self.l))
        return self.l[r]
        


#需要hashmap 建立数字和数组位置间的映射 删除的时候swap到最后的索引，删掉array里的元素 ， random 也是这个方法


class RandomizedSet {
public:
    /** Initialize your data structure here. */
    RandomizedSet() {
        
    }
    
    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */
    bool insert(int val) {
        if(has.count(val)) return false;
        nums.push_back(val);
        has.insert({val, nums.size() - 1});
        return true; 
    }
    
    /** Removes a value from the set. Returns true if the set contained the specified element. */
    bool remove(int val) {
        if(!has.count(val)) return false;
        has[nums.back()] = has[val]; //别忘了这个也要换！！！！
        swap(nums[has[val]], nums.back());
        nums.pop_back();
        has.erase(val);
        return true;
    }
    
    /** Get a random element from the set. */
    int getRandom() {
        int ind = rand() % nums.size();
        return nums[ind];
    }
private:
    unordered_map<int, int> has;
    vector<int> nums;
};
