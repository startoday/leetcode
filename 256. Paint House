There are a row of n houses, each house can be painted with one of the three colors: red, blue or green. The cost of painting each house with a certain color is different. You have to paint all the houses such that no two adjacent houses have the same color.

The cost of painting each house with a certain color is represented by a n x 3 cost matrix. For example, costs[0][0] is the cost of painting house 0 with color red; costs[1][2] is the cost of painting house 1 with color green, and so on... Find the minimum cost to paint all houses.

Note:
All costs are positive integers.

Example:

Input: [[17,2,17],[16,16,5],[14,3,19]]
Output: 10
Explanation: Paint house 0 into blue, paint house 1 into green, paint house 2 into blue. 
             Minimum cost: 2 + 5 + 3 = 10.
             
#给一列房子和每个位置房子涂成相应颜色需要的价钱，要求相邻两房子不能同色，问最少花多少钱
#dp

class Solution {
public:
    int minCost(vector<vector<int>>& costs) {
        int n = costs.size();
        if(n == 0) return 0;
        vector<int> r(n); r[0]= costs[0][0];
        vector<int> g(n); g[0] = costs[0][1];
        vector<int> b(n); b[0] = costs[0][2];
        
        for(int i = 1; i < n; ++i) {
            r[i] = costs[i][0] + min(g[i-1], b[i-1]);
            g[i] = costs[i][1] + min(r[i-1], b[i-1]);
            b[i] = costs[i][2] + min(g[i-1], r[i-1]);            
        }
        return min(r[n-1], min(g[n-1],b[n-1]));
    }
};
