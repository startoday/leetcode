Given an array of strings, group anagrams together.

Example:

Input: ["eat", "tea", "tan", "ate", "nat", "bat"],
Output:
[
  ["ate","eat","tea"],
  ["nat","tan"],
  ["bat"]
]
Note:

class Solution:
    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:
        # use a map, key is stuff, and generate the group
        if len(strs) == 0:
            return [[]]
        dic = defaultdict(list)
        for s in strs:
            tmp = [0]*26
            for x in s:
                tmp[ord(x)-ord('a')] += 1
            dic[tuple(tmp)].append(s)  # easy to write in this way!
        return dic.values()  # easy to write in this way as well!



All inputs will be in lowercase.
The order of your output does not matter.
#time O(n*k) length of strs* max length word
class Solution {
public:
    vector<vector<string>> groupAnagrams(vector<string>& strs) {
        vector<vector<string>> res; 
        if (strs.size() == 0) return res;
        unordered_map<string, vector<string>> m;
        for (auto & x : strs) {
            vector<int> temp(26,0);
            for (auto ch : x) {
                temp[ch - 'a'] ++;
            }
            //不能 * 10 转化成int 因为数量不一定
            string r = "";
            for (int i = 0; i < 26; ++i) {
                r += to_string(temp[i]) + "#"; //要区分每个数字～
            }
            m[r].push_back(x);
        }
        
        for (auto & x : m) {
            res.push_back (x.second);
        }
        return res;
    }
};

#another way time O(n*klgk)
class Solution {
public:
    vector<vector<string>> groupAnagrams(vector<string>& strs) {
        vector<vector<string>> res; 
        if (strs.size() == 0) return res;
        unordered_map<string, vector<string>> m;
        for (auto & x : strs) {
            string r = x;
            sort(x.begin(),x.end());
            m[x].push_back(r);
        }
        
        for (auto & x : m) {
            res.push_back (x.second);
        }
        return res;
    }
};
