Given a matrix, and a target, return the number of non-empty submatrices that sum to target.
A submatrix x1, y1, x2, y2 is the set of all cells matrix[x][y] with x1 <= x <= x2 and y1 <= y <= y2.
Two submatrices (x1, y1, x2, y2) and (x1', y1', x2', y2') are different if they have some coordinate that is different: for example, if x1 != x1'.

 
Example 1:
Input: matrix = [[0,1,0],[1,1,1],[0,1,0]], target = 0
Output: 4
Explanation: The four 1x1 submatrices that only contain 0.

Example 2:
Input: matrix = [[1,-1],[-1,1]], target = 0
Output: 5
Explanation: The two 1x2 submatrices, plus the two 2x1 submatrices, plus the 2x2 submatrix.
 

Note:
1 <= matrix.length <= 300
1 <= matrix[0].length <= 300
-1000 <= matrix[i] <= 1000
-10^8 <= target <= 10^8

#求的是和是target的submatrix的个数
#和之前小于K的长方形个数应该是一道题 还是求前缀和 用一个map记录某个和有几个
#记住前缀和都是 x[j] - x[i-1] !!!
class Solution {
public:
    int numSubmatrixSumTarget(vector<vector<int>>& matrix, int target) {
        int res = 0;
        int r = matrix.size();
        int c = matrix[0].size();
        vector<vector<int>> pres(r, vector<int> (c + 1, 0)) ;
        for(int i = 0; i < r; ++i) {
            for(int j = 1; j <= c; ++j) {
                pres[i][j] = pres[i][j - 1] + matrix[i][j - 1];
            }
        }
        
        for(int i = 1; i <= c; ++i) {
            for(int j = i; j <= c; ++j) {
                unordered_map<int, int> preCt;
                preCt[0] = 1;
                int temp  = 0;
                for(int k = 0; k < r; ++k) {
                    temp += pres[k][j] - pres[k][i - 1];
                    res += preCt[temp - target];
                    preCt[temp] ++;
                }
            }
        }
        return res;
    }
};
