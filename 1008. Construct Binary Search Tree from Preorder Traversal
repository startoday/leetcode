Return the root node of a binary search tree that matches the given preorder traversal.
(Recall that a binary search tree is a binary tree where for every node, any descendant of node.left has a value < node.val, and any descendant of node.right has a value > node.val.  
Also recall that a preorder traversal displays the value of the node first, then traverses node.left, then traverses node.right.)

Note: 

1 <= preorder.length <= 100
The values of preorder are distinct.

#继续tree的练习系列！ 给个preOrder的array，来重建tree。 可以记录一下当前root的最大最小值，只有在这个范围内，才可以建这个root，不然return NULL
class Solution {
public:
    TreeNode* bstFromPreorder(vector<int>& preorder) {
        int st = 0;
        return helper(preorder, st, INT_MIN, INT_MAX);
    }
    TreeNode * helper(vector<int>& preorder, int & i, int lb, int ub) {
        if(i >= preorder.size()) return NULL;
        int val = preorder[i]; //因为此处传 ref了，之后要先increament i (不能传r value， 得先存一下这个值
        if(val > ub || val < lb ) return NULL;
        TreeNode * root = new TreeNode(val);
        ++i;
        root->left = helper(preorder, i, lb, val); //root, left, right
        root->right = helper(preorder, i, val, ub);  
        return root;
    }
};
Time O（n)
