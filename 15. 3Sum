Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.

Notice that the solution set must not contain duplicate triplets.

 

Example 1:
Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]

Example 2:
Input: nums = []
Output: []

Example 3:
Input: nums = [0]
Output: []

Example 4:
Input: nums = [-2,0,0,2,2]
Output: [[-2,0,2]]

# 要求 不能有重复一样的 triplet 在答案里

Way 1 with sort
# 首先想法是sort， 然后跟two sum2 一样，用2ptrs 两侧寻找，注意当值相等时只算一次（相等的时候只run第一个，后面一样的跳过去）
# 一个比较酷的点是为了去重，可以在 Num[i] > 0 的时候break， 因为先从小值（负值）开始， 已经算到了
class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        # time complexity: O(n^2) 
        nums.sort()
        res = []
        for i in range(len(nums)):
            if nums[i] > 0:
                break # pay attention to this! 
            if i == 0 or nums[i-1] != nums[i]:
                l = i + 1 # pay attention to this!
                h = len(nums) -1
                while l < h:
                    if nums[l] + nums[h] < -nums[i]:
                        l += 1
                    elif nums[l] + nums[h] > -nums[i]:
                        h -= 1
                    else:
                        res.append([nums[i],nums[l],nums[h]]) # pay attention to this! 
                        l += 1
                        h -= 1
                        while l < h and nums[l] == nums[l-1]: # pay attention to this! 
                            l+=1
        return res
        
