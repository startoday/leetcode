Given a string S, return the number of substrings of length K with no repeated characters.

 

Example 1:

Input: S = "havefunonleetcode", K = 5
Output: 6
Explanation: 
There are 6 substrings they are : 'havef','avefu','vefun','efuno','etcod','tcode'.
Example 2:

Input: S = "home", K = 5
Output: 0
Explanation: 
Notice K can be larger than the length of S. In this case is not possible to find any substring.

#限定string 长度，找无重复元素的substr （注意substr的定义是不可以跳的）
#滑动窗口
#可以用首尾记录窗口，用vector来写，比hashmap 快
class Solution {
public:
    
    int numKLenSubstrNoRepeats(string S, int K) {
        int n = S.size();
        if(K > 26 ||n < K) return 0;
        vector<int> sw(256, 0);
        int l = 0; int r = 0; int res =0;
        
        while(l <= n - K + 1 && r < n ) {
            if(sw[S[r]] == 0) {
                sw[S[r]]++;
            } else {
                while(sw[S[r]] == 1){
                    sw[S[l++]]--;
                }
                sw[S[r]]++;
            }
            if(r - l + 1 == K) {
                res++;
                sw[S[l++]]--;
            }
            r++;
        }
        return res;
    }
};


#自己的写法
class Solution {
public:
    int numKLenSubstrNoRepeats(string S, int K) {
        if(K > 26 ||S.size() < K) return 0;
        unordered_map<char, int> m;
        for(int i = 0; i< K; ++i) {
            if(m.count(S[i]) == 0) m[S[i]] = 1;
            else m[S[i]] ++;
        }
        int res = m.size() == K ? 1 : 0;
        for(int i = 0; i< S.size() - K; ++i) {
            m[S[i]]--;
            if(m[S[i]] == 0) m.erase(S[i]);
            if(m.count(S[i + K]) == 0)  m[S[i + K]] = 1;
            else m[S[i + K]]++;
            if(m.size() == K) {
                res++;
            }
        }
        return res;
    }
};
