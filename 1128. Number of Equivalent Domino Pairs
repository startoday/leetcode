Given a list of dominoes, dominoes[i] = [a, b] is equivalent to dominoes[j] = [c, d] if and only if either (a==c and b==d), or (a==d and b==c) - that is, one domino can be rotated to be equal to another domino.

Return the number of pairs (i, j) for which 0 <= i < j < dominoes.length, and dominoes[i] is equivalent to dominoes[j].

 

Example 1:

Input: dominoes = [[1,2],[2,1],[3,4],[5,6]]
Output: 1
Constraints:

1 <= dominoes.length <= 40000
1 <= dominoes[i][j] <= 9

#一道easy题。。给了数字不会大于9 所以！通过 *10的方法简单的转化 
class Solution {
private:
    map<int, int> mp;
public:
    int numEquivDominoPairs(vector<vector<int>>& dominoes) {
        int len = dominoes.size();
        for(int i = 0; i < len; i++){
            mp[dominoes[i][0] < dominoes[i][1]? (dominoes[i][0]*10 + dominoes[i][1]): (dominoes[i][1]*10 + dominoes[i][0])]++;
        }
        int res = 0;
        for(auto iter = mp.begin(); iter != mp.end(); iter++)
            res += iter->second * (iter->second - 1) / 2;
        return res;
    }
};

#一个更nice的想法和写法 直接转化为同一个（都是前大于后的，然后乘十当定值），那么每加一个相同的 都多了前面的n次相同的！ （排列组合的拆开）
    int numEquivDominoPairs(vector<vector<int>>& dominoes) {
        unordered_map<int, int> m;
        int rv = 0;
        for (auto &v : dominoes) {
            if (v[0] < v[1]) {
                swap(v[0], v[1]);
            }
            int i = v[0] * 10 + v[1];
            rv += m[i];
            ++m[i];
        }
        return rv;
    }

#当时的写法--搞得这么麻烦啊你--还是代码功力不行！，不过思路还是和上述类似的
lass Solution {
public:
    int numEquivDominoPairs(vector<vector<int>>& dominoes) {
        int n = dominoes.size();
        map< pair<int,int>, int > check;
        int res = 0;
        for(int i = 0; i < n; ++i){
            if((check.count(make_pair(dominoes[i][0],dominoes[i][1])) != 0) ){
                check[make_pair(dominoes[i][0],dominoes[i][1])] ++;
            }
            else if(check.count(make_pair(dominoes[i][1],dominoes[i][0])) !=0 ){
                check[make_pair(dominoes[i][1],dominoes[i][0])] ++;
            }
            else check.insert(make_pair(make_pair(dominoes[i][0],dominoes[i][1]), 1));
        }
        for(auto f :check) {
            res += count(f.second);
        }
        return res;
    }
    int count(int n) {
        return (n *(n-1) )/2;
    }
};
