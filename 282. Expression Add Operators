Given a string that contains only digits 0-9 and a target value, return all possibilities to add binary operators (not unary) +, -, or * between the digits so they evaluate to the target value.

Example 1:

Input: num = "123", target = 6
Output: ["1+2+3", "1*2*3"] 
Example 2:

Input: num = "232", target = 8
Output: ["2*3+2", "2+3*2"]


# store the previous value, when meet "*" revser the previous calcaultion and recalculate
class Solution:
    def addOperators(self, num: str, target: int) -> List[str]:
        res = []
        def dfs(pos, curStr, curval, lastval):
            if pos == len(num):
                if curval == target:
                    res.append(curStr)
                return 
            for i in range(pos + 1, len(num) + 1):
                tmp = num[pos: i]
                n = int(tmp)
                if i == pos + 1 or num[pos] != "0":
                    if lastval == None:
                        dfs(i, tmp, n,n)
                    else:
                        dfs(i , curStr + "+" + tmp, curval + n , n)
                        dfs(i , curStr + "-" + tmp, curval - n , -n)
                        dfs(i , curStr + "*" + tmp, curval - lastval + lastval * n , lastval * n)
        dfs(0,"", 0 ,None)
        return res
