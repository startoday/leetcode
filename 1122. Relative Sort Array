Given two arrays arr1 and arr2, the elements of arr2 are distinct, and all elements in arr2 are also in arr1.

Sort the elements of arr1 such that the relative ordering of items in arr1 are the same as in arr2.  
Elements that don't appear in arr2 should be placed at the end of arr1 in ascending order.

Input: arr1 = [2,3,1,3,2,4,6,7,9,2,19], arr2 = [2,1,4,3,9,6]
Output: [2,2,2,1,4,3,3,9,6,7,19]

Constraints:

arr1.length, arr2.length <= 1000
0 <= arr1[i], arr2[i] <= 1000
Each arr2[i] is distinct.
Each arr2[i] is in arr1.
#果然应该每次好好读一下constraints， 比如这道题的 每个长度都小于1000，给了提示， 还限制了很多test case 不用担心空集

#高级写法 利用lambda function 根据数不超过1000个的提示 重写sort的key
class Solution {
public:
    vector<int> relativeSortArray(vector<int>& arr1, vector<int>& arr2) {
        vector<int> index(1001); //set 1001 not 1000 to avoid overflow
        int ind =0;
        iota(index.begin(), index.end(), 1001); //set index to 1001 ..2001
        for(auto k : arr2) {
            index[k] = ind++;
        }
        sort(arr1.begin(),arr1.end(), [index](int a, int b) {
            return index[a] < index[b]; //don't forget return
        });   //all the ";" is still needed
        return arr1;
    }
};


#完全硬写
class Solution {
public:
    vector<int> relativeSortArray(vector<int>& arr1, vector<int>& arr2) {
        map<int, int > st;
        vector<int>res;
        for(auto k : arr1) {
            if(st.count(k) == 0) st.insert({k,1});
            else st[k]++;
        }
        for(auto m : arr2){
            
            for(int i = 0;i <st[m]; ++i) {
                res.push_back(m);
            }
            st.erase(m);
        }
        for(auto x : st) {
             for(int i = 0;i <x.second; ++i) {
                res.push_back(x.first);
            }
        }
        return res;
    }
};
