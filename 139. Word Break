#给一个非空string 和 非空 vector， 拥有list of non-empty words
Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, 
determine if s can be segmented into a space-separated sequence of one or more dictionary words.
# The same word in the dictionary may be reused multiple times in the segmentation.
# You may assume the dictionary does not contain duplicate words.
Example 1:

Input: s = "leetcode", wordDict = ["leet", "code"]
Output: true
Explanation: Return true because "leetcode" can be segmented as "leet code".
Example 2:

Input: s = "applepenapple", wordDict = ["apple", "pen"]
Output: true
Explanation: Return true because "applepenapple" can be segmented as "apple pen apple".
             Note that you are allowed to reuse a dictionary word.
Example 3:

Input: s = "catsandog", wordDict = ["cats", "dog", "sand", "and", "cat"]
Output: false

#一个stirng 越长越难拆解用array来储存到每个char为止是T or F， 该字([0,j])能不能拆取决于每个[0,i]是T的时候[i+1，j]这块是不是，是的话就是了
#用hash set 存一波的话seach也是很快的---实际
class Solution {
public:
    bool wordBreak(string s, vector<string>& wordDict) {
        unordered_set<string> dic (wordDict.begin(), wordDict.end());
        int size = s.size();
        vector<bool> res (size);
        for(int i = 0; i < size; ++i) {
            res[i] = dic.count(s.substr(0,i+1)); //用count还是快一点的！
            for(int j = 0; j < i ; ++j) {
                if(res[i]) break;
                res[i] = res[j] && dic.count(s.substr(j+1, i-j));
            }
        }   
        return res.back();
    }
};

#time O(n^2)
#space O(n+m)


#过不了某些太长case的recursive，substring那里还是可能越界
class Solution {
public:
    bool wordBreak(string s, vector<string>& wordDict) {
        set<string> sortedDic (wordDict.begin(), wordDict.end());
        return helper(s, sortedDic);
    }
    
    bool helper(string s, set<string> & sortedDic) {
        if(sortedDic.count(s)) return true;
        int size = s.size();
        string store = "";
        for(int i = 0; i < size; ++i) {
            store += s[i];
            if(sortedDic.count(store)) {
                if(helper(s.substr (i+1), sortedDic)) return true;
                continue;    
            }
        }
        return false;
    }  
};


