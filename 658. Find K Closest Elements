Given a sorted array, two integers k and x, find the k closest elements to x in the array. The result should also be sorted in ascending order. If there is a tie, the smaller elements are always preferred.

Example 1:
Input: [1,2,3,4,5], k=4, x=3
Output: [1,2,3,4]
Example 2:
Input: [1,2,3,4,5], k=4, x=-1
Output: [1,2,3,4]

class Solution:
    def findClosestElements(self, arr: List[int], k: int, x: int) -> List[int]:
        # use binary search to first the first closet! then use two ptrs to find the range
        # actually it can take care of it
        # if len(arr)  == 1:
        #     return arr  
        l = 0
        r = len(arr) - 1
        while l + 1 < r:
            m = l + (r-l) //2
            if arr[m] >= x:
                r = m
            else:
                l = m
        # after l is what we definitely want, we only need to track on side 
        while r- l -1 < k and r < len(arr) and l >= 0:
            if abs(arr[l] - x) <= abs(arr[r] -x):
                l -= 1
            else:
                r += 1
        if r == len(arr): # the end of the array, l might not able to control
            return arr[len(arr) - k : ]
        return arr[l + 1: l+k +1]



#脑子清醒一点！！！这玩意你也能dedug半个小时怎的？？？？！！！！
class Solution {
public:
    vector<int> findClosestElements(vector<int>& arr, int k, int x) {
        //find the closest number of x
        int l = 0;
        int r = arr.size() - 1;
        int mid = l + (r - l)/2;
        while((l + 1) < r) {
            mid = l + (r - l)/2;
            if(arr[mid] <= x) l = mid;
            else r = mid;
        } 
        //left and right is close to each other
        //use two ptrs to find the correct pos
        while (l >= 0 && r < arr.size() && ((r - l - 1) < k)) {
            if(abs(x - arr[l]) <= abs(x - arr[r])) l--; //when tie smaller prefered
            else r++;
        }
        if(l == -1) return vector<int> (arr.begin(), arr.begin() + k);
        if(r == arr.size()) return vector<int> (arr.end() - k, arr.end());
        return vector<int> (arr.begin() + l + 1, arr.begin() + r);//不包括右侧！
    }
};
