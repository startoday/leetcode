Given a set of distinct integers, nums, return all possible subsets (the power set).

Note: The solution set must not contain duplicate subsets.

Example:

Input: nums = [1,2,3]
Output:
[
  [3],
  [1],
  [2],
  [1,2,3],
  [1,3],
  [2,3],
  [1,2],
  []
]

#和combination 类似， 依旧可以使用backtracking 但是这次没有了长度限制，所以每次有就直接push即可
class Solution {
public:
    vector<vector<int> > res;
    vector<vector<int>> subsets(vector<int>& nums) {
        vector<int> temp {};
        helper(nums, temp, 0);
        return res;
    }
    void helper( const vector<int>& nums, vector<int> & temp, int st) {
        res.push_back(temp);
        for(int i = st; i < nums.size(); ++i) {
            temp.push_back(nums[i]);
            helper(nums, temp, i + 1);
            temp.pop_back();
        }
    }
};

#iterative的写法：对每一个res 已存在的array， 新的数字都要加进去生成一个新的array
class Solution {
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        vector<vector<int> > res{{}};
        for(int i = 0; i < nums.size(); ++i) {
            int k = res.size();
            for(int j = 0; j < k; ++j) {
                /*
                vector<int> temp = res[j];
                temp.push_back(nums[i]);
                res.push_back(temp);
                */
                //optimal writing
                res.push_back(res[j]);
                res.back().push_back(nums[i]);
            }
        }
        return res;
    }
};
#bit 操作，每个元素有取或者不取两种状态
class Solution {
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        int n = nums.size();
        vector<vector<int> > res (1 << n);
        for(int i = 0; i < 1<<n ; ++i) {
            for(int j = 0; j < n; ++j) {
                if( (i>>j) & 1) {
                    res[i].push_back(nums[j]);
                }
            }
        }
        return res;
    }
};
