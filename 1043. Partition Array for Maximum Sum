Given an integer array A, you partition the array into (contiguous) subarrays of length at most K.  After partitioning, each subarray has their values changed to become the maximum value of that subarray.

Return the largest sum of the given array after partitioning.

 

Example 1:

Input: A = [1,15,7,9,2,5,10], K = 3
Output: 84
Explanation: A becomes [15,15,15,9,10,10,10]
 

Note:

1 <= K <= A.length <= 500
0 <= A[i] <= 10^6

#同志，这种题，要求len的事，dp一定要往len上考虑啊！
#有说了都是非负数 

class Solution {
public:
    int maxSumAfterPartitioning(vector<int>& A, int K) {
        int n = A.size();
        vector<int> dp (n+1, 0);
        for(int i = 1; i <= n; ++i) {
            int curMax = A[i - 1];
            for(int j = 1; j <= K ; ++j) {
                if(i - j >= 0) {
                    curMax = max(curMax, A[i - j]);
                    dp[i] = max(dp[i], dp[i-j] + j * curMax);
                } 
            }
        }
        return dp[n];
    }
};

