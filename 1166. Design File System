You are asked to design a file system which provides two functions:

create(path, value): Creates a new path and associates a value to it if possible and returns True. 
######Returns False if the path already exists or its parent path doesn't exist.
get(path): Returns the value associated with a path or returns -1 if the path doesn't exist.
The format of a path is one or more concatenated strings of the form:
/ followed by one or more lowercase English letters. 
For example, /leetcode and /leetcode/problems are valid paths while an empty string and / are not.

Implement the two functions.

Please refer to the examples for clarifications.


Example 2:

Input: 
["FileSystem","create","create","get","create","get"]
[[],["/leet",1],["/leet/code",2],["/leet/code"],["/c/d",1],["/c"]]
Output: 
[null,true,true,2,false,-1]

Constraints:

The number of calls to the two functions is less than or equal to 10^4 in total.
2 <= path.length <= 100
1 <= value <= 10^9

#认真读题oK不？其实这么简单一个题
class FileSystem {
public:
    FileSystem() {
        //不让有重复元素，已经有了的same path 不能有，您为什么不先说呢？？？？？？
    }
    
    bool create(string path, int value) {
        if(store.count(path) != 0) return false;
        for(int i = 1; i < path.size(); ++i) {
            if(path[i] == '/') {
                if(store.count(path.substr(0, i)) == 0) return false;
            }
        }    
        store[path] = value;
        return true;
    }
    
    int get(string path) {
        if(store.count(path) == 0) return -1;
        return store[path];
    }
    unordered_map<string, long> store;
};
