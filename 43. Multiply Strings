Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.

Note: You must not use any built-in BigInteger library or convert the inputs to integer directly.

 

Example 1:

Input: num1 = "2", num2 = "3"
Output: "6"
Example 2:

Input: num1 = "123", num2 = "456"
Output: "56088"
 

Constraints:

1 <= num1.length, num2.length <= 200
num1 and num2 consist of digits only.
Both num1 and num2 do not contain any leading zero, except the number 0 itself.

# 乘法的位数 m 位 * n位 一定在 (m+n) and (m +n-1) 之间

class Solution:
    def multiply(self, num1: str, num2: str) -> str:
        n = len(num1)
        m = len(num2)
        res = [0] * (m + n)
        
        for i in range(-1, -n -1, -1):   # last index -1, -1 => -2 and -1 
            for j in range(-1, -m-1, -1):
                number = int(num1[i]) * int(num2[j])
                t1 = number %10
                res[i + j + 1] += t1
                t2 = number//10 
                res[i + j] += t2
        for i in range(len(res)-1,0,-1):
            if res[i] >= 10:
                res[i-1] += (res[i]//10)
                res[i] %= 10
        tmp = [str(x) for x in res]
        i = 0  # pay attention to this!!!! remove the zeros  eg:  "9133" "0"
        while i < len(tmp) -1 and tmp[i] == "0":
            i+= 1
            
        return "".join(tmp[i:])
