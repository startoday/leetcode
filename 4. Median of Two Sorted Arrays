There are two sorted arrays nums1 and nums2 of size m and n respectively.

Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).

You may assume nums1 and nums2 cannot be both empty.

Example 1:

nums1 = [1, 3]
nums2 = [2]

The median is 2.0
Example 2:

nums1 = [1, 2]
nums2 = [3, 4]

The median is (2 + 3)/2 = 2.5
#候选元素 (x + y + 1) / 2
#partition X + partition Y = (x + y + 1)/2
#Found: maxleftX <= minRightY &&  maxleftY <= minRightX
#else if(maxLeftX > minRightY) {
  move towards left in X
  }
#else  move towards right in X

class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        if(nums1.size() > nums2.size()) return findMedianSortedArrays(nums2, nums1);
        int x = nums1.size();
        int y = nums2.size();
        int l = 0;
        int r = x;
        while(l < r) {
            int pX = (r - l) / 2 + l;
            int pY = (x + y + 1) / 2 - pX;
            
            if(nums1[pX] < nums2[pY - 1]) {
                l = pX + 1;
            } else {
                r = pX;
            }
        }
        const int m1 = l;
        const int m2 = (x + y + 1) / 2 - l;
        
        const int c1 = max(m1 <= 0 ? INT_MIN : nums1[m1 - 1], 
                           m2 <= 0 ? INT_MIN : nums2[m2 - 1]);
 
        if ((x + y) % 2 == 1)
            return c1;    
        
        const int c2 = min(m1 >= x ? INT_MAX : nums1[m1], 
                           m2 >= y ? INT_MAX : nums2[m2]);
                
        return (c1 + c2) * 0.5;
    }
};
