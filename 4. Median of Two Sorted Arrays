There are two sorted arrays nums1 and nums2 of size m and n respectively.

Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).

You may assume nums1 and nums2 cannot be both empty.

Example 1:

nums1 = [1, 3]
nums2 = [2]

The median is 2.0
Example 2:

nums1 = [1, 2]
nums2 = [3, 4]

class Solution:
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        # half has half numbers of total, if odd number, 
        # both half will contain same numbers
        m = len(nums1)
        n = len(nums2)
        if m >n:
            return self.findMedianSortedArrays(nums2, nums1)
        half = (m + n + 1)//2
        imin = 0
        imax = m
        while imin <= imax:
            i = (imax + imin) //2
            j = half - i
            # first two half are nums1[:i] nums2[:j]
            # when I get too much i
            if i >0 and nums1[i-1] > nums2[j]:
                imax = i -1
            #need more i from nums1, always check nums1 !!!
            elif i< m and nums2[j-1] > nums1[i]:
                imin = i +1
            else: # correct place
                if i == 0:
                    left_max = nums2[j-1]
                elif j == 0:
                    left_max = nums1[i-1]
                else:
                    left_max = max(nums1[i-1],nums2[j-1])
                # when it is odd number
                if (m +n) %2 == 1:
                    return left_max
                # otherwise we are checking the right  min as well
                if i == m:
                    right_min = nums2[j]
                elif j == n:
                    right_min = nums1[i]
                else:
                    right_min = min(nums1[i],nums2[j]) 
                return (left_max + right_min)/2
        return -1
                















The median is (2 + 3)/2 = 2.5
#候选元素 (x + y + 1) / 2
#partition X + partition Y = (x + y + 1)/2
#Found: maxleftX <= minRightY &&  maxleftY <= minRightX
#else if(maxLeftX > minRightY) {
  move towards left in X
  }
#else  move towards right in X

#debug完typo
class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        if(nums1.size() > nums2.size()) return findMedianSortedArrays(nums2, nums1);
        int x = nums1.size();
        int y = nums2.size();
        int l = 0;
        int r = x;
        while(l < r) {
            int pX = (r - l) / 2 + l;
            int pY = (x + y + 1) / 2 - pX;
            
            if(nums1[pX] < nums2[pY - 1]) {
                l = pX + 1;
            } else {
                r = pX;
            }
        }
        const int m1 = l;
        const int m2 = (x + y + 1) / 2 - l;
        
        const int c1 = max(m1 <= 0 ? INT_MIN : nums1[m1 - 1], 
                           m2 <= 0 ? INT_MIN : nums2[m2 - 1]);
 
        if ((x + y) % 2 == 1)
            return c1;    
        
        const int c2 = min(m1 >= x ? INT_MAX : nums1[m1], 
                           m2 >= y ? INT_MAX : nums2[m2]);
                
        return (c1 + c2) * 0.5;
    }
};

# 之前的辣鸡解法 
class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        if(nums1.size() > nums2.size()) return findMedianSortedArrays(nums2, nums1);
        
        int x = nums1.size();
        int y = nums2.size();
        int low = 0;
        int high = x;
        
        while(low <= high) {
            int pX = (low + high) / 2;
            int pY = (x + y + 1) / 2 - pX;

            int maxLeftX = (pX == 0) ? INT_MIN : nums1[pX -1];
            int minRightX = (pX == x) ? INT_MAX : nums1[pX];
            
            int maxLeftY = (pY == 0) ? INT_MIN : nums2[pY -1];
            int minRightY = (pY == y) ? INT_MAX : nums2[pY];
            
            if(maxLeftX <= minRightY && maxLeftY <= minRightX) {
                if((x + y) %2 ==0){ //even number
                    return (1.0*(max(maxLeftX, maxLeftY) + min(minRightX, minRightY))) / 2.0;
                } else {
                    return max(maxLeftX, maxLeftY);
                }
            } else if( maxLeftX > minRightY) {
                high = pX - 1;
            } else{
                low = pX + 1;
            } 
        }
        return 0.0; 
    }
};
