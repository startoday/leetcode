Given n nodes labeled from 0 to n - 1 and a list of undirected edges (each edge is a pair of nodes), write a function to find the number of connected components in an undirected graph.

Example 1:

Input: n = 5 and edges = [[0, 1], [1, 2], [3, 4]]

     0          3
     |          |
     1 --- 2    4 

Output: 2


class Solution {
public:
    int countComponents(int n, vector<vector<int>>& edges) {
        unordered_map<int, vector<int>> nbs;
        int res = 0;
        int r = edges.size();
        if(r == 0) return n;
        int c = edges[0].size();
        if(c == 0) return n;
        vector<int> vis(n, false);
        for(auto & x : edges) {
            nbs[x[0]].push_back(x[1]);
            nbs[x[1]].push_back(x[0]);
        }
        for(int i = 0; i < n; ++i) {
            if(!vis[i]) {
                BFS(i, vis, nbs);
                res ++;
            }
        }
        return res;
    }
    
    void BFS(int i, vector<int> & vis, unordered_map<int, vector<int>> & nbs) {
        vis[i] = true;
        queue<int> q ({i});
        while(!q.empty()) {
            int temp = q.front();
            q.pop();
            for(auto & x : nbs[temp]) {
                if(!vis[x]) {
                    vis[x] = true;
                    q.push(x);
                }
            }
        }
    }
    
};
