Given a non-empty binary search tree and a target value, find k values in the BST that are closest to the target.

Note:

Given target value is a floating point.
You may assume k is always valid, that is: k â‰¤ total nodes.
You are guaranteed to have only one unique set of k values in the BST that are closest to the target.
Example:

Input: root = [4,2,5,1,3], target = 3.714286, and k = 2

    4
   / \
  2   5
 / \
1   3

Output: [4,3]
Follow up:
Assume that the BST is balanced, could you solve it in less than O(n) runtime (where n = total nodes)?

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def closestKValues(self, root: TreeNode, target: float, k: int) -> List[int]:
        res = []
        def updateCandi(v):
            heappush(res, (-abs(v - target) ,v))
            if len(res) > k:
                heappop(res)

        def helper(rt):
            if not rt:
                return 
            updateCandi(rt.val)
            helper(rt.left)
            helper(rt.right)
        helper(root)
        return [i[1] for i in res]
     
# Any K closet/smallest can use partition !!!
build the array and do the partition!
                    
                           
                
                
