Given the root of a binary tree, each node in the tree has a distinct value.

After deleting all nodes with a value in to_delete, we are left with a forest (a disjoint union of trees).

Return the roots of the trees in the remaining forest.  You may return the result in any order.

Input: root = [1,2,3,4,5,6,7], to_delete = [3,5]
Output: [[1,2,null,4],[6],[7]]

class Solution {
public:
    
        void helper(TreeNode* & root, unordered_set<int> & poi, vector<TreeNode *> & res ) {
        if(root){
            helper(root->left, poi, res);
            helper(root->right, poi, res);
            if(poi.count(root->val) == 1) {
                if(root->left) res.push_back(root->left);
                if(root->right) res.push_back(root->right);
                root = NULL;
                delete root;
            }
        }
    }
    vector<TreeNode*> delNodes(TreeNode* root, vector<int>& to_delete) {
        unordered_set<int> poi (to_delete.begin(), to_delete.end());
        vector<TreeNode *> res;
        helper(root, poi, res);
        if (root) res.push_back(root);
        return res;
    }
};


# 另一种 有return的
TreeNode* delNodes(TreeNode* root, unordered_set<int>& to_del, vector<TreeNode*>& res) {
  if (root != nullptr) {
    root->left = delNodes(root->left, to_del, res);
    root->right = delNodes(root->right, to_del, res);
    if (to_del.find(root->val) != end(to_del)) {
      if (root->left != nullptr) res.push_back(root->left);
      if (root->right != nullptr) res.push_back(root->right);
      root = nullptr;
    }
  }
  return root;
}
vector<TreeNode*> delNodes(TreeNode* root, vector<int>& to_del) {
  vector<TreeNode*> res;
  root = delNodes(root, unordered_set<int>() = unordered_set<int>(begin(to_del), end(to_del)), res);
  if (root != nullptr) res.push_back(root);
  return res;
}
