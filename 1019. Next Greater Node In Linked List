We are given a linked list with head as the first node.  Let's number the nodes in the list: node_1, node_2, node_3, ... etc.

Each node may have a next larger value: for node_i, next_larger(node_i) is the node_j.val such that j > i, node_j.val > node_i.val, and j is the smallest possible choice.  If such a j does not exist, the next larger value is 0.

Return an array of integers answer, where answer[i] = next_larger(node_{i+1}).

Note that in the example inputs (not outputs) below, arrays such as [2,1,5] represent the serialization of a linked list with a head node value of 2, second node value of 1, and third node value of 5.

 

Example 1:

Input: [2,1,5]
Output: [5,5,0]
Example 2:

Input: [2,7,4,3,5]
Output: [7,0,5,5,0]
#next greater 系列
#想到的猥琐做法是直接把list 存在 vector里就和之前的题一样了，还是可以用单调栈来解决
class Solution {
public:
    vector<int> nextLargerNodes(ListNode* head) {
        vector<int> st,  res;
        if(!head) return res;
        while(head) {
            res.push_back(head->val);
            head = head->next;
        }
        for(int i = 0; i < res.size(); ++i) {
            while(!st.empty() && res[st.back()] <res[i]) {
                res[st.back()] = res[i];
                st.pop_back();
            }
            st.push_back(i);
        }
        while(!st.empty()) {
                res[st.back()] = 0;
                st.pop_back();
            }
        return res;
    }
};
