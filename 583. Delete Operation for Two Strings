Given two words word1 and word2, find the minimum number of steps required to make word1 and word2 the same, where in each step you can delete one character in either string.

Example 1:
Input: "sea", "eat"
Output: 2
Explanation: You need one step to make "sea" to "ea" and another step to make "eat" to "ea".
Note:
The length of given words won't exceed 500.
Characters in given words can only be lower-case letters.
#把一个string变成另一个string， 拢共分几步？
#和edit distance相比少了replace的选项
class Solution {
public:
    int minDistance(string word1, string word2) {
        //和edit distance 类似，没有replace这个选项
        int w1 = word1.size();  //col num
        int w2 = word2.size();  //row num
        //res[i][j] 表示word2 的 第i位前和 word 1的第j位前面一直所需的最小步数
        vector<vector<int>> res (w2+1, vector<int> (w1+1));
        for(int i = 0; i <= w1; ++i) {
            res[0][i] = i;
        }
        for(int i = 0; i <= w2; ++i) {
            res[i][0] = i;
        }
        for(int i = 1; i <= w2; ++i) {
            for(int j = 1; j <= w1; ++j) {
                //注意word1 是j， word2是i 别写反了！！！！
                if(word1[j-1] == word2[i-1]) res[i][j] = res[i-1][j-1];
                else {
                    res[i][j] = 1 + min(res[i-1][j], res[i][j-1]);
                }
            }
        }
        
        return res[w2][w1];
    }
};

class Solution {
public:
    int minDistance(string word1, string word2) {
        //要变成一样的，找到现有的最长公共子序列 *2 （ 不动的地儿）
        //求word1， word2的和再减去这个不用动的值应该就是了
        int w1 = word1.size();
        int w2 = word2.size();
        vector<vector<int>> res(w1+1, vector<int> (w2+1));
        for(int i = 0; i <= w1; ++i) {
            res[i][0] = 0;
        }
        for(int j = 0; j <= w2; ++j) {
            res[0][j] = 0;
        }
        for(int i = 1; i <= w1; ++i){
            for(int j = 1; j <= w2; ++j) {
                if(word1[i-1] == word2[j-1]) res[i][j] = res[i-1][j-1] + 1;
                else res[i][j] = max(res[i-1][j],res[i][j-1]);
            }
        }
        return w1 + w2 - 2*res[w1][w2];
    }
};

