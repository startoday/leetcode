Given two strings s1, s2, find the lowest ASCII sum of deleted characters to make two strings equal.

Example 1:
Input: s1 = "sea", s2 = "eat"
Output: 231
Explanation: Deleting "s" from "sea" adds the ASCII value of "s" (115) to the sum.
Deleting "t" from "eat" adds 116 to the sum.
At the end, both strings are equal, and 115 + 116 = 231 is the minimum sum possible to achieve this.

#俩string 求和谐极值当然考虑dp 相等时 取i-1，j-1， 不等时 选i 或者选j两种
class Solution {
public:
    int minimumDeleteSum(string s1, string s2) {
        int size1 = s1.size();
        int size2 = s2.size();
        vector<vector<int>> dp (size1 + 1, vector<int> (size2+1));
        dp[0][0] = 0;
        for(int i = 1; i <= size1; ++i) {
            dp[i][0] = dp[i-1][0] + s1[i-1];
        }
        for(int j = 1; j <= size2; ++j) {
            dp[0][j] = dp[0][j-1] + s2[j-1];
        }
        for(int i = 1; i <= size1; ++i) {
            for(int j = 1; j <= size2; ++j) {
                if(s1[i-1] == s2[j-1])  dp[i][j] = dp[i-1][j-1];
                else dp[i][j] = min(dp[i][j-1] + s2[j-1], dp[i-1][j] + s1[i-1]);
            }
        }
       return dp[size1][size2]; 
    }
};
