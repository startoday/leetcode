Given a string S, find the number of different non-empty palindromic subsequences in S, and return that number modulo 10^9 + 7.

A subsequence of a string S is obtained by deleting 0 or more characters from S.

A sequence is palindromic if it is equal to the sequence reversed.

Two sequences A_1, A_2, ... and B_1, B_2, ... are different if there is some i for which A_i != B_i.

Example 1:
Input: 
S = 'bccb'
Output: 6
Explanation: 
The 6 different non-empty palindromic subsequences are 'b', 'c', 'bb', 'cc', 'bcb', 'bccb'.
Note that 'bcb' is counted only once, even though it occurs twice.
Example 2:
Input: 
S = 'abcdabcdabcdabcdabcdabcdabcdabcddcbadcbadcbadcbadcbadcbadcbadcba'
Output: 104860361
Explanation: 
There are 3104860382 different non-empty palindromic subsequences, which is 104860361 modulo 10^9 + 7.

#求 回文子序列的 总个数， 因为结果很大，还是要 10^9 + 7
#字母只有abcd 而且 需要去重
#if(首字母 = 尾字母） ： 2 * 中间的解个数(原中间解 + a夹心中间a）  + 2 （首尾的两个 a, aa) 
if(s[i] != s[j]） f[i + 1][j] + f[i][j - 1]- f[i + 1][j - 1](重复算了两次）
#中间有和两侧两个字母 重复字母的case ：1.（中间有一个）  "bcbcb" (除了两侧b，中间有一个b） ： 2*f("bcb") - 1
2.（中间有至少两个）  "b bcab b" (除了两侧b，中间至少有两个b） ： 2*f("bcab") - f("ca")
//where this two inner b are the first range [b ascasdsa[b dabdsbbsda b] sadsaewwb]
base case： 1字母： 1   无字母：0

#这种题可以从长度小的开始填充，这样里面的肯定是有的； top down 有的时候比bottom up（所有的都会计算）快，有的不需要计算


#top down #注意mod 防止overflow 和传地址避免超时
class Solution {
public:
    int countPalindromicSubsequences(const string S) {
        int n = S.size();
        dp =vector<vector<int>> (n, vector<int> (n, 0));
        return helper(S, 0, n - 1);
    }
    long helper(const string & S, int i, int j) {  //重点在于此处的string也要传address，copy就跪了！！
        if(i > j) return 0;
        if(i == j) return 1;
        if(dp[i][j] > 0) return dp[i][j];
        long temp = 0;
        if(S[i] == S[j]) {
            int m = i + 1;
            int k = j - 1;
            while(m <= k && S[m] != S[i]) ++m;
            while(m <= k && S[k] != S[i]) --k;
            if(m > k) {
                temp = 2 * helper(S, i + 1,j - 1) + 2; 
            } else if ( m == k) {
                temp = 2 * helper(S, i + 1,j - 1) + 1; 
            } else {
                temp = 2 * helper(S, i + 1,j - 1) -  helper(S,  m + 1, k - 1); 
            }
            
        } else {
          temp = helper(S,  i,j - 1)  + helper(S, i + 1,j) -
               helper(S,  i + 1,j - 1); 
        }
        return dp[i][j] = (temp + mod)% mod; //这种方法就会避免负数mod 的问题，而且用 int 就够
    }
    private:
    vector<vector<int>> dp;
    const int mod = 1e9 + 7;
};
