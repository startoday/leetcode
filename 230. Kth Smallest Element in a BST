Given a binary search tree, write a function kthSmallest to find the kth smallest element in it.

Note: 
You may assume k is always valid, 1 ≤ k ≤ BST's total elements.

Example 1:

Input: root = [3,1,4,null,2], k = 1
   3
  / \
 1   4
  \
   2
Output: 1
Example 2:

Input: root = [5,3,6,2,4,null,null,1], k = 3
       5
      / \
     3   6
    / \
   2   4
  /
 1
Output: 3
Follow up:
What if the BST is modified (insert/delete operations) 
often and you need to find the kth smallest frequently? How would you optimize the kthSmallest routine?

class Solution {
public:
    int kthSmallest(TreeNode* root, int k) {
        int res = 0;
        helper(root, k, res);
        return res;
    }
    void helper(TreeNode* root, int & k, int & res) {
        if(!root) return;
        helper(root->left, k, res); 
        if(k == 1) res = root->val;
        k--;
        helper(root->right, k, res);
    }
};


#inorder traversal! 注意一定要是global val 不然root 永远会被return
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def __init__(self):
        self.res = None
        self.kk =  None
    def kthSmallest(self, root: Optional[TreeNode], k: int) -> int:
        self.kk = k
        def helper(rt):
            if not rt:
                return
            helper(rt.left)
            if self.kk==1:
                self.res = rt.val
            self.kk-=1
            helper(rt.right)
        helper(root)
        return self.res
                
        
