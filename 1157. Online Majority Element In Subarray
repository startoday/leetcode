Implementing the class MajorityChecker, which has the following API:

MajorityChecker(int[] arr) constructs an instance of MajorityChecker with the given array arr;
int query(int left, int right, int threshold) has arguments such that:
0 <= left <= right < arr.length representing a subarray of arr;
2 * threshold > right - left + 1, ie. the threshold is always a strict majority of the length of the subarray
Each query(...) returns the element in arr[left], arr[left+1], ..., arr[right] that occurs at least threshold times, or -1 if no such element exists.

 

Example:

MajorityChecker majorityChecker = new MajorityChecker([1,1,2,2,1,1]);
majorityChecker.query(0,5,4); // returns 1
majorityChecker.query(0,3,3); // returns -1
majorityChecker.query(2,3,2); // returns 2
 

Constraints:

1 <= arr.length <= 20000
1 <= arr[i] <= 20000
For each query, 0 <= left <= right < len(arr)
# For each query, 2 * threshold > right - left + 1  --- you can only have one res
The number of queries is at most 10000

#这道题， threshold 只可能是一个出现次数 大于 区间长度一半的 （题中关键）可以用segment tree
#或者 random pick， 因为频率大于1/2 在多次提取的时候 找不到的概率微乎其微，每次计算在给定区间的频率，测这个数是不是就行
#关键还是计算给定区间频率这事， 可以用一个hashmap 存所有出现的x 的给定位置， 通过upperbound 和lowerbound（lgN） 求有多少个数在（通过index 相减 --O（1））

class MajorityChecker {
public:
    MajorityChecker(vector<int>& arr) {
        for(int i = 0; i < arr.size(); ++i) {
            pos[arr[i]].push_back(i);
            a.push_back(arr[i]);
        }  
    }
    
    int query(int left, int right, int threshold) {
        for(int k = 0; k < 100; ++k ) {
            int ele = a[rand() % (right - left + 1) + left];
            if(upper_bound(pos[ele].begin(), pos[ele].end(),right) -  lower_bound(pos[ele].begin(), pos[ele].end(),left) >= threshold) return ele;
        } 
        return -1;
    }
    private:
        unordered_map<int, vector<int>> pos;
        vector<int> a;
};
