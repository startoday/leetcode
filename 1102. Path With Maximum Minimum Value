Given a matrix of integers A with R rows and C columns, 
find the maximum score of a path starting at [0,0] and ending at [R-1,C-1].

The score of a path is the minimum value in that path.  

A path moves some number of times from one visited cell to any neighbouring unvisited cell in one of the 4 cardinal directions (north, east, west, south).
#不太能加图。。总之，要从左上角走到右下角，使一路上的和最大，上下左右四个方向都可以走
#。。。。。。这道题是问你最大和的那一条路里面的最小值是多少。。。
#认真读题。。每次找最大的没走过的路，记录路上的最小值即可，每次选择最大的，能走到结尾就行，一路上的最小值

#一个紧凑的写法 C++高级写法大佬的写法。。
    int maximumMinimumPath(vector<vector<int>>& A) {
        static constexpr int DIRS[][2] {{0,1},{1,0},{0,-1},{-1,0}};
        priority_queue<tuple<int,int,int>> pq;
        pq.emplace(A[0][0], 0, 0);
        int n = A.size(), m = A[0].size(), maxscore = A[0][0];
        A[0][0] = -1; // visited
        while(!pq.empty()) {
            auto [a, i, j] = pq.top();
            pq.pop();
            maxscore = min(maxscore, a);
            if(i == n - 1 && j == m - 1)
                return maxscore;
            for(const auto& d : DIRS)
                if(int newi = d[0] + i, newj = d[1] + j;
                   newi >= 0 && newi < n && newj >= 0 && newj < m && A[newi][newj]>=0){
                    pq.emplace(A[newi][newj], newi, newj);
                    A[newi][newj] = -1;
                }
        }
        return -1; // shouldn't get here
    }
# can be solved in 3 ways (1. DFS + Binary Search; 2. PQ; 3. Union ) with  same complexity of O(n * m * log(n)).

2.
class Solution {
public:
    int maximumMinimumPath(vector<vector<int>>& A) {
        vector<vector<int>> dir {{0,1},{1,0},{0,-1},{-1,0}};
        // value < row, col> 
        priority_queue<pair<int, pair<int,int>>> pq;
        pq.push({A[0][0], {0, 0}});
        int r = A.size();
        int c = A[0].size();
        int res = A[0][0];
        A[0][0] = -1; //set it as visited
        while(!pq.empty()) {
            auto m = pq.top();
            pq.pop();
            res = min(res, m.first);
            if(m.second.first == r-1 && m.second.second == c-1) return res;
            for(auto d: dir) {
                int i = m.second.first + d[0];
                int j = m.second.second + d[1];
                if(i >= 0 && i < r && j >= 0 && j < c && A[i][j] != -1) { //check 要放在最后，防止越界
                    pq.push({A[i][j], {i,j}});
                    A[i][j] = -1;
                } 
            }
        }
        return -1; // shouldn't get here
    }
};

3. union set: 是最终令起始点和最终点在同一个set里即可return 当前长度，sort by edge
class Solution {
	// union find stuctures
    vector<int> uf;
    int find(int id) {
        while (id != uf[id]) id = uf[id] = uf[uf[id]];
        return id;
    }
    void uni(int i, int j) {
        i = find(i), j = find(j);
        uf[j] = i;
    }
public:
    int maximumMinimumPath(vector<vector<int>>& A) {
        int n = A.size(), m = A[0].size();
        vector<vector<int>> ids;
        vector<vector<int>> dirs{{0,1},{0,-1},{1,0},{-1,0}};
        uf = vector<int>(n*m, 0);
        vector<int> visited(n*m, 0);
        auto cmp = [&A](const vector<int>& id1, const vector<int>& id2) {
            return A[id1[0]][id1[1]] > A[id2[0]][id2[1]];
        };
		
        // initialize uf and sort the cells according to their values 
        for (int i = 0; i < n; ++i) 
            for (int j = 0; j < m; ++j) 
                uf[i*m+j] = i*m+j,
                ids.push_back({i, j});
        sort(ids.begin(), ids.end(), cmp);
        
		// visit the cells in desc order
        for (auto& id : ids) {
            int i = id[0], j = id[1], k = i*m+j;
            visited[k] = 1;
            for (auto& d : dirs) {
                int ii = i+d[0], jj = j+d[1], kk = ii*m+jj;
                if (ii>=0 && ii<n && jj>=0 && jj<m && visited[kk])
                    uni(k, kk);
            }
            if (find(0) == find (n*m-1)) return A[i][j];
        }
        return 0;
    }
};

# ref: https://leetcode.com/problems/path-with-maximum-minimum-value/discuss/327616/3-Solution-Priority-Queue-DFS-%2B-Binary-Search-Union-Find
