Given a binary tree, return the tilt of the whole tree.

The tilt of a tree node is defined as the absolute difference between the sum of all left subtree node values and the sum of all right subtree node values. Null node has tilt 0.

The tilt of the whole tree is defined as the sum of all nodes' tilt.

Example:
Input: 
         1
       /   \
      2     3
Output: 1
Explanation: 
Tilt of node 2 : 0
Tilt of node 3 : 0
Tilt of node 1 : |2-3| = 1
Tilt of binary tree : 0 + 0 + 1 = 1

#题目有点难懂2333居然读懂了！2333，其实是算左右的的差值 求和
class Solution {
public:
    int sum = 0;
    int findTilt(TreeNode* root) {
        helper(root);
        return sum;
    }
    //return total
   int helper(TreeNode *root) {
        if(!root) return 0;
        int left = helper(root ->left);
        int right = helper(root ->right);
        sum += abs(left - right);
        return root ->val +left + right;
    }
};
