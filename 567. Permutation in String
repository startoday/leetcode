Given two strings s1 and s2, write a function to return true if s2 contains the permutation of s1. In other words, one of the first string's permutations is the substring of the second string.

 

Example 1:

Input: s1 = "ab" s2 = "eidbaooo"
Output: True
Explanation: s2 contains one permutation of s1 ("ba").
Example 2:

Input:s1= "ab" s2 = "eidboaoo"
Output: False
 

Constraints:

The input strings only contain lower case letters.
The length of both given strings is in range [1, 10,000].

# instead of comparing all 26 letters(even it is still O(1)m we can just maintain a count, for equal number; using 2 arrays to check the count number 
# return True when count == 26

class Solution:
    def checkInclusion(self, s1: str, s2: str) -> bool:
        #sliding window + ct2
        if len(s1) > len(s2):
            return False
        c1 = Counter(s1)
        c2 = Counter(s2[:len(s1)])
        if c1 == c2:
            return True
        i = 0
        j = len(s1)
        while j < len(s2):
            c2[s2[j]] += 1
            c2[s2[i]] -= 1
            if c2[s2[i]] == 0:
                del c2[s2[i]]
            if c1 == c2:
                return True
            j += 1
            i += 1
        return False
