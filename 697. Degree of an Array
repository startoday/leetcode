Given a non-empty array of non-negative integers nums, the degree of this array is defined as the maximum frequency of any one of its elements.

Your task is to find the smallest possible length of a (contiguous) subarray of nums, that has the same degree as nums.

 

Example 1:

Input: nums = [1,2,2,3,1]
Output: 2
Explanation: 
The input array has a degree of 2 because both elements 1 and 2 appear twice.
Of the subarrays that have the same degree:
[1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2]
The shortest length is 2. So return 2.
Example 2:

Input: nums = [1,2,2,3,1,4,2]
Output: 6
Explanation: 
The degree is 3 because the element 2 is repeated 3 times.
So [2,2,3,1,4,2] is the shortest subarray, therefore returning 6.

#审题！！！问的是最短的啊！！！
class Solution:
    def findShortestSubArray(self, nums: List[int]) -> int:
        map = {}
        r = len(nums)
        highest = 0
        for i in range(len(nums)):
            if nums[i] not in map:
                #freq, left bound, right bound
                map[nums[i]] = (1,i,i)
            else:
                pre = map[nums[i]]
                map[nums[i]] = (pre[0]+1, pre[1], i)
            #先升级，再算数
            if map[nums[i]][0] > highest:
                highest = map[nums[i]][0]
                r = i - map[nums[i]][1] +1
            elif map[nums[i]][0] == highest:
                r = min(r, i - map[nums[i]][1] +1)
        return r
