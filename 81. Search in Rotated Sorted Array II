Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., [0,0,1,2,2,5,6] might become [2,5,6,0,0,1,2]).

You are given a target value to search. If found in the array return true, otherwise return false.

Example 1:

Input: nums = [2,5,6,0,0,1,2], target = 0
Output: true
Example 2:

Input: nums = [2,5,6,0,0,1,2], target = 3
Output: false
Follow up:

This is a follow up problem to Search in Rotated Sorted Array, where nums may contain duplicates.
Would this affect the run-time complexity? How and why?
class Solution:
    def search(self, nums: List[int], target: int) -> bool:
        if len(nums) == 0:
            return False
        l = 0
        r = len(nums) -1
        while l <= r:
            m = (r+l) //2
            if nums[m] == target or nums[l] == target or nums[r] == target:
                return True
            while  l < m and nums[l] == nums[m]:
                l+=1  # [1,3,1,1,1] need this to make sure the left part is sorted
                # 1,3,1 is not OK, but 3 1 is 
            if nums[m] >= nums[l]:
                if target < nums[m] and target > nums[l]:
                    r = m -1
                else:
                    l = m + 1
            else:
                if target < nums[r] and target > nums[m]:
                    l = m +1
                else:
                    r = m -1

        return False
        
        
        
# or, my old way is atucally fine!
  def search(self, nums: List[int], target: int) -> bool:
      if len(nums) == 0:
          return False
      l = 0
      r = len(nums) -1
      while l + 1 < r:
          m = (r+l) //2
          if nums[m] == target or nums[l] == target or nums[r] == target:
              return True
          while  l < m and nums[l] == nums[m]:
              l+=1  # [1,3,1,1,1] need this to make sure the left part is sorted
              # 1,3,1 is not OK, but 3 1 is 
          if nums[m] >= nums[l]:
              if target < nums[m] and target > nums[l]:
                  r = m 
              else:
                  l = m 
          else:
              if target < nums[r] and target > nums[m]:
                  l = m 
              else:
                  r = m 
      if nums[l] == target or nums[r] == target:
          return True
      return False
