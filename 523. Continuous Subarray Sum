Given a list of non-negative numbers and a target integer k, write a function to check if the array has a continuous subarray of size at least 2 that sums up to a multiple of k, that is, sums up to n*k where n is also an integer.

 

Example 1:

Input: [23, 2, 4, 6, 7],  k=6
Output: True
Explanation: Because [2, 4] is a continuous subarray of size 2 and sums up to 6.
Example 2:

Input: [23, 2, 6, 4, 7],  k=6
Output: True
Explanation: Because [23, 2, 6, 4, 7] is an continuous subarray of size 5 and sums up to 42.
 

Constraints:

The length of the array won't exceed 10,000.
You may assume the sum of all the numbers is in the range of a signed 32-bit integer.

# when the difference of two presum is 0, it will be able to divide k 
# we should use the mod number for presum
class Solution:
    def checkSubarraySum(self, nums: List[int], k: int) -> bool:
        dic = {}
        s = 0
        dic[0] = -1 # at least 2 that sums up to a multiple of k
        for i in range(len(nums)):
            s += nums[i]
            if k != 0:
                s %= k
            if s in dic:
                if i - dic[s] > 1: # pay attention. we want at least two numbers
                    return True
            else:  # pay attention! we only store the first apperance!
                dic[s] = i
        return False
            
