Given a non-empty binary search tree and a target value, find the value in the BST that is closest to the target.

Note:

Given target value is a floating point.
You are guaranteed to have only one unique value in the BST that is closest to the target.
Example:

Input: root = [4,2,5,1,3], target = 3.714286

    4
   / \
  2   5
 / \
1   3

Output: 4

#给个bst找与target最接近的val，保证有解， 注意res不能初始化为 INT——MAX！！没准差值就是下来就是INT_MAX小呢。。。

class Solution {
public:
    int closestValue(TreeNode* root, double target) {
        if(!root) return -1;
        long res = root -> val;
        helper(root, target, res);
        return res;
    }
    void helper(TreeNode* root, const double & t, long & res) {
        if(!root) return;
        if(root->val >= t) {
            if(abs(res - t) >= abs(root->val - t)) res = root->val;
            helper(root->left, t, res);
        } 
        if(root->val < t) {
            if(abs(res - t) >= abs(root->val - t)) res = root->val;
            helper(root->right, t, res);
        }
    }
};
