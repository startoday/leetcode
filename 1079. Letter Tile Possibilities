You have a set of tiles, where each tile has one letter tiles[i] printed on it.  
Return the number of possible non-empty sequences of letters you can make.

Example 1:

Input: "AAB"
Output: 8
Explanation: The possible sequences are "A", "B", "AA", "AB", "BA", "AAB", "ABA", "BAA".
Example 2:

Input: "AAABBC"
Output: 188
 
Note:

1 <= tiles.length <= 7
tiles consists of uppercase English letters.
#Ok，经过这两天学习combination（subset） 和 permutation，这就是一道这种题～对不同size做permutation（backtrack）

class Solution {
public:
    int numTilePossibilities(string tiles) {
        sort(tiles.begin(),tiles.end());
        int maxS = tiles.size();
        int res = 0, st = 0;
        for(int i = 1; i <= maxS; ++i) {
            helper(tiles, i, st, res);
        }
        return res;
    }
    void helper(string s, int len, int st, int & res) {
        if(st == len) {
            ++res;
            return;
        }
        for(int i = st; i < s.size(); ++i) {
            if(i != st && s[i] == s[st]) continue;
            swap(s[i], s[st]);
            helper(s, len, st + 1, res);
        }
    }
    
};

