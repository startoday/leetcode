Given a string s and a string t, check if s is subsequence of t.

You may assume that there is only lower case English letters in both s and t. t is potentially a very long (length ~= 500,000) string, and s is a short string (<=100).

A subsequence of a string is a new string which is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, "ace" is a subsequence of "abcde" while "aec" is not).

Example 1:
s = "abc", t = "ahbgdc"

Return true.

Example 2:
s = "axc", t = "ahbgdc"

Return false.

class Solution:
    def isSubsequence(self, s: str, t: str) -> bool:
        if len(s) == 0:
            return True
        if len(t) == 0:
            return False
        i = 0
        j = 0
        while j < len(t):
            if t[j] == s[i]:
                i += 1
                if i == len(s):
                    return True
            j += 1
        return False



#这道题是medium 而longest word 是easy？？
#暴力解也beat 92%
class Solution {
public:
    bool isSubsequence(string s, string t) {
        int size = t.size();        
        int pos = 0;
        int end = s.size();
        if(end == 0) return true;
        if(size == 0) return false;
        for(int i = 0; i < size; ++i) {
            if(t[i] != s[pos]) continue;
            else {
                pos ++;
                if(pos == end) return true;
            }
        }
        return false;
    }
};

#follow up是有多个S，一个T怎么做？ 把T的每个字母对应位置记录一下再找
    bool isSubsequence(unordered_map<char, vector<int>> &pos, string &t) {
        int size = t.size(); 
        int spot = -1;
        for(int i = 0; i < size; ++i) {
            if(!pos.count(t[i])) return false;
            else {
                int num = pos[t[i]].size();
                if(pos[t[i]].back() <= spot) return false;
                else {
                    for(int j = 0; j < num; ++j) {
                        if(pos[t[i]][j] > spot) {
                            spot = pos[t[i]][j];
                            break;
                        }
                    }
                }

            }
        }
        return true;
    }
