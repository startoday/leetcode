##给一颗二叉树，返回中序遍历的各个节点，（无NULL）

# travese recursive 做法
class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int>res;
        inOrder(root, res);
        return res;
    }
    
    void inOrder(TreeNode* root, vector<int> & res){
        if(root == NULL) return;
        inOrder(root->left, res);
        res.push_back(root->val);
        inOrder(root->right, res);
    }
};


#divide and conquer recursion 做法
class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int>res;
        if(root == NULL ) return res;
        
        vector<int> left = inorderTraversal(root->left);
        vector<int> right = inorderTraversal(root->right);
        
        res.insert(res.end(), left.begin(), left.end());
        res.push_back(root->val);
        res.insert(res.end(), right.begin(),right.end());
        
        return res;
    }
};

#iteratively method : 和 preoder相似， 因为 左 根 右 所以先加左节点进入stack 直到走到底  开始（从stack上提取及pop）print/add 当前点， 之后
把cur指向右儿子
class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int>res;
        if(root == NULL ) return res;
        
        stack<TreeNode*> nodeStack;
        TreeNode* cur = root;
        while(cur||!nodeStack.empty()){
            if(cur){
                nodeStack.push(cur);
                cur = cur->left;
            } else {
                cur = nodeStack.top();
                res.push_back(cur->val);
                nodeStack.pop();
                cur = cur->right;
            }
        }
        return res;
    }
};


class Solution:
    def inorderTraversal(self, root: TreeNode) -> List[int]:
        if not root:
            return None
        res = []
        st = []
        while root or st:
            while root:
                st.append(root)
                root = root.left
            root = st.pop()
            res.append(root.val)
            root = root.right
        return res
