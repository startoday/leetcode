Given a list of unique words, return all the pairs of the distinct indices (i, j) in the given list, so that the concatenation of the two words words[i] + words[j] is a palindrome.

 

Example 1:

Input: words = ["abcd","dcba","lls","s","sssll"]
Output: [[0,1],[1,0],[3,2],[2,4]]
Explanation: The palindromes are ["dcbaabcd","abcddcba","slls","llssssll"]
Example 2:

Input: words = ["bat","tab","cat"]
Output: [[0,1],[1,0]]
Explanation: The palindromes are ["battab","tabbat"]
Example 3:

Input: words = ["a",""]
Output: [[0,1],[1,0]]
 

Constraints:

1 <= words.length <= 5000
0 <= words[i] <= 300
words[i] consists of lower-case English letters.


class Solution:
    def palindromePairs(self, words: List[str]) -> List[List[int]]:
        def isPali(s):
            return s == s[::-1]
        # prefix is pali, then check if what left's revers is in w
        w = {word : i for i, word in enumerate(words)}
        res = []
        for i in range(len(words)):
            for j in range(len(words[i]) + 1): # need suffix is empty as well 
                prefix = words[i][:j]
                suffix = words[i][j:]
                if isPali(prefix) and suffix[::-1] in w and w[suffix[::-1]] != i :
                    res.append([w[suffix[::-1]], i])
                if j != len(words[i]) and isPali(suffix) and prefix[::-1] in w and w[prefix[::-1]] != i:  # pay attention, "" whole is the same as whole, "", so we only want one of it
                    res.append([i, w[prefix[::-1]]])
        return res
