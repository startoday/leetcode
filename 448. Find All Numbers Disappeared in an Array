#给一个数组，数组里的数的大小只有1-n（提示我们可以针对坐标操作），有的数存在两次，有的一次，找出那些缺少的数
#要求也是难点，不能用额外空间并且需要是 O（N）
Given an array of integers where 1 ≤ a[i] ≤ n (n = size of array), some elements appear twice and others appear once.

Find all the elements of [1, n] inclusive that do not appear in this array.

Could you do it without extra space and in O(n) runtime? You may assume the returned list does not count as extra space.

Example:

Input:
[4,3,2,7,8,2,3,1]

Output:
[5,6]


#看题就是要操作index，可以想像 如果根据index来modify 比如，这行数缺少5，0-based的那么第4个就永远不会被modify到，没被modify的数的index+1就是缺少的数
#这个modify要可以区分mo没modi的 还得不影响后续操作。。。修改成负值，到时候回取绝对值就还能实现index的奔跑！

class Solution {
public:
    vector<int> findDisappearedNumbers(vector<int>& nums) {
        vector<int> res;
        int size = nums.size();
        for(int i = 0; i < size; i++) {
            int index = abs(nums[i])-1;
            if(nums[index] > 0) nums[index] = -nums[index];
        }
        for(int i = 0; i < size; i++) {
            if(nums[i] > 0) res.push_back(i+1); 
        }
        return res;
    }
};
