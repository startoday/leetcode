Given the root of a binary tree, the depth of each node is the shortest distance to the root.

Return the smallest subtree such that it contains all the deepest nodes in the original tree.

A node is called the deepest if it has the largest depth possible among any node in the entire tree.

The subtree of a node is tree consisting of that node, plus the set of all descendants of that node.

Input: root = [0,1,3,null,2]
Output: [2]
Explanation: The deepest node in the tree is 2, the valid subtrees are the subtrees of nodes 2, 1 and 0 but the subtree of node 2 is the smallest.
 

Constraints:

The number of nodes in the tree will be in the range [1, 500].
0 <= Node.val <= 500
The values of the nodes in the tree are unique.

# first I can learn somthing called mark each tree node's depth from top to bottom
#!!!!Ask you to return the smallest sub tree
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def subtreeWithAllDeepest(self, root: TreeNode) -> TreeNode:
        m = {None: -1}
        self.h = 0
        def dfs(rt, par = None):
            if rt:
                m[rt] = m[par] +1
                self.h = max(self.h, m[rt])
                dfs(rt.left, rt)
                dfs(rt.right, rt)
        dfs(root)
        def helper(rt):
            if not rt or m[rt] == self.h:
                return rt
            l = helper(rt.left)
            r = helper(rt.right)
            if not r:
                return l
            if not l :
                return r
            return rt
        return helper(root)
 # Another smart idea is record the distance from farthest; if one child's dis is larger, it contains; if two are the same, return root
 
 class Solution:
    def subtreeWithAllDeepest(self, root: TreeNode) -> TreeNode:
        # node, dis
        def helper(rt):
            if not rt:
                return rt, 0
            l = helper(rt.left)
            r = helper(rt.right)
            if l[1] > r[1]:
                return l[0], l[1] +1
            if l[1] < r[1]:
                return r[0], r[1] +1
            return rt, l[1] +1
        return helper(root)[0]
