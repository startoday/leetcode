Given a singly linked list, group all odd nodes together followed by the even nodes. 
#Please note here we are talking about the node number and not the value in the nodes.

#You should try to do it in place. 
#The program should run in O(1) space complexity and O(nodes) time complexity.

Example 1:

Input: 1->2->3->4->5->NULL
Output: 1->3->5->2->4->NULL
Example 2:

Input: 2->1->3->5->6->4->7->NULL
Output: 2->3->6->7->1->5->4->NULL

#odd位置的在前面，even位置的在后面

#找到第一个奇数的时候往前插，然后往下走两步, 然后要注意要维持原有的顺序 所以preNode也要走
class Solution {
public:
    ListNode* oddEvenList(ListNode* head) {
        if(!head ||!head->next || !head->next->next) return head;
        ListNode * cur = head ->next;
        ListNode * pre = head;
        while (cur->next) {
            ListNode * temp = cur ->next;
            cur->next = temp->next;
            temp->next = pre->next;
            pre->next = temp;
            
            if(cur->next) {
                cur = cur ->next;
                pre = pre ->next;
            } else break;
        }
        return head;
    }
};
