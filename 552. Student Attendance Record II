Given a positive integer n, return the number of all possible attendance records with length n, which will be regarded as rewardable. The answer may be very large, return it after mod 109 + 7.

A student attendance record is a string that only contains the following three characters:

'A' : Absent.
'L' : Late.
'P' : Present.
A record is regarded as rewardable if it doesn't contain more than one 'A' (absent) or more than two continuous 'L' (late).

Example 1:
Input: n = 2
Output: 8 
Explanation:
There are 8 records with length 2 will be regarded as rewardable:
"PP" , "AP", "PA", "LP", "PL", "AL", "LA", "LL"
Only "AA" won't be regarded as rewardable owing to more than one absent times. 
Note: The value of n won't exceed 100,000.

#不可以有大于1个A或者连续两个L的
#其实是paint house 问题。。看一下这个ref simplify 太厉害了。。求所有结果的时候一定要几个可能相加
#https://leetcode.com/problems/student-attendance-record-ii/discuss/101643/Share-my-O(n)-C%2B%2B-DP-solution-with-thinking-process-and-explanation
#The result need to be returned after mod 10⁹ + 7 -- we need to do mod for every middle result, and for every 2-middle-result-addition.
#用int的话每加一步都要取余，不然会overflow int的，其实用long 也可
Time O(n) space O(n)
class Solution {
public:
    int checkRecord(int n) {
        int m = 1e9 +7;
        vector<long> A (n + 1, 0);
        vector<long> L (n + 1, 0);
        vector<long> P (n + 1, 0);
        if(n == 1) return 3;
        if(n == 2) return 8;
        P[1] = 1;
        L[1] = 1;
        L[2] = 3;
        A[1] = 1;
        A[2] = 2;
        A[3] = 4;
        
        for(int i = 2; i <= n; ++i) {
            A[i - 1] %= m;
            P[i - 1] %= m;
            L[i - 1] %= m;
           
            P[i] = (A[i - 1] + P[i - 1] + L[i - 1] ) %m;
            if ( i > 3 ) A[i] = (A[i - 1] + A[i - 2] + A[i - 3]) %m;
            if ( i > 2 ) L[i] = (A[i - 1] + P[i - 1] + A[i - 2]+ P[i - 2]) %m; 
        }
        
        return (P[n] + A[n] + L[n]) % m;
    }
};


#因为最后只是求所有结果数，可以简化为 O（1） space
#remeber the last two chars, smart!! 
class Solution {
public:
    int checkRecord(int n) {
        int m = 1e9 + 7;
        long a0l0 = 1, a0l1 = 0, a0l2 = 0, a1l0 = 0, a1l1 = 0, a1l2 = 0;
        for (int i = 0; i <= n; i++) {
            long a0l0_ = (a0l0 + a0l1 + a0l2) % m;
            a0l2 = a0l1;
            a0l1 = a0l0;
            a0l0 = a0l0_;
            long a1l0_ = (a0l0 + a1l0 + a1l1 + a1l2) % m;
            a1l2 = a1l1;
            a1l1 = a1l0;
            a1l0 = a1l0_;
        }
        return a1l0%m;
    }
};
