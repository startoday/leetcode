#Given a singly linked list, determine if it is a palindrome.

Example 1:

Input: 1->2
Output: false
Example 2:

Input: 1->2->2->1
Output: true
Follow up:
#Could you do it in O(n) time and O(1) space?

#要求不用额外空间，那么对于回文list来说可以把 中点之后的翻转一波，看看是否相等


class Solution {
public:
    bool isPalindrome(ListNode* head) {
        if(!head || !head->next) return true;
        
        ListNode * fast = head;
        ListNode * slow = head;
        while(fast ->next && fast ->next ->next) { //注意不是直接fast 不然 slow会过界
            fast = fast ->next->next;
            slow = slow ->next;
        }
        
        //slow 现在作为pre 是在最中间
        ListNode * cur = slow ->next;
        ListNode * stay = slow;
        //slow, cur, temp
        while (cur->next) { //判断的是cur 有next才行，不是cur
            ListNode * temp = cur ->next;
            cur ->next = temp ->next;
            temp->next = slow ->next;
            slow ->next = temp;
        }
        
        while(stay->next) {  //注意啦这边都是判断next的。。
            stay = stay ->next;
            if(head->val != stay->val) return false; //注意这里比较的需要是val 不是整个的,整个的是不会相等的哦
            head = head ->next;    
        } 
        
        return true;

    }
};
