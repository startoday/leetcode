#suppose you are a dominator of m 0s and n 1s respectively. 
#On the other hand, there is an array with strings consisting of only 0s and 1s
#your task is to find the maximum number of strings that you can form with given m 0s and n 1s. 
#Each 0 and 1 can be used at most once.
Example 1:

Input: Array = {"10", "0001", "111001", "1", "0"}, m = 5, n = 3
Output: 4

Explanation: This are totally 4 strings can be formed by the using of 5 0s and 3 1s, which are “10,”0001”,”1”,”0”
Example 2:

Input: Array = {"10", "0", "1"}, m = 1, n = 1
Output: 2
Explanation: You could form "10", but then you'd have nothing left. Better form "0" and "1".

#和背包问题类似吧，string的长度是size（可选参数n），各自会侵占几个1 或者 0 
#过是可以一次过但是速度也太慢了2333
class Solution {
public:
    int findMaxForm(vector<string>& strs, int m, int n) {
        int sizeN = strs.size();
        if(sizeN == 0) return 0;
        vector<vector<vector<int>>> dp (sizeN +1, vector<vector<int>>(m+1, (vector<int> (n+1, 0))));
        
        for(int i = 1; i <= sizeN; ++i) {
            for(int j = 0; j <= m; ++j) { //注意要从0 开始！防止有一个是0的时候直接不跑了，initial 只是i的事
                for(int k = 0; k <= n; ++k) {
                    int c1 = countOne(strs[i-1]);
                    int c0 = countZero(strs[i-1]);
                    dp[i][j][k] =dp[i-1][j][k];
                    if(j >=  c0 && k >= c1) {
                        dp[i][j][k] = max (dp[i][j][k], 1 + dp[i-1][j - c0][k - c1]);
                    }
                }
            }
        }
        
        return dp[sizeN][m][n];
    }
    
    int countOne(string s){
        int res = 0;
        for(char k : s){
            if(k == '1') res ++;
        }
        return res;
    }
    int countZero(string s){
        int res = 0;
        for(char k : s){
            if(k == '0') res ++;
        }
        return res;
    }
};

#em。。。这道题建立三维数组没必要诶，str只和自己相关，来一个简短点的写法
class Solution {
public:
    int findMaxForm(vector<string>& strs, int m, int n) {
        int sizeN = strs.size();
        if(sizeN == 0) return 0;
        vector<vector<int>> dp (m+1, (vector<int> (n+1, 0)));
        for(string str:strs) {
            int zero = 0;
            int one = 0;
            for(char c:str) (c == '1')? one++ : zero++;
            for(int j = m; j >= zero; --j) { 
                for(int k = n; k >= one; --k) {
                    dp[j][k] = max (dp[j][k], 1 + dp[j - zero][k - one]);
                }
            }
        }
        return dp[m][n];
    }
};
