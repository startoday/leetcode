Given n nodes labeled from 0 to n-1 and a list of undirected edges (each edge is a pair of nodes), write a function to check whether these edges make up a valid tree.

Example 1:

Input: n = 5, and edges = [[0,1], [0,2], [0,3], [1,4]]
Output: true
Example 2:

Input: n = 5, and edges = [[0,1], [1,2], [2,3], [1,3], [1,4]]
Output: false
Note: you can assume that no duplicate edges will appear in edges. 
Since all edges are undirected, [0,1] is the same as [1,0] and thus will not appear together in edges.

#无重复边， undirected
class Solution {
public:
    bool validTree(int n, vector<vector<int>>& edges) {
        //no cycle, all connected -n -1 edges
        if(n == 0 || n == 1 && edges.size() == 0) return true;
        if(edges.size() != n - 1) return false;
        unordered_map<int, vector<int>> nbs;
        for(auto x :edges) {
            nbs[x[0]].push_back(x[1]);
            nbs[x[1]].push_back(x[0]);
        }
        int ct = 0;        
        queue<int> q;
        q.push(edges[0][0]);
        vector<bool> vis (n);
        vis[edges[0][0]] = true;
        //put ind 0s into q
        while(!q.empty()) {
            int temp = q.front();
            q.pop();
            ct++;
            for(auto x : nbs[temp]) {
                if(!vis[x]) {
                    q.push(x);
                    vis[x] = true;
                }
            }
        }
        return ct == n ;
    }
};
