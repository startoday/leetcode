Given a string, find the length of the longest substring T that contains at most k distinct characters.

Example 1:

Input: s = "eceba", k = 2
Output: 3
Explanation: T is "ece" which its length is 3.
Example 2:

Input: s = "aa", k = 1
Output: 2
Explanation: T is "aa" which its length is 2.


class Solution:
    def lengthOfLongestSubstringKDistinct(self, s: str, k: int) -> int:
        dic = defaultdict(int)
        res = 0
        j = 0
        for i in range(len(s)):
            dic[s[i]] += 1
            if len(dic) <= k:
                res = max(res, i - j + 1)
            if len(dic) >k:
                while len(dic) > k:
                    dic[s[j]] -= 1
                    if dic[s[j]] == 0:
                        del dic[s[j]]
                    j += 1
        return res

#sliding window, return 的是最长的长度
class Solution {
public:
    int lengthOfLongestSubstringKDistinct(string s, int k) {
        int res = 0;
        int j = 0;
        unordered_map<char, int> ct;
        for(int i = 0; i < s.size(); ++i) {
            if(ct[s[i]]++ == 0) k--;
            while(k < 0) {
                if(--ct[s[j++]] == 0) k++;
            }
            res = max(res, i - j + 1);
        }
        return res;
    }
};
