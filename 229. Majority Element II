Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times.

Note: The algorithm should run in linear time and in O(1) space.

Example 1:

Input: [3,2,3]
Output: [3]
Example 2:

Input: [1,1,1,3,3,2,2,2]
Output: [1,2]

#要求线性且没有额外空间。。
#需要想到 既然是大于n/3，最多只能有两个candidate，每次消去1 看最后的candidate是啥，再重新count

class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        //最多有两个结果诶！
        vector<int> res;
        int n = nums.size();
        if(n == 0) return res; // ==||| 这玩意依然存在
        int r1 = nums[0] , r2 = nums[0];
        int ct1 = 1;
        int ct2 = 0;
        for(int i = 1; i < n; ++i) {
            if(nums[i] == r1) ct1 ++;
            else if(nums[i] == r2) ct2 ++;
            else {
                if(ct1 && ct2) { 
                    ct1--;
                    ct2--;
                } else if(ct1) {
                    r2 = nums[i];
                    ct2 = 1;
                } else {
                    r1 = nums[i];
                    ct1 = 1;
                }
            }
        }
        
        ct1 = 0; ct2 = 0;
        for(int i = 0; i < n; ++i) {
            if(nums[i] == r1) ct1 ++;
            if(nums[i] == r2) ct2 ++;
        }
        if(ct2 > n/3) res.push_back(r2);
        if(r1!= r2 && ct1 > n/3) res.push_back(r1);
        return res;
    }
};
