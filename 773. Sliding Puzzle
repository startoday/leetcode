On a 2x3 board, there are 5 tiles represented by the integers 1 through 5, and an empty square represented by 0.

A move consists of choosing 0 and a 4-directionally adjacent number and swapping it.

The state of the board is solved if and only if the board is [[1,2,3],[4,5,0]].

Given a puzzle board, return the least number of moves required so that the state of the board is solved. If it is impossible for the state of the board to be solved, return -1.

Examples:

Input: board = [[1,2,3],[4,0,5]]
Output: 1
Explanation: Swap the 0 and the 5 in one move.
Input: board = [[1,2,3],[5,4,0]]
Output: -1
Explanation: No number of moves will make the board solved.

#类似华容道，可以上下左右运动，想让它从右下角走出来，寻找最短路径
#可以用bfs，每次移动一步时的状态作为 一个node， 与在右下角相等时退出，每次改变层数
#既然是2*3的偷点懒，直接用string来表示状态了，swap来获得neighbors
class Solution {
public:
    int slidingPuzzle(vector<vector<int>>& board) {
        int rSize = board.size();
        int cSize = board[0].size();
        string start = "";
        for(int i = 0; i < rSize; ++i) {
            for(int j = 0; j < cSize; ++j) {
                start += to_string(board[i][j]);
            }
        } 

        unordered_set<string> visited;
        queue<string> boards;
        boards.push(start);
        int steps = 0;

        while(!boards.empty()) {
            for(int k = boards.size(); k > 0; --k) {
                string temp = boards.front();
                boards.pop();
                if(temp == "123450") return steps;
                visited.insert(temp);
                getNeiB(visited, boards, temp, rSize, cSize);
            }            
            ++steps;
        }
        
        return -1;
    }
    void getNeiB(unordered_set<string> & visited, queue<string> & boards, const string & orin, int & rSize, int & cSize) { 
        int size = rSize * cSize;
        for(int i = 0; i < size; ++i) {
            if(orin[i] == '0') {
                string temp = orin;  
                
                if((i + cSize) < size) { //downwards
                    swap(temp[i], temp[i + cSize]);
                    changeTables(visited,  boards, temp);
                    temp = orin;
                } 
                if((i - cSize) >= 0) {  //upwards
                    swap(temp[i], temp[i - cSize]);
                    changeTables(visited,  boards, temp);
                    temp = orin;
                } 
                
                if(i % cSize  != 0) {  //leftwards
                    swap(temp[i], temp[i - 1]);
                    changeTables(visited,  boards, temp);
                    temp = orin;
                }
                
                if((i + 1) < ((i/cSize + 1) *cSize)) {  //rightwards
                    swap(temp[i], temp[i + 1]);
                    changeTables(visited,  boards, temp);
                    temp = orin;
                } 
            }
        }
    }
    void changeTables(unordered_set<string> & visited, queue<string> & boards, string temp) {
        if(visited.count(temp) == 0) {
            boards.push(temp);
            visited.insert(temp);
        }
    }
    
};
