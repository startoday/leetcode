#不能直接换val 必须要交换node
Given a linked list, swap every two adjacent nodes and return its head.

You may not modify the values in the list's nodes, only nodes itself may be changed.
 
Example:

Given 1->2->3->4, you should return the list as 2->1->4->3.

#交换并且每次移动一下

class Solution {
public:
    ListNode* swapPairs(ListNode* head) {
        if(!head || ! head->next) return head;
        ListNode * dummyHead = new ListNode (-1);
        dummyHead->next = head->next;
        ListNode * pre = dummyHead;
        while (head && head->next) {
            pre->next = head->next;
            head->next = pre->next->next;
            pre->next ->next = head;
            
            pre = head;
            head = head->next;
        }
        return dummyHead -> next;
    }
};


# 递归：return 新的头，当前的next指向return的新头（head.next) head.next指回去 并成为新头return

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def swapPairs(self, head: Optional[ListNode]) -> Optional[ListNode]:
        if not head or not head.next:
            return head
        new_head = head.next
        head.next=self.swapPairs(new_head.next)
        new_head.next = head
        return new_head
        
        
        
        
#itereation 注意条件也是有两个以上才会while 继续， 0/1个则break return自身即可！

class Solution:
    def swapPairs(self, head: Optional[ListNode]) -> Optional[ListNode]:
        if not head or not head.next:
            return head
        dum = ListNode(-1,head)
        pre = dum
        while head and head.next:
            temp = head.next
            pre.next = temp
            head.next = temp.next
            temp.next = head
            pre = head
            head = head.next
            
        return dum.next
