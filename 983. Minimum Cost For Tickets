In a country popular for train travel, you have planned some train travelling one year in advance.  The days of the year that you will travel is given as an array days.  Each day is an integer from 1 to 365.

Train tickets are sold in 3 different ways:

a 1-day pass is sold for costs[0] dollars;
a 7-day pass is sold for costs[1] dollars;
a 30-day pass is sold for costs[2] dollars.
The passes allow that many days of consecutive travel.  For example, if we get a 7-day pass on day 2, then we can travel for 7 days: day 2, 3, 4, 5, 6, 7, and 8.

Return the minimum number of dollars you need to travel every day in the given list of days.

#top down dp
#如果这一天在，再发力， time O（366）
class Solution {  
public:
    int mincostTickets(vector<int>& days, vector<int>& costs) {
        if (days.size() == 0) return 0;
        vector<int> res(366, -1);
        set<int> dayset(days.begin(), days.end());
        return helper(1, res , dayset, costs);
    }
    // a function will return the min res
    int helper(int i, vector<int> &res , const set<int> & dayset, const vector<int>& costs ) {
        if(i > 365) return 0;
        if(res[i] != -1) return res[i];       
        int r;
        if(dayset.count(i) != 0) {
            r = min( helper(i + 1, res, dayset, costs) + costs[0], min(helper(i + 7, res, dayset, costs) + costs[1], helper(i + 30, res, dayset, costs) + costs[2]));
        } else r = helper(i + 1, res, dayset, costs);
        res[i] = r;
        return r;
    }
};

#看range的

class Solution {  
    vector<int> dur = {1, 7, 30};
public:
    int mincostTickets(vector<int>& days, vector<int>& costs) {
        if (days.size() == 0) return 0;
        vector<int> res(days.size(), -1);
        return helper(0, res , days, costs);
    }
    // a function will return the min res
    int helper(int i, vector<int> &res , const vector<int>& days, const vector<int>& costs) {
        if(i >= days.size()) return 0;
        if(res[i] != -1) return res[i];       
        int r = INT_MAX;
        int temp = i;
        
        for(int k = 0; k < 3; ++k) {
            while(temp < days.size() && days[temp] < days[i] + dur[k]) {
                temp ++;
            }
            r = min(r, helper(temp, res, days, costs) + costs[k]);
        }
        res[i] = r;
        return r;
    }
};
