There are a total of n courses you have to take, labeled from 0 to n-1.

Some courses may have prerequisites, for example to take course 0 you have to first take course 1, 
which is expressed as a pair: [0,1]

Given the total number of courses and a list of prerequisite pairs, is it possible for you to finish all courses?

Example 1:

Input: 2, [[1,0]] 
Output: true
Explanation: There are a total of 2 courses to take. 
             To take course 1 you should have finished course 0. So it is possible.
Example 2:

Input: 2, [[1,0],[0,1]]
Output: false
Explanation: There are a total of 2 courses to take. 
             To take course 1 you should have finished course 0, and to take course 0 you should
             also have finished course 1. So it is impossible.
Note:

The input prerequisites is a graph represented by a list of edges, not adjacency matrices. 
You may assume that there are no duplicate edges in the input prerequisites.

#问能不能上完课哈，输入其实是v[0] -- v[1],入度of v[1] +1, 检测TS 可不可以输出全部，count size即可
#咱小细节认真点行吗，算法没错，各种小bug。。。
class Solution {
public:
    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {
    
        if (prerequisites.size() == 0) return true;
        if (prerequisites[0].size() == 0) return true;
    
        unordered_map<int, vector<int>> graph;
        vector<int> ind(numCourses, 0);
        for(auto course : prerequisites) { //别加反了
            if(graph.count(course[1]) == 0) graph[course[1]] = {course[0]};
            else graph[course[1]].push_back(course[0]);
            ind[course[0]] ++; 
            
        }
        int count = 0;
        queue<int> q;
        for(int i = 0; i < numCourses; ++i) {
            if(ind[i] == 0) q.push(i); // 别push 错了
        }
        
        while(!q.empty()) {
            int n = q.front();
            q.pop();
            
            for(auto v : graph[n]) {
                ind[v]--;
                if(ind[v] == 0) {
                    q.push(v); // 别push 错了
               }
            }
            count++;
        }
       
        return count == numCourses;
    }
};








#犯蠢了啊！想着dfs好写ts 计数，人家问的是可不可以输出全部，dfs这种仅限无环的啊
class Solution {
public:
    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {
    
        if (prerequisites.size() == 0) return true;
        if (prerequisites[0].size() == 0) return true;
        vector<int> visited (numCourses, false);
        unordered_map<int, vector<int>> graph;
        for(auto course : prerequisites) {
            if(graph.count(course[0]) == 0) graph[course[0]] = {course[1]};
            else graph[course[0]].push_back(course[1]);
        }
        int count = 0;
        for(int i = 0; i < numCourses; ++i) {  //i is the node/course/reps as int
            if(visited[i] == false) {
                helper(graph, i, visited, count);
            }
        }
        cout<<count<<endl;
        return count == numCourses;
    }
    
    void helper(unordered_map<int, vector<int>> & graph, int i, vector<int> & visited, int & count){
        visited[i] = true;
        for(auto v : graph[i]) {
            if(visited[v] == false) {
                helper(graph, v, visited, count);
            }
        }
        count ++;
    }
};
