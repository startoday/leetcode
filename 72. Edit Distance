Given two words word1 and word2, find the minimum number of operations required to convert word1 to word2.

You have the following 3 operations permitted on a word:

Insert a character
Delete a character
Replace a character
Example 1:

Input: word1 = "horse", word2 = "ros"
Output: 3
Explanation: 
horse -> rorse (replace 'h' with 'r')
rorse -> rose (remove 'r')
rose -> ros (remove 'e')
#DP 只固定变一个word去想
class Solution {
public:
    int minDistance(string word1, string word2) {
        int w1 = word1.size();  //col num
        int w2 = word2.size();  //row num
        vector<vector<int>> res (w2+1, vector<int> (w1+1));
        for(int i = 0; i <= w1; ++i) {
            res[0][i] = i;
        }
        for(int i = 0; i <= w2; ++i) {
            res[i][0] = i;
        }
        for(int i = 1; i <= w2; ++i) {
            for(int j = 1; j <= w1; ++j) {
                //注意word1 是j， word2是i 别写反了！！！！
                if(word1[j-1] == word2[i-1]) res[i][j] = res[i-1][j-1];
                else {
                    res[i][j] = min(res[i-1][j]+1, min(res[i-1][j-1]+1,res[i][j-1]+1));
                }
            }
        }
        
        return res[w2][w1];
    }
};
