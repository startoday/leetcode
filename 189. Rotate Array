Given an array, rotate the array to the right by k steps, where k is non-negative.

Follow up:

Try to come up as many solutions as you can, there are at least 3 different ways to solve this problem.
Could you do it in-place with O(1) extra space?
 

Example 1:

Input: nums = [1,2,3,4,5,6,7], k = 3
Output: [5,6,7,1,2,3,4]
Explanation:
rotate 1 steps to the right: [7,1,2,3,4,5,6]
rotate 2 steps to the right: [6,7,1,2,3,4,5]
rotate 3 steps to the right: [5,6,7,1,2,3,4]
Example 2:

Input: nums = [-1,-100,3,99], k = 2
Output: [3,99,-1,-100]
Explanation: 
rotate 1 steps to the right: [99,-1,-100,3]
rotate 2 steps to the right: [3,99,-1,-100]
 

Constraints:

1 <= nums.length <= 2 * 10^4
-2^31 <= nums[i] <= 2^31 - 1
0 <= k <= 10^5


class Solution:
    def rotate(self, nums: List[int], k: int) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        # it can do k%n times to fill every place, and finally all of them are switched , time is O(n), space is O(n)
        k %= len(nums)
        ct = 0
        st = 0
        while ct < len(nums):
            preInd, preNum = st, nums[st] # I have to use thsi preNum
            while True:
                curInd = (preInd + k)% len(nums)
                nums[curInd],  preNum =  preNum , nums[curInd]
                preInd  = curInd
                ct += 1
                if preInd == st:
                    break
            st += 1
        


# reverse 
# time O(n) space  O(1)
class Solution:
    def rotate(self, nums: List[int], k: int) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        def reverse(i,j):
            while i<j:
                nums[i], nums[j] = nums[j],nums[i]
                i += 1
                j -= 1
        k  %= len(nums)
        reverse(0, len(nums)-1)
        reverse(0, k -1)
        reverse(k, len(nums) -1 )

        

#俺的粗糙解法
class Solution:
    def rotate(self, nums: List[int], k: int) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        n = len(nums)
        ind = n - k%n
        st = ind
        while ind < n:
            nums.append(nums[ind])
            ind += 1
        i = st-1
        while i >= 0:
            nums[i + k%n] = nums[i]
            i -= 1

        while k%n >0:
            nums[k%n - 1] = nums[-1]
            nums.pop()
            k -= 1
        return 
        
            
