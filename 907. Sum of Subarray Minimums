Given an array of integers A, find the sum of min(B), where B ranges over every (contiguous) subarray of A.

Since the answer may be large, return the answer modulo 10^9 + 7.

 

Example 1:

Input: [3,1,2,4]
Output: 17
Explanation: Subarrays are [3], [1], [2], [4], [3,1], [1,2], [2,4], [3,1,2], [1,2,4], [3,1,2,4]. 
Minimums are 3, 1, 2, 4, 1, 1, 2, 1, 1, 1.  Sum is 17.
 

Note:

1 <= A.length <= 30000
1 <= A[i] <= 30000
#单调递增栈，O（n）
class Solution {
public:
    int sumSubarrayMins(vector<int>& A) {
        A.push_back(INT_MIN); //deal with the last ele in stack
        int n = A.size();
        vector<int> st ; //we want the minum so we need to maintain a increaing stack， 存index
        long res = 0;
        for(int i = 0; i< n; ++i) {
            while(!st.empty() && A[st.back()] > A[i]) {
                int m = st.back();
                st.pop_back();
                int leftP = st.empty()? m + 1: m - st.back();
                res += leftP * A[m] * (i-m);
            }
            st.push_back(i);
        }
        return res%(1000000007);
    }
};
