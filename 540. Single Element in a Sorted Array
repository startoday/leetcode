You are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once. Find this single element that appears only once.

Follow up: Your solution should run in O(log n) time and O(1) space.

 

Example 1:

Input: nums = [1,1,2,3,3,4,4,8,8]
Output: 2
Example 2:

Input: nums = [3,3,7,7,10,11,11]
Output: 10
 

Constraints:

1 <= nums.length <= 10^5
0 <= nums[i] <= 10^5

# O(lgn), O(1)
class Solution:
    def singleNonDuplicate(self, nums: List[int]) -> int:
        l = 0
        r = (len(nums) -1)//2
        while l < r:
            m = (l + r)//2
            if nums[2*m] == nums[2*m + 1]:
                l = m + 1
            else:
                r = m
        return nums[l*2] # pay attention, this mean the l pair and if there is sth wrong, always in even index!!!
        




class Solution:
    def singleNonDuplicate(self, nums: List[int]) -> int:
        # We can always check the even index 01|23|45..... so always check m and m + 1 
        l = 0
        r = len(nums) -1 
        while l < r: # pushing frontier
            m = l + (r-l)//2
            if m % 2 == 1:  # smart!
                m -= 1
            if nums[m] == nums[m + 1]:
                l = m +2
            else:
                r = m
        return nums[l]
