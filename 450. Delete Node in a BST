#给一个BST 删掉一个点，需要update back
#想法都是先找到要删除的点， 再分三种情况，0儿子直接删，1儿子爸爸指向儿子，2儿子与继任者交换之后删
#对于细节：记得别把一个function写的太长 拆拆拆！
#注意node作为root的情况！！！ 如果0 case的话return NULL了的root （不可以直接return NULL ）1case的话update dummyRoot，2case的话没影响
#可供参考 http://www.mathcs.emory.edu/~cheung/Courses/171/Syllabus/9-BinTree/BST-delete2.html



#很简洁的写法 也适用于非BST 赞！！
#https://leetcode.com/problems/delete-node-in-a-bst/discuss/93293/very-concise-c-solution-for-general-binary-tree-not-only-bst
class Solution {
public:
    TreeNode* deleteNode(TreeNode* root, int key) {
        if (!root) return NULL;
        if (root->val == key) {
            if (!root->right) return root->left; //机智！点赞！
            else {
                TreeNode *cur = root->right;
                while (cur->left) cur = cur->left;
                swap(root->val, cur->val);
            }
        }
        root->left = deleteNode(root->left, key);
        root->right = deleteNode(root->right, key);
        return root;
    }
};


#树最爱的递归
#利用二叉树的性质定位目标在哪，目标在右子树就对右子树递归删除，左子树对左子树递归删除。当目标即是root的时候分析情况
# 无子嗣直接删除；一子嗣看一下子嗣在哪 把root 托付给存在的子嗣即可；二子嗣找到继任者后 交换继任者（比如在右子树）和root， 后对右子树递归删除即可
class Solution {
public:
    TreeNode* deleteNode(TreeNode* root, int key) {

        if(!root) return root;        
        if ( root-> val > key) {
            root -> left = deleteNode(root->left, key);
        } else if ( root-> val < key) {
            root -> right = deleteNode(root->right, key);
        } else {
           if(!root->left || !root->right){ //其实不用分离出来没有子嗣的情况了
               root = (root->left)?  root->left : root->right; //短啊开心
           } else {
               TreeNode* suc = root ->right; 
               while(suc->left) suc = suc->left;
               root->val = suc ->val;
               root->right = deleteNode(root->right, suc->val); // 注意return的还是head
           }
        }    
        return root; // 不可以用dummyRoot了
    }
        
};

#另一个拆了个helper的写法
class Solution {
public:
    TreeNode* deleteNode(TreeNode* root, int key) {
        if(!root) return root;
        else if(root->val < key) {
            root->right = deleteNode(root->right, key); 
        }
        else if(root->val > key) {
            root->left = deleteNode(root->left, key); 
        } else {
            if(!root->left) return root->right;
            if(!root->right) return root->left;
            root->val = getMin(root->right);
            root->right = deleteNode(root->right, root->val);
        }
        return root;
    }
    int getMin(TreeNode * root) {
        while(root->left) {
            root = root->left;
        }
        return root->val;
    }   
};



#拆一下自己写的长代码
class Solution {
public:
    TreeNode* deleteNode(TreeNode* root, int key) {
        TreeNode * dummyRoot = root;
        TreeNode * dummyNode;
        
        if(!root) return root;
        while(root){ //不能直接 root->val != key ,可能会NULL ptr        
            if ( root-> val > key) {
                dummyNode = root;
                root = root -> left;
            } else if ( root-> val < key) {
                dummyNode = root;
                root = root -> right;
            } else break;
        }
        
        //找到点之后 root 是该点，dummyNode是爸爸        
        deleteCase(root,  dummyNode, dummyRoot);
               
        return dummyRoot;
    }
    
    // successor 好找一点呢， function过后 node 变为找到的successor, return 爸爸
    TreeNode * findSuccessor(TreeNode *  & node){
        TreeNode * prev = node;
        node = node->right;
        while (node ->left) {
            prev = node;
            node = node ->left;
        }
        return prev;
    }
    
    void deleteCase(TreeNode *  & root, TreeNode *  & dummyNode, TreeNode *  & dummyRoot ) {           
        if(!root);
        else if(!root->left && !root->right){ //没有子嗣
            if(root == dummyRoot) dummyRoot = NULL;   
            if(dummyNode->left == root ) dummyNode->left =NULL;
            else dummyNode -> right = NULL;
        } else if(!root->left) { // 该删除的点有右儿子
            //该删除点是根节点    
            if(root == dummyRoot)  dummyRoot = dummyRoot ->right ;
            if(dummyNode->left == root) dummyNode->left =root->right;       
            else dummyNode -> right = root->right;
        } else if(!root->right) { //该删除点有左儿子
            //该删除点是根节点
            if(root == dummyRoot) dummyRoot = dummyRoot ->left ;
            if(dummyNode->left == root ) dummyNode->left =root->left;
            else dummyNode -> right = root->left;
        } else {
            TreeNode * temp = root;
            TreeNode * prev = findSuccessor(root);
            temp->val = root->val;
            deleteCase(root, prev, temp);
        }
    }
    
};


#第一次写的。太长 仅留作纪念233333（可以看到删除那有重复代码，可以用function 解决）
class Solution {
public:
    TreeNode* deleteNode(TreeNode* root, int key) {
        TreeNode * dummyRoot = root; //dummyRoot要作为return的head而存活！
        TreeNode * dummyNode;
        
        if(!root) return root;
        while(root){ //不能直接 root->val != key ,可能会NULL ptr        
            if ( root-> val > key) {
                dummyNode = root;
                root = root -> left;
            } else if ( root-> val < key) {
                dummyNode = root;
                root = root -> right;
            } else break;
        }
        
        //找到点之后 root 是该点，dummyNode是爸爸
        if(!root);
        else if(!root->left && !root->right){
            if(root == dummyRoot) {
                root = NULL;
                return root ;
            }
            if(dummyNode->val > root ->val) dummyNode->left =NULL;
            else dummyNode -> right = NULL;
        } else if(!root->left) { // 该删除的点有右儿子
                if(root == dummyRoot) { //该删除点是根节点
                return dummyRoot ->right ;
            }
            if(dummyNode->val > root ->val) dummyNode->left =root->right;
        
            else dummyNode -> right = root->right;
        } else if(!root->right) { //该删除点有左儿子
            if(root == dummyRoot) { //该删除点是根节点
                return dummyRoot ->left ;
            }
            if(dummyNode->val > root ->val) dummyNode->left =root->left;
            else dummyNode -> right = root->left;
        } else {
            TreeNode * temp = root;
            TreeNode * prev = root;
            root = root->right;
            bool left2 =false;
            while(root->left){
                prev = root;
                root = root->left;
                left2 =true;
            }
            //findSuccessor(root);
            temp->val = root->val;
            //root = deleteNode(prev, root->val);
            if(!root ->left && !root ->right) {
                if (left2) prev -> left = NULL;  
                else prev ->right = NULL;
            } else if (!root->left) {
                if (left2) prev -> left = root->right;  
                else prev ->right =root->right;
            } else {
                if (left2) prev -> left = root->left;  
                else prev ->right =root->left;
            }
            
        }
               
        return dummyRoot;
    }
    
    TreeNode *  findPrecessor(TreeNode * node){
        node = node->left;
        while (node ->right) {
            node = node ->right;
        }
        if(node ->left) node= node->left;
        return node;
    }
    
    // successor 好找一点呢
    void findSuccessor(TreeNode *  & node){
        node = node->right;
        while (node ->left) {
            node = node ->left;
        }
        //return node;
    }
    
};
