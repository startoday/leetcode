You are given an integer array nums and an integer x. In one operation, you can either remove the leftmost or the rightmost element from the array nums and subtract its value from x. Note that this modifies the array for future operations.

Return the minimum number of operations to reduce x to exactly 0 if it's possible, otherwise, return -1.

 

Example 1:

Input: nums = [1,1,4,2,3], x = 5
Output: 2
Explanation: The optimal solution is to remove the last two elements to reduce x to zero.
Example 2:

Input: nums = [5,6,7,8,9], x = 4
Output: -1
Example 3:

Input: nums = [3,2,20,1,1,3], x = 10
Output: 5
Explanation: The optimal solution is to remove the last three elements and the first two elements (5 operations in total) to reduce x to zero.
 

Constraints:    

1 <= nums.length <= 10^5
1 <= nums[i] <= 10^4
1 <= x <= 10^9

# 给一个array，每个数都大于0， 每次只能从最左或者最右删掉一个数，x 也会对应减少这个数，问能让x得0的最小操作次数
# idea:
#  If it exists an answer, then it means we have a subarray in the middle of original array whose sum is == totalSum - x
#  If we want to minimize our operations, then we should maximize the length of the middle subarray.
#  Then the qeustion becomes: Find the Longest Subarray with Sum Equals to TotalSum - X
#  We could simply use Map + Prefix Sum to get it!


class Solution:
    def minOperations(self, nums: List[int], x: int) -> int:
        tar = sum(nums) - x
        if tar == 0:
            return len(nums)
        dic = {}
        dic[0] = -1
        cur = 0
        res = float('-inf')
        for i, n in enumerate(nums):
            cur += n
            if cur - tar in dic:
                res = max(res, i- dic[cur - tar])
            dic[cur] = i # cur is unique cause numbers are positive
            
            # remember the result is len(nums) - res
        return len(nums) - res if res != float('-inf') else -1
                
