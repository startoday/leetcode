We distribute some number of candies, to a row of n = num_people people in the following way:

We then give 1 candy to the first person, 2 candies to the second person, and so on until we give n candies to the last person.

Then, we go back to the start of the row, giving n + 1 candies to the first person, n + 2 candies to the second person, and so on until we give 2 * n candies to the last person.

This process repeats (with us giving one more candy each time, and moving to the start of the row after we reach the end) until we run out of candies.  The last person will receive all of our remaining candies (not necessarily one more than the previous gift).

Return an array (of length num_people and sum candies) that represents the final distribution of candies.



#brute force 居然就能过 --数学做法就是和solution 一样，算层数， 我临场没写出来（看到0.25， 0.5的对c++ 不确定咋样）

#我的写法
class Solution {
public:
    vector<int> distributeCandies(int candies, int num_people) {
        vector<int> res(num_people,0);
        int i = 1;
        while(candies > 0) {
            for(int j = 1; j <= num_people; ++j){
                res[j - 1] += i;
                candies -=i;
                i++;
                if(candies < 0) {
                    res[j - 1]+= candies;
                    break;
                }
            }
        }
        return res; 
    }
};

#别人的类似写法
class Solution {
public:
    vector<int> distributeCandies(int candies, int num_people) {
        
        int c = 1, i = 0;
        
        vector<int> result(num_people, 0);
        
        while(candies) {

            int give = min(c, candies);
            result[i] += give;
            candies -= give;
            
            c++;
            i = (i+1) % num_people; 
        }
        
        return result;
    }
};
