Given two integers representing the numerator and denominator of a fraction, return the fraction in string format.

If the fractional part is repeating, enclose the repeating part in parentheses.

If multiple answers are possible, return any of them.

It is guaranteed that the length of the answer string is less than 104 for all the given inputs.

 

Example 1:

Input: numerator = 1, denominator = 2
Output: "0.5"
Example 2:

Input: numerator = 2, denominator = 1
Output: "2"


Constraints:

-2^31 <= numerator, denominator <= 2^31 - 1
denominator != 0

class Solution(object):
    def fractionToDecimal(self, numerator, denominator):
        """
        :type numerator: int
        :type denominator: int
        :rtype: str
        """
        # get the one before decimal, easy to use positive number 
        left, right = divmod(abs(numerator), abs(denominator))
        if numerator * denominator < 0: # negative
            res = "-" +str(left)
        else:
            res = str(left)
        if right != 0:
            res += "."
        seen = {right : len(res)}
        while right:
            left, right = divmod(right* 10, abs(denominator)) # shift once
            
            res += str(left)  # should do this first
            if right in seen: #check right存不存在， left已经store过了
                #第一个是len， 所以刚好少了新加的那一位； 后面是从新加的那一位开始
                res = res[:seen[right]] + "(" + res[seen[right]:] + ")"
                return res
            
            seen[right] = len(res)
        return res
