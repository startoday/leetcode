Given an array arr that is a permutation of [0, 1, ..., arr.length - 1], we split the array into some number of "chunks" (partitions), and individually sort each chunk.  After concatenating them, the result equals the sorted array.

What is the most number of chunks we could have made?

Example 1:

Input: arr = [4,3,2,1,0]
Output: 1
Explanation:
Splitting into two or more chunks will not return the required result.
For example, splitting into [4, 3], [2, 1, 0] will result in [3, 4, 0, 1, 2], which isn't sorted.
Example 2:

Input: arr = [1,0,2,3,4]
Output: 4
Explanation:
We can split into two chunks, such as [1, 0], [2, 3, 4].
However, splitting into [1, 0], [2], [3], [4] is the highest number of chunks possible.
Note:

arr will have length in range [1, 10].
arr[i] will be a permutation of [0, 1, ..., arr.length - 1].

#给一个 0 - n-1随机顺序的array，分块同时sort，要最后成为升序或者降序数列（or just升序序列---这个！ 不然第一个就return 5 了），
问最大可以分成多少块？最小当然是1块了 最大就是size块（不需要排序就可以return size）
[4,3,2,1,0] -1
[1,2,3,4,0] -1
[0,1,2,3,4] -5
#该在某个位置的时候就可以 + 1，如果该位置上的值大于原本该有的值（i） 那么就会take care of this range，一直往前挪动
class Solution {
public:
    int maxChunksToSorted(vector<int>& arr) {
        int res = 0;
        int sp = 0;
        for(int i = 0; i < arr.size(); ++i) {
            sp = max(sp, arr[i]);
            if(sp == i) res++;
        } 
        return res;
    }
};
