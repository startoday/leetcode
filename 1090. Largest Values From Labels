We have a set of items: the i-th item has value values[i] and label labels[i].

Then, we choose a subset S of these items, such that: |S| <= num_wanted
For every label L, the number of items in S with label L is <= use_limit.
Return the largest possible sum of the subset S.

Example 1:
Input: values = [5,4,3,2,1], labels = [1,1,2,2,3], num_wanted = 3, use_limit = 1
Output: 9
Explanation: The subset chosen is the first, third, and fifth item.

Note:
1 <= values.length == labels.length <= 20000
0 <= values[i], labels[i] <= 20000
1 <= num_wanted, use_limit <= values.length
#一道被大家众所吐槽题意的题，2333我一开始理解的倒是没毛病.。

#有点类似621 ，用max heap 每次选择最大值战斗 并记录使用次数，要求不可以超过limit
#class Solution {
public:
    int largestValsFromLabels(vector<int>& values, vector<int>& labels, int num_wanted, int use_limit) {
        //use limit : max times you can use
        int res = 0;
        priority_queue<pair<int, int>> pq;
        for(int i = 0; i < values.size(); ++i) {
            pq.push({values[i], labels[i]});
        }
        unordered_map<int, int> ct;
        while(!pq.empty() && num_wanted > 0) {
            auto x = pq.top();
            pq.pop();
            if(ct.count(x.second) == 0|| ct[x.second] < use_limit) {
                res += x.first;
                ct[x.second]++;
                num_wanted--;
            } 
        }
        return res;
    }
};
