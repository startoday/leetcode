A full binary tree is a binary tree where each node has exactly 0 or 2 children.

Return a list of all possible full binary trees with N nodes.  
Each element of the answer is the root node of one possible tree.

Each node of each tree in the answer must have node.val = 0.

You may return the final list of trees in any order.

 

Example 1:

Input: 7
Output: [[0,0,0,null,null,0,0,null,null,0,0],[0,0,0,null,null,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,null,null,null,null,0,0],[0,0,0,0,0,null,null,0,0]]

#这道题要求的是点用 0 来做代表
class Solution {
public:
    vector<TreeNode*> allPossibleFBT(int N) {
        vector<TreeNode *> res {};
        if(N == 1) {
            res.push_back(new TreeNode(0));
        }
        N = N - 1;
        for(int i = 1; i < N; i += 2) { //两个一跳
            vector<TreeNode*> leftTree = allPossibleFBT(i);
            vector<TreeNode*> rightTree = allPossibleFBT(N - i);
            for(TreeNode* leftSub : leftTree) {
                for(TreeNode* rightSub : rightTree) {
                    TreeNode * root = new TreeNode(0);
                    root->left = leftSub;
                    root->right = rightSub;
                    res.push_back(root); //别忘了加入点
                }
            }
        }
        return res;
    }
};
