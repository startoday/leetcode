Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become:

[4,5,6,7,0,1,2] if it was rotated 4 times.
[0,1,2,4,5,6,7] if it was rotated 7 times.
Notice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].

Given the sorted rotated array nums of unique elements, return the minimum element of this array.

You must write an algorithm that runs in O(log n) time.

#二分法
#最开始只要左比右小肯定就return 左
class Solution:
    def findMin(self, nums: List[int]) -> int:
        #binary search for the smallest elements
        l = 0
        r = len(nums)-1
        if nums[l] < nums[r]:
            return nums[l]
        while l < r -1:
            mid = l +(r-l)//2
            if nums[mid] > nums[l]:
                l = mid
            else:
                r = mid
        if nums[l] < nums[r]:
            return nums[l]
        return nums[r]
            
        
        
https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/discuss/158940/Beat-100%3A-Very-Simple-(Python)-Very-Detailed-Explanation
