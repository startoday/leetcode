#参见46 permuation 的分析
#自己写的
class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        int siz = nums.size();
        int inP = siz - 2;
        for(inP; inP >= 0; --inP) {
            if(nums[inP] < nums[inP+1]) break;
        }
        if(inP != -1) {
            int anotherP = siz -1;
            for(anotherP; anotherP > inP; --anotherP) {
                if(nums[anotherP] > nums[inP]) break;
            }
            swap(nums[anotherP], nums[inP]);
        }
        reverse(nums.begin() + inP +1, nums.end());
    }
};

#while loop 简洁一点--思路一样
class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        int n = nums.size(), i = n - 2, j = n - 1;
        while (i >= 0 && nums[i] >= nums[i + 1]) {
            --i;
        }
        if (i >= 0) {
            while (nums[j] <= nums[i]) --j;
            swap(nums[i], nums[j]);
        }
        reverse(nums.begin() + i + 1, nums.end());
    }
};
