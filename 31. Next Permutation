class Solution:
    def nextPermutation(self, nums: List[int]) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        #from end to front, find the first smaller number, find the before is a little larger than it, swap and resot the latter numbers
        j = len(nums) -2
        while j >= 0:
            if nums[j] < nums[j +1]:
                break
            j -= 1
        if j != -1: # when it is already the largest
            i = len(nums) -1
            while i >j :
                if nums[i] > nums[j]:
                    break
                i -= 1
            nums[i],nums[j] = nums[j],nums[i]
        x = j + 1
        y = len(nums) - 1
        while x < y:
            nums[x],nums[y] = nums[y],nums[x]
            x += 1
            y -= 1
        return 


#参见46 permuation 的分析
#自己写的
class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        int siz = nums.size();
        int inP = siz - 2;
        for(inP; inP >= 0; --inP) {
            if(nums[inP] < nums[inP+1]) break;
        }
        if(inP != -1) {
            int anotherP = siz -1;
            for(anotherP; anotherP > inP; --anotherP) {
                if(nums[anotherP] > nums[inP]) break;
            }
            swap(nums[anotherP], nums[inP]);
        }
        reverse(nums.begin() + inP +1, nums.end());
    }
};

#while loop 简洁一点--思路一样
class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        int n = nums.size(), i = n - 2, j = n - 1;
        while (i >= 0 && nums[i] >= nums[i + 1]) {
            --i;
        }
        if (i >= 0) {
            while (nums[j] <= nums[i]) --j;
            swap(nums[i], nums[j]);
        }
        reverse(nums.begin() + i + 1, nums.end());
    }
};
