#给一颗二叉树，return 众数们 （这个二叉树允许左右都有重复元素）
Given a binary search tree (BST) with duplicates, find all the mode(s) (the most frequently occurred element) in the given BST.

Assume a BST is defined as follows:

The left subtree of a node contains only nodes with keys less than or equal to the node's key.
The right subtree of a node contains only nodes with keys greater than or equal to the node's key.
Both the left and right subtrees must also be binary search trees.
 

For example:
Given BST [1,null,2,2],

   1
    \
     2
    /
   2
   
   
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def __init__(self):
        self.curCt = 0
        self.maxCt = 0
        self.res = []
        self.curN = None
    def findMode(self, root: Optional[TreeNode]) -> List[int]:
        #do a inorder recursion, count the max number and update!
        if not root:
            return []
        self.curN = root.val
        def helper(rt):
            if not rt:
                return 
            helper(rt.left)
            if rt.val == self.curN:
                self.curCt+=1
            else:
                self.curN = rt.val
                self.curCt = 1
            if self.curCt> self.maxCt:
                self.res = [rt.val]
                self.maxCt = self.curCt
            elif self.curCt == self.maxCt:
                self.res.append(rt.val)
            helper(rt.right)
        helper(root)
        return self.res 
            
           

#没想到什么好方法啊。。可以用hashmap 存点和对应的次数， 记录一下最大出现次数，再遍历hash map 找最大值加入res
class Solution {
public:
    vector<int> findMode(TreeNode* root) {
        vector<int> res;
        if(!root) return res;
        
        unordered_map <int, int> check;
        int apMax = 1;
        preOrderAdd(root, check, apMax);
        for(auto ele : check) {
            if(ele.second == apMax) {
                res.push_back(ele.first);
            }
        }      
        return res;
    }
    
    void preOrderAdd(TreeNode* root, unordered_map  <int, int> &check, int & apMax) {
        if(!root) return;
        if(check.count(root->val)>0 ){
            check[root->val] ++;
            apMax = max (apMax, check[root->val]);
        } else {
            check[root->val] = 1;
        }
        preOrderAdd(root->left, check, apMax);
        preOrderAdd(root->right, check, apMax);
    }
};



