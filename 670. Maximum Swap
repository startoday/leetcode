Given a non-negative integer, you could swap two digits at most once to get the maximum valued number. Return the maximum valued number you could get.

Example 1:
Input: 2736
Output: 7236
Explanation: Swap the number 2 and the number 7.
Example 2:
Input: 9973
Output: 9973
Explanation: No swap.
Note:
The given number is in the range [0, 10^8]


class Solution:
    def maximumSwap(self, num: int) -> int:
        n = list(str(num))
        left, right, maxInd  = -1, -1, -1
        for i in range(len(n) -1 , -1, -1):
            if int(n[i]) > int(n[maxInd]):
                maxInd = i
            elif int(n[i]) < int(n[maxInd]): # one choice
                left = i
                right = maxInd
        if left == -1: # no need
            return num
        n[left],n[right] = n[right], n[left]
        return int(''.join(n))
        
        
        
        
class Solution:
    def maximumSwap(self, num: int) -> int:
        minPos = -1
        maxPos = -1
        swap = -1
        tmp = [i for i in str(num)]
        # count back wards!
        for i in range(len(tmp) -1, -1, -1):
            if tmp[i] > tmp[maxPos]: #record the seeing max
                maxPos = i
            if tmp[i] < tmp[maxPos]: # if not the max, we can change it
                minPos = i
                swap = maxPos #we need a different index to store the position can be swapped, which is only when we have a left side; it is not always the running max 
        if minPos == -1:
            return num
        tmp[swap], tmp[minPos] = tmp[minPos], tmp[swap]
        return int("".join(tmp))

