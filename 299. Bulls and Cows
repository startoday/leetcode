You are playing the Bulls and Cows game with your friend.

You write down a secret number and ask your friend to guess what the number is. When your friend makes a guess, you provide a hint with the following info:

The number of "bulls", which are digits in the guess that are in the correct position.
The number of "cows", which are digits in the guess that are in your secret number but are located in the wrong position. Specifically, the non-bull digits in the guess that could be rearranged such that they become bulls.
Given the secret number secret and your friend's guess guess, return the hint for your friend's guess.

The hint should be formatted as "xAyB", where x is the number of bulls and y is the number of cows. Note that both secret and guess may contain duplicate digits.

 

Example 1:
Input: secret = "1807", guess = "7810"
Output: "1A3B"
Explanation: Bulls are connected with a '|' and cows are underlined:
"1807"
  |
"7810"

Example 2:
Input: secret = "1123", guess = "0111"
Output: "1A1B"
Explanation: Bulls are connected with a '|' and cows are underlined:
"1123"        "1123"
  |      or     |
"0111"        "0111"
Note that only one of the two unmatched 1s is counted as a cow since the non-bull digits can only be rearranged to allow one 1 to be a bull.

Example 3:
Input: secret = "1", guess = "0"
Output: "0A0B"

Example 4:
Input: secret = "1", guess = "1"
Output: "1A0B"
 
Example 5:
"1122"
"1222"
give me 3A0B not 2A1B!!!!
 

Constraints:

1 <= secret.length, guess.length <= 1000
secret.length == guess.length
secret and guess consist of digits only.

# One pass：
class Solution:
    def getHint(self, secret: str, guess: str) -> str:
        dic = defaultdict(int)
        a = 0
        b = 0
        for i, s in enumerate(secret):
            g = guess[i]
            if s == g:
                a += 1
            else: # use opppsite storage to store. means I if I am decreamenting but can see a positive number
                #means I see it in the other string before; and it will be canceled out after I see it this time
                if dic[s] > 0:
                    b +=1
                if dic[g] <0 :  
                    b += 1
                dic[s] -= 1
                dic[g] += 1
        return str(a) + "A" + str(b) + "B"


#space 其实是O（1） 因为说了只有数字， 也就是10～ constant
class Solution:
    def getHint(self, secret: str, guess: str) -> str:
        c = Counter(secret)
        a = 0
        b = 0
        for i, g in enumerate(guess):
            if g in c:
                if g == secret[i]:
                    a += 1 # always will 加一
                    if c[g]<=0: #如果不够了，从b哪里抢一个过来； 如果够的话不需要抢
                        b -= 1  # b永远不会小于0 因为会先可这a来，而每个a都保证数量相等的一对！
                elif c[g]>0: #只有够的时候才行
                    b += 1
                c[g] -= 1  # 不需要删除当小于0 的时候，用来记录要不要抢b！
        return str(a) + "A" + str(b) + "B"
