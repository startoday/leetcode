Given a 2D binary matrix filled with 0's and 1's, find the largest square containing only 1's and return its area.

Example:

Input: 

1 0 1 0 0
1 0 1 1 1
1 1 1 1 1
1 0 0 1 0

Output: 4
#题如图意， dp做法-很巧妙：

class Solution {
public:
    int maximalSquare(vector<vector<char>>& matrix) {
        int r = matrix.size();
        if(r == 0) return 0;
        int c = matrix[0].size();
        if(c == 0) return 0;
        int res = 0;
        vector<vector<int>> dp(r + 1, vector<int> (c + 1, 0));
        for(int i = 1; i <= r; ++i) {
            for(int j = 1; j <= c; ++j) {
                if(matrix[i - 1][j - 1] == '1') { //pay attention is char
                    dp[i][j] = 1 + min(dp[i - 1][j],min(dp[i][j - 1],dp[i - 1][j - 1]));
                    res = max(res, dp[i][j]);
                }
            }
        }
        return res * res;
    }
};
