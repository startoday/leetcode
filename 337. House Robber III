The thief has found himself a new place for his thievery again. 
There is only one entrance to this area, called the "root." 
Besides the root, each house has one and only one parent house. 
After a tour, the smart thief realized that "all houses in this place forms a binary tree". It will automatically contact the police if two directly-linked houses were broken into on the same night.

Determine the maximum amount of money the thief can rob tonight without alerting the police.

Example 1:
Input: [3,2,3,null,3,null,1]
     3
    / \
   2   3
    \   \ 
     3   1

Output: 7 
Explanation: Maximum amount of money the thief can rob = 3 + 3 + 1 = 7.

#还是那个聪明的贼，居然走一圈后发现是一个tree状的小区了。。。相邻只能偷一家，问最多偷多少家
#传说中tree的dp2333
#如果一个root 被抢了， 那他的子子才能被抢，没被抢的时候子可以被抢，跟rob2类似，可以记录一个抢的 一个没抢的 走一轮，求最大

class Solution {
public:
    int rob(TreeNode* root) {
        //<rob the root, not rob the root>
        pair<int, int> res = helper(root);
        return max(res.first, res.second);
    }
    pair<int, int> helper(TreeNode* root) {
        if(!root) return {0,0};
        auto [l0, l1] = helper(root ->left);
        auto [r0, r1] = helper(root ->right);
        pair<int, int> temp;
        temp.first = l1 + r1 + root->val;
        temp.second = max(l0, l1) + max (r0, r1);
        return temp;
    }
};
