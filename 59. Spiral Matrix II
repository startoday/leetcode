#螺旋手里剑章二！
fill 一个array with 1- n方的数字， 按照顺时针螺旋 即可

Input: 3
Output:
[
 [ 1, 2, 3 ],
 [ 8, 9, 4 ],
 [ 7, 6, 5 ]
]


#随便改改 54的那道 I ，54题debug de的心太累了当时，就让这题随风而逝吧。。。
class Solution {
public:
    vector<vector<int>> generateMatrix(int n) {
        vector<vector<int>> res (n, vector<int> (n));
        int count = 1;
        int end = pow(n,2);
        int colR = n-1;
        int rowB = n-1;
        int colL = 0;
        int rowT = 0;
        while(count<=end ) {
            for(int j = colL; j <= colR ; j++) {
                res[rowT][j] = count;
                count++;
            }           
            for (int i = rowT + 1; i <= rowB; i++) {
                res[i][colR] = count;
                count++;
            }           
            if (count <= end) {
                for (int j = colR - 1; j > colL; j--) {
                    res[rowB][j] = count;
                    count++;
                }
                for (int i = rowB; i > rowT; i--) {
                    res[i][colL] = count;
                    count++;
                }
            }
            rowT++;
            colL++;
            rowB--;
            colR--;
        }
        return res;
    }
};


#更新一个不容易错的做法～
class Solution {
public:
    vector<vector<int>> generateMatrix(int n) {
        vector<vector<int>> res(n, vector<int> (n)) ;
        int ct = 1;
        int stop = n * n ;
        int up = 0; int right = n - 1; int down = n -1; int left = 0;
        while(ct <= stop) {
            for(int i = left; i <= right; ++i) {
                res[up][i] = ct++;
            }
            if(++up > right) break;
            for(int i = up; i <= down; ++i) {
                res[i][right] = ct++;
            }
            if(--right < left) break;
            for(int i = right; i >= left; --i) {
                res[down][i] = ct++;
            }
            if(--down < up) break;
            for(int i = down; i >= up; --i) {
                res[i][left] = ct++;
            }
            if(++left > right) break;
        }
        return res;
    }
};

# another nice python solution:
                
class Solution:
    def generateMatrix(self, n: int) -> List[List[int]]:
        res = [[0] * n for _ in range(n) ]
        i, j = 0, 0
        di, dj = 0, 1
        for x in range(1, n*n + 1):
            res[i][j] = x
            # the end of this line, the next(first) already be signed
            if res[(i + di) % n] [ (j +dj) %n] != 0:
                di, dj = dj, -di # di = 1, dj = 0 -> di = 0, dj = -1-> di = -1, dj = 0
            i += di
            j += dj
        return res 
        
