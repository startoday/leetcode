Given a string s, find the longest palindromic subsequence's length in s. You may assume that the maximum length of s is 1000.

Example 1:
Input:

"bbbab"
Output:
4
One possible longest palindromic subsequence is "bbbb".
Example 2:
Input:

"cbbd"
Output:
2

#dp
class Solution {
public:
    int longestPalindromeSubseq(string s) {
        int size = s.size();
        if(size == 0) return 0;
        //store max at position [i,j]
        vector<vector<int>> dp(size , vector<int>(size));
        for(int i = 0; i < size; ++i){
            dp[i][i] = 1;
        }
        for(int i = size-2; i >= 0; --i) {
            for(int j = i + 1; j < size; ++j) {
              if(s[i] == s[j]) dp[i][j] = dp[i+1][j-1] + 2;
              else  dp[i][j] = max(dp[i+1][j], dp[i][j-1]);
            }
        }
        return dp[0][size-1];
    }
};


# print out res example
string left ="";
string right ="";
int m = 0; int k = size - 1;
while(m < k) {
    if(s[m] == s[k]) {
        left += s[m++];
        right += s[k--];
    } else if(dp[m + 1][k] <= dp[m][k - 1]) {
        k--;
    }else m++;
}
reverse(right.begin(),right.end());
if(left.size() + right.size() != dp[0][size-1]) left += s[m];
string res = left + right;
