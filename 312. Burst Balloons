Given n balloons, indexed from 0 to n-1. Each balloon is painted with a number on it represented by array nums. 
You are asked to burst all the balloons. 
If the you burst balloon i you will get nums[left] * nums[i] * nums[right] coins. 
Here left and right are adjacent indices of i. After the burst, the left and right then becomes adjacent.

Find the maximum coins you can collect by bursting the balloons wisely.

Note:

You may imagine nums[-1] = nums[n] = 1. They are not real therefore you can not burst them.
0 ≤ n ≤ 500, 0 ≤ nums[i] ≤ 100

#这里的dp array是看留下来的气球， i-j 段 k是最后一个扎的 那么 分两半+k的计算是 nums[k]*nums[i-1]*nums[j+1]
#这种分段式计算的都是乘法链算法

class Solution {
public:
    int maxCoins(vector<int>& nums) {
        int n = nums.size();
        nums.insert(nums.begin(), 1);
        nums.push_back(1);
        vector<vector<int>> dp (n + 2, vector<int> (n + 2, 0));
        for (int length = 1; length <= n; ++length) {
            for(int i =1; i <= n - length +1; ++i) {
                int j = i + length - 1;
                for(int k = i; k <= j; ++k) {
                    dp[i][j] = max(dp[i][j], dp[i][k-1]+dp[k+1][j]+ nums[k]*nums[i-1]*nums[j+1]);
                }
            }
        }
        return dp[1][n];
    }
};
