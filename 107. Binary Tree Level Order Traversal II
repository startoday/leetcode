Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its bottom-up level order traversal as:
[
  [15,7],
  [9,20],
  [3]
]

#为毛线这个反而是easy题。。
#BFS 貌似都用的reverse
class Solution {
public:
    vector<vector<int>> levelOrderBottom(TreeNode* root) {
        vector<vector<int>> res;
        if(!root) return res;
        queue<TreeNode *> q;
        q.push(root);
        while(!q.empty()) {
            vector<int> l;
            for(int i = q.size(); i > 0; --i) {
                TreeNode * temp = q.front();
                q.pop();
                l.push_back(temp->val);
                if(temp->left) q.push(temp->left);
                if(temp->right) q.push(temp->right);
            }
            res.push_back(l);
        }
        reverse(res.begin(),res.end());
        return res;
    }
};

#DFS recursive写法,还是reverse， 要么就得算总层数
class Solution {
public:
    vector<vector<int>> levelOrderBottom(TreeNode* root) {
        vector<vector<int>> res;
        if(!root) return res;
        helper(root, res, 0);
        reverse(res.begin(), res.end());
        return res;
    }
    void helper(TreeNode* node, vector<vector<int>>  & r, int level) {
        if(!node) return;
        if(r.size() <= level) r.push_back({node->val});
        else r[level].push_back(node->val);
        helper(node->left, r, level + 1);
        helper(node->right, r, level + 1);
    }
};


#计算 height后 传 height 也4ms
class Solution {
    int d = 0;
public:
    int dep(TreeNode* node){
        if(!node) return 0;
        return max(dep(node->left), dep(node->right)) + 1;
    }
    vector<vector<int>> levelOrderBottom(TreeNode* root) {
        d = dep(root);
        cout<<d<<endl;
        vector<vector<int>> res(d);
        if(!root) return res;
        helper(root, res, d - 1);
        return res;
    }
    void helper(TreeNode* node, vector<vector<int>>  & r, int level) {
        if(!node) return;
        r[level].push_back(node->val);
        helper(node->left, r, level - 1);
        helper(node->right, r, level - 1);
    }
};
