#给一棵树，求从根到叶子组成的所有路径代表的 整数的和

Example:

Input: [1,2,3]
    1
   / \
  2   3
Output: 25
Explanation:
The root-to-leaf path 1->2 represents the number 12.
The root-to-leaf path 1->3 represents the number 13.
Therefore, sum = 12 + 13 = 25.

Example:
[4,9,0,null,1]. = 491 + 40 = 531. => not eaquls to 49 + 491 + 40, so we always check the leaf node!

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def sumNumbers(self, root: TreeNode) -> int:
        # for each layer, increasing the prestuff and cur stuff
        if not root:
            return 0
        self.res = 0
        def helper(rt, pre):
            if not rt:
                return 
            pre = pre*10 + rt.val
            if not rt.left and not rt.right:
                self.res+= pre
                return
            helper(rt.left,pre)
            helper(rt.right,pre)
        helper(root, 0)
        return self.res
            
        

#DFS吧 根左右。。我一路向下，更改有父的子结，这个计数方法可以想到 cur += pre *10 + cur，走到全是leaf的时候数字就都有了，sum即可


class Solution {
public:
    int sumNumbers(TreeNode* root) {
        if(!root) return 0;
        int sum = 0;
        stack<TreeNode * > nodes;
        nodes.push(root);
        TreeNode * temp;
        while(!nodes.empty()){
            temp = nodes.top();
            nodes.pop();
            if(!temp->left && !temp->right) { //leaf
                sum += temp->val;
            }
            if(temp ->right) {
                temp->right->val += temp->val*10;
                nodes.push(temp->right);
            }            
            if(temp ->left) {
                temp->left->val += temp->val*10;
                nodes.push(temp->left);
            }
        }
        return sum;
    }
};

#再来一个recursive哒！
#遇到叶子可以return, 否则一直update Sum。 return 左右子树的和
#这里的sum不能是pass by reference。。。不然值会被改乱

class Solution {
public:
    int sumNumbers(TreeNode* root) {
       return helper(root, 0);       
    }
    int helper(TreeNode * root, int sum){
        if(!root) return 0;
        sum = sum*10 + root->val; // update first
        if(!root->left && !root->right) return sum;
        return helper(root->left, sum) + helper(root->right, sum);
    }
};
