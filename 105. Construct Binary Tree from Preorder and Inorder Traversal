Given preorder and inorder traversal of a tree, construct the binary tree.

Note:
You may assume that duplicates do not exist in the tree.

For example, given

preorder = [3,9,20,15,7]
inorder = [9,3,15,20,7]
Return the following binary tree:

    3
   / \
  9  20
    /  \
   15   7
   
 
#iterative
easy to think with stack, the before top == to the inorder, we insert in left, otherwise we start to insert in right
class Solution:
    def buildTree(self, preorder: List[int], inorder: List[int]) -> TreeNode:
        if len(preorder) == 0:
            return None
        root = TreeNode(preorder[0])
        st = [root]
        i = 1
        j = 0
        while i < len(preorder):
            newNd = TreeNode(preorder[i])
            if st and st[-1].val!= inorder[j]:
                st[-1].left = newNd
            else:
                tmp = st[-1]
                while st and st[-1].val == inorder[j]:
                    tmp = st.pop()
                    j+=1
                tmp.right = newNd
            st.append(newNd)    
            i += 1
        return root




#recursive 
the left of the same node in inorder will be the left subtree, and right side will be the right sub tree

    # a nice solution https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/discuss/34543/Simple-O(n)-without-map
class Solution:
    def buildTree(self, preorder: List[int], inorder: List[int]) -> TreeNode:
        preorder.reverse()
        inorder.reverse()
        def helper(stop):
            if inorder and inorder[-1]!=stop:
                rt = TreeNode(preorder.pop())
                rt.left = helper(rt.val) #left should not exceed root
                inorder.pop() #if pass left means inorder[-1] == stop, this val is used
                rt.right = helper(stop) #right side shoulde be the same stoper as root
                return rt
        return helper(None)

class Solution {
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        int size = preorder.size();
        if(size == 0) return {};
        return helper(preorder, 0, size - 1, inorder, 0, size - 1); 
    }
    
    TreeNode* helper(vector<int>& preorder, int  preL, int preR, vector<int>& inorder, int inoL, int inoR) {
        if( preL > preR || inoL > inoR) return {};
        //find pos of  preL in inorder list 
        int k = inoL;
        for(k ; k< inoR; ++k) {
            if(inorder[k] == preorder[preL]) break;
        }
        
        TreeNode * aNode = new TreeNode (preorder[preL]);
        //split in half
        aNode->left = helper(preorder, preL+1, preL + k - inoL, inorder, inoL, k - 1);
        aNode->right =helper(preorder, preL + k - inoL + 1, preR, inorder, k + 1, inoR);
        return aNode;
    }
};
