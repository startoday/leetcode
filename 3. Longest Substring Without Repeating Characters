Given a string, find the length of the longest substring without repeating characters.

Example 1:

Input: "abcabcbb"
Output: 3 
Explanation: The answer is "abc", with the length of 3. 
Example 2:

Input: "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3. 
             Note that the answer must be a substring, "pwke" is a subsequence and not a substring.


class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        m = {} #store the first apperance index
        res = 0
        i = 0
        for j in range(len(s)):
            if s[j] in m:
                i = max(i, m[s[j]] + 1) # pay attention to this!! we don't want i be smaller!!
            m[s[j]] = j
            res = max(res, j - i + 1)  # always need to check res!!!
        return res





#还是注意substring 需要是连续的！
#注意while loop 里面需要是 大于1 不是大于 0！多删了一个那样！
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int res = 0;
        int j = 0;
        unordered_map<int, int> ct;
        for(int i = 0; i < s.size(); ++i) {
            if(ct[s[i]] ++ == 0) res = max(res, i -j + 1);
            while(ct[s[i]] > 1) {
                --ct[s[j++]];
            }
        }
        return res;
    }
};
