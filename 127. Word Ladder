Given two words (beginWord and endWord), and a dictionary's word list, find the length of shortest transformation sequence from beginWord to endWord, such that:

Only one letter can be changed at a time.
Each transformed word must exist in the word list. Note that beginWord is not a transformed word.
Note:

***Return 0 if there is no such transformation sequence.
****All words have the same length.
****All words contain only lowercase alphabetic characters.
You may assume no duplicates in the word list.
****You may assume beginWord and endWord are non-empty and are not the same.
Example 1:

Input:
beginWord = "hit",
endWord = "cog",
wordList = ["hot","dot","dog","lot","log","cog"]

Output: 5

Explanation: As one shortest transformation is "hit" -> "hot" -> "dot" -> "dog" -> "cog",
return its length 5.

#每个单词都有相同的长度，所以可以直接bfs变一位的 如果该单词在list里并且等于end则return 到root的distance， 否则继续向下，distance +1
