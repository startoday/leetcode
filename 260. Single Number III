Given an integer array nums, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once. You can return the answer in any order.

Follow up: Your algorithm should run in linear runtime complexity. Could you implement it using only constant space complexity?

 

Example 1:

Input: nums = [1,2,1,3,2,5]
Output: [3,5]
Explanation:  [5, 3] is also a valid answer.
Example 2:

Input: nums = [-1,0]
Output: [-1,0]
Example 3:

Input: nums = [0,1]
Output: [1,0]
 

Constraints:

1 <= nums.length <= 30000
 Each integer in nums will appear twice, only two integers will appear once.
 
 # bit manip! 
 #https://wiki.python.org/moin/BitwiseOperators
 # idea: after all XOR(^) operation, there will be the tmp = a^b left, so we can use tmp&(-tmp)    [ -tmp = ~tmp + 1 ] to maintain/get the rightmost 1's
 # redo the calculation, only XOR the one has that rightmost 1's , then we find the first number a, and tmp^a will give us b
 
 class Solution:
    def singleNumber(self, nums: List[int]) -> List[int]:
        tmp = 0
        for n in nums:
            tmp^=n
        rm = tmp &(-tmp)
        x = 0
        for n in nums:
            if rm & n:
                x ^= n
        return [x , tmp ^x]
