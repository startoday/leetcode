Given two strings text1 and text2, return the length of their longest common subsequence.

A subsequence of a string is a new string generated from the original string with some characters(can be none) deleted without changing the relative order of the remaining characters. (eg, "ace" is a subsequence of "abcde" while "aec" is not). A common subsequence of two strings is a subsequence that is common to both strings.
If there is no common subsequence, return 0.

Example 1:

Input: text1 = "abcde", text2 = "ace" 
Output: 3  
Explanation: The longest common subsequence is "ace" and its length is 3.


#最长公共子序列
#LCS 相等 + 1， 不等的时候 i-1， j-1的取大
class Solution {
public:
    int longestCommonSubsequence(string text1, string text2) {
        int r = text1.size();
        int c = text2.size();
        vector<vector<int>> dp (r + 1, vector<int> (c + 1, 0));
        for(int i = 1; i <= r; ++i) {
            for(int j = 1; j <= c; ++j)
                 if(text1[i - 1] == text2[j - 1]) {
                     dp[i][j] = 1 + dp[i - 1][j - 1];
                 } else dp[i][j] = max(dp[i][j - 1], dp[i - 1][j]);
        }
        return dp[r][c];
    }
};
