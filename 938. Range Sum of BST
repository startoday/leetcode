#Tree 的练习开始！

Given the root node of a binary search tree, return the sum of values of all nodes with value between L and R (inclusive).

The binary search tree is guaranteed to have unique values.

 

Example 1:

Input: root = [10,5,15,3,7,null,18], L = 7, R = 15
Output: 32

#优化的
class Solution {
public:
    int rangeSumBST(TreeNode* root, int L, int R) {
        int res = 0;
        helper(root, L, R, res);
        return res;
    }
    void helper(TreeNode* root, int L, int R, int & res) {
        if(!root) return ;
        if(root->val >= L && root ->val <= R) res += root->val;
        helper(root->left, L, R, res);
        helper(root->right, L, R, res);
    }
};
#第一遍写的
class Solution {
public:
    int rangeSumBST(TreeNode* root, int L, int R) {
        if(!root) return 0;
        int res = 0;
        if((root->val) >= L && (root->val) <= R) res += root->val;
        int l = helper(root->left, L, R);
        int r = helper(root->right, L, R);
        res += l + r;
        return res;
    }
    int helper(TreeNode* root, int L, int R) {
        if(!root) return 0;
        int res = 0;
        if(root->val >= L && root ->val <= R) res += root->val;
        int l = helper(root->left, L, R);
        int r = helper(root->right, L, R);
        res += l + r;
        return res;
    }
};

#better solution
class Solution {
   
public:
    int rangeSumBST(TreeNode* root, int L, int R) {
        int res = 0;
        if(!root) return res;
        helper(root, L, R, res);
        return res;    
    }
    void helper(TreeNode * root, int L, int R, int & res){
        if(!root) return;
        if(root->val > L) helper(root->left, L, R, res); 
        if(L <= root->val && root->val <= R) res += root->val;
        if(root->val < R) helper(root->right, L, R, res);
    }
};
