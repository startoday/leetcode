#有K个sorted List merge他们

#用divide and conquer 的思想
#这种divide和mergeSort也类似 每次对半divide，把后面的merge到前面去
#注意对半的mid应该是（n+1）/2 来处理奇偶数的区别 （奇数时中间会留下）， merge完的数量还是对的

#pq
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next

class Solution:
    def mergeKLists(self, lists: List[ListNode]) -> ListNode:
        # have to define yourself.
        ListNode.__lt__ = lambda self, other: self.val < other.val
        h = []
        for i in range(len(lists)):
            if lists[i]:
                heapq.heappush(h, (lists[i]))
        dm = ListNode(-1)
        head = dm
        while h:
            y = heappop(h)
            head.next = y
            if y.next:
                heappush(h, ( y.next))
            head = head.next
        return dm.next

# divide and conquer : O(nlogk) space O(1)
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def mergeKLists(self, lists: List[ListNode]) -> ListNode:
        def mergeTwoLists(l1, l2): # O(n)
            dm = ListNode(-1)
            head = dm
            while l1 and l2:
                if l1.val <= l2.val:
                    head.next = l1
                    l1 = l1.next
                else:
                    head.next = l2
                    l2 = l2.next
                head = head.next
            if l1:
                head.next = l1
            if l2:
                head.next = l2
            return dm.next
        
        to = len(lists)
        if to == 0:
            return None
        interval = 1
        while interval <= to:
            for i in range(0, to-interval, interval*2): # pay attentioN!! needs times two!!!!
                lists[i] = mergeTwoLists(lists[i] , lists[i + interval])
            interval *= 2
                                        
        return lists[0]

class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if(lists.empty()) return NULL;
        int size = lists.size();
        while(size > 1){
            int mid = (1+size)/2;
            for(int i = 0; i < size/2; ++i) {
                //merge to lists into the first one
                lists[i]= mergeTwoLists(lists[i],lists[i+mid]);
            }
            size = mid; //don't forgot to update!!!
        }
        return lists[0];
    }
    ListNode* mergeTwoLists(ListNode* &l1, ListNode* &l2) {
        if(!l1 && !l2) return NULL;
        ListNode* dummyHead = new ListNode(-1);
        ListNode* cur = dummyHead;
        while(l1 && l2) {
            if(l1->val <= l2->val) {
                cur->next = l1;
                l1 = l1->next;
            } else {
                cur->next = l2;
                l2 = l2->next;
            }
            cur = cur->next;
        }
        if(!l2) cur->next = l1;
        if(!l1) cur->next = l2;
        return dummyHead->next;
    }
};



# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def mergeKLists(self, lists):
        """
        :type lists: List[ListNode]
        :rtype: ListNode
        """
        size = len(lists)
        interval = 1
        while interval < size:
            for i in range(0, size - interval, interval*2):
                lists[i] = self.meTwoList(lists[i], lists[i + interval])
            interval *=2
        return lists[0] if size > 0 else None
        
    def meTwoList(self, l1, l2):
        dumHead = ListNode(-1)
        head = dumHead
        while l1 and l2:
            if l1.val <= l2.val:
                head.next = l1 
                l1 = l1.next
            else:
                head.next = l2
                l2 = l2.next
            head = head.next
        while l1:
            head.next = l1 
            l1 = l1.next
            head = head.next
        while l2:
            head.next = l2
            l2 = l2.next
            head = head.next
            
        return dumHead.next
