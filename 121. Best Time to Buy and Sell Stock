#只有一次买卖，问最大值
Say you have an array for which the ith element is the price of a given stock on day i.

If you were only permitted to complete at most one transaction (i.e., buy one and sell one share of the stock), design an algorithm to find the maximum profit.

Note that you cannot sell a stock before you buy one.

Example 1:

Input: [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
             Not 7-1 = 6, as selling price needs to be larger than buying price.
Example 2:

Input: [7,6,4,3,1]
Output: 0
Explanation: In this case, no transaction is done, i.e. max profit = 0.

#那就还是快慢指针呗，左边最小 vs 右边最大的差值..其实一开始写错了。。。不是两侧同时移动的指针

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        if(prices.empty()) return 0;
        int buy = prices[0];
        int res = 0;
        int size = prices.size();

        for (int i = 0 ; i < size; ++i) {
            buy = min(buy, prices[i]);
            res = max (res, prices[i] - buy);
        }
        
        return res;
    }
};
