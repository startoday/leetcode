In a town, there are N people labelled from 1 to N.  There is a rumor that one of these people is secretly the town judge.

If the town judge exists, then:

The town judge trusts nobody.
Everybody (except for the town judge) trusts the town judge.
There is exactly one person that satisfies properties 1 and 2.
You are given trust, an array of pairs trust[i] = [a, b] representing that the person labelled a trusts the person labelled b.

If the town judge exists and can be identified, return the label of the town judge.  Otherwise, return -1.

 

Example 1:

Input: N = 2, trust = [[1,2]]
Output: 2
Example 2:

Input: N = 3, trust = [[1,3],[2,3]]
Output: 3


#一道easy 题，注意题里给了N个people了，有效利用N-1啊！
class Solution {
public:
    int findJudge(int N, vector<vector<int>>& trust) {
        //找一个第二位的数，并不是第一位过，而且只有一个
        //注意另一个要求是所有的人除了法官都得是投法官，所以法官票数 N-1
        vector<int> B (N);
        vector<int> A (N);
        //vector<int> res;
        int size = trust.size();
        for(int i = 0; i < size; i++) {
            A[trust[i][0]-1]++;
            B[trust[i][1]-1]++;
        }
        
        for(int i = 0 ; i< N; i++){            
            //if((B[i]) == (N-1) && A[i] == 0) res.push_back(i+1); //其实能满足这个条件的只能有一个，直接return 就行。。
             if((B[i]) == (N-1) && A[i] == 0) return i+1; //多个满足judge时---达不到N-1
        }
        
        return -1;
        //if(res.size() != 1) return -1;
        //return res[0];
    }
};
