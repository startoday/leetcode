Given an array nums of n integers and an integer target, are there elements a, b, c, and d in nums such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.

Notice that the solution set must not contain duplicate quadruplets.

 

Example 1:

Input: nums = [1,0,-1,0,-2,2], target = 0
Output: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]
Example 2:

Input: nums = [], target = 0
Output: []
 

Constraints:

0 <= nums.length <= 200
-10^9 <= nums[i] <= 10^9
-10^9 <= target <= 10^9


# O(n^3)
class Solution:
    def fourSum(self, nums: List[int], target: int) -> List[List[int]]:
        if len(nums) < 4:
            return []
        nums.sort()
        res = []
        for i in range(len(nums)-3):
            if i == 0 or nums[i] != nums[i-1]:
                for j in range(i+1,len(nums)-2):
                    if j ==i+1 or nums[j] != nums[j-1]:
                        l = j + 1
                        h = len(nums) -1
                        com = target - nums[i] - nums[j]
                        while l < h:
                            if nums[l] + nums[h] == com:
                                res.append([nums[i], nums[j], nums[l], nums[h]])
                                l += 1
                                h -= 1
                                while l < h and nums[l] == nums[l-1]:
                                    l += 1
                            elif nums[l] + nums[h] < com:
                                l += 1
                            else:
                                h -= 1
        return res
  
 # more general case using 2ptr /hash set:
 # 2 ptr:
 class Solution:
    def fourSum(self, nums: List[int], target: int) -> List[List[int]]:
        def kSum(n, t, k):
            if len(n) == 0 or n[0] * k > t or n[-1] * k < t:
                return []
            res = []
            if k == 2:
                return twoSum(n, t)
            for i in range(len(n)):
                if i == 0 or n[i] != n[i-1]:
                    for y in kSum(n[i+1:], t- n[i], k-1):
                        res.append([n[i]] + y)
            return res
        def twoSum(n, t):
            l = 0
            h = len(n) -1
            res = []
            while l < h:
                if n[l] + n[h] == t:
                    res.append([n[l], n[h]])
                    l += 1
                    h -= 1
                    while l < h and n[l] == n[l-1]:
                        l += 1
                elif n[l] + n[h] < t:
                    l += 1
                else:
                    h -= 1
            return res
        
        nums.sort()
        return kSum(nums, target, 4)
        
        
# hashset:
class Solution:
    def fourSum(self, nums: List[int], target: int) -> List[List[int]]:
        def kSum(n, t, k):
            if len(n) == 0 or n[0] * k > t or n[-1] * k < t:
                return []
            res = []
            if k == 2:
                return twoSum(n, t)
            for i in range(len(n)):
                if i == 0 or n[i] != n[i-1]:
                    for y in kSum(n[i+1:], t- n[i], k-1):
                        res.append([n[i]] + y)
            return res
        def twoSum(n, t):
            s = set()
            res =[]
            for x in n:
                if len(res) == 0 or res[-1][1] != x: # pay attention to this way of avoiding duplex 
                    if t-x in s:
                        res.append([t-x, x])
                    s.add(x)
            return res
        
        nums.sort()
        return kSum(nums, target, 4)
